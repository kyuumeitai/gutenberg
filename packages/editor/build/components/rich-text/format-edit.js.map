{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/components/rich-text/format-edit.js"],"names":["isResult","filterValue","title","keywords","normalizedSearchTerm","matchSearch","string","indexOf","some","FillToolbarButton","name","shortcutType","shortcutCharacter","props","shortcut","fillName","displayShortcut","FillInserterListItem","icon","Shortcut","arguments","onUse","bind","character","type","rawShortcut","Component","FormatEdit","formatTypes","onChange","value","map","Edit","edit","activeFormat","isActive","undefined","activeAttributes","attributes","select","getFormatTypes"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { normalizeIconObject } from '@wordpress/blocks';\nimport { withSelect } from '@wordpress/data';\nimport { Component, Fragment } from '@wordpress/element';\nimport { getActiveFormat } from '@wordpress/rich-text';\nimport { Fill, KeyboardShortcuts, ToolbarButton } from '@wordpress/components';\nimport { rawShortcut, displayShortcut } from '@wordpress/keycodes';\n\n/**\n * Internal dependencies\n */\nimport InserterListItem from '../inserter-list-item';\nimport { normalizeTerm } from '../inserter/menu';\n\nfunction isResult( { title, keywords = [] }, filterValue ) {\n\tconst normalizedSearchTerm = normalizeTerm( filterValue );\n\tconst matchSearch = ( string ) => normalizeTerm( string ).indexOf( normalizedSearchTerm ) !== -1;\n\treturn matchSearch( title ) || keywords.some( matchSearch );\n}\n\nfunction FillToolbarButton( { name, shortcutType, shortcutCharacter, ...props } ) {\n\tlet shortcut;\n\tlet fillName = 'RichText.ToolbarControls';\n\n\tif ( name ) {\n\t\tfillName += `.${ name }`;\n\t}\n\n\tif ( shortcutType && shortcutCharacter ) {\n\t\tshortcut = displayShortcut[ shortcutType ]( shortcutCharacter );\n\t}\n\n\treturn (\n\t\t<Fill name={ fillName }>\n\t\t\t<ToolbarButton\n\t\t\t\t{ ...props }\n\t\t\t\tshortcut={ shortcut }\n\t\t\t/>\n\t\t</Fill>\n\t);\n}\n\nfunction FillInserterListItem( props ) {\n\treturn (\n\t\t<Fill name=\"Inserter.InlineElements\">\n\t\t\t{ ( { filterValue } ) => {\n\t\t\t\tif ( filterValue && ! isResult( props, filterValue ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn <InserterListItem { ...props } icon={ normalizeIconObject( props.icon ) } />;\n\t\t\t} }\n\t\t</Fill>\n\t);\n}\n\nclass Shortcut extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.onUse = this.onUse.bind( this );\n\t}\n\n\tonUse() {\n\t\tthis.props.onUse();\n\t\treturn false;\n\t}\n\n\trender() {\n\t\tconst { character, type } = this.props;\n\n\t\treturn (\n\t\t\t<KeyboardShortcuts\n\t\t\t\tbindGlobal\n\t\t\t\tshortcuts={ {\n\t\t\t\t\t[ rawShortcut[ type ]( character ) ]: this.onUse,\n\t\t\t\t} }\n\t\t\t/>\n\t\t);\n\t}\n}\n\nconst FormatEdit = ( { formatTypes, onChange, value } ) => {\n\treturn (\n\t\t<Fragment>\n\t\t\t{ formatTypes.map( ( { name, edit: Edit, keywords } ) => {\n\t\t\t\tif ( ! Edit ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst activeFormat = getActiveFormat( value, name );\n\t\t\t\tconst isActive = activeFormat !== undefined;\n\t\t\t\tconst activeAttributes = isActive ? activeFormat.attributes || {} : {};\n\n\t\t\t\treturn (\n\t\t\t\t\t<Edit\n\t\t\t\t\t\tkey={ name }\n\t\t\t\t\t\tisActive={ isActive }\n\t\t\t\t\t\tactiveAttributes={ activeAttributes }\n\t\t\t\t\t\tvalue={ value }\n\t\t\t\t\t\tonChange={ onChange }\n\t\t\t\t\t\tToolbarButton={ FillToolbarButton }\n\t\t\t\t\t\tInserterListItem={ ( props ) =>\n\t\t\t\t\t\t\t<FillInserterListItem\n\t\t\t\t\t\t\t\tkeywords={ keywords }\n\t\t\t\t\t\t\t\t{ ...props }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tShortcut={ Shortcut }\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t} ) }\n\t\t</Fragment>\n\t);\n};\n\nexport default withSelect(\n\t( select ) => {\n\t\tconst { getFormatTypes } = select( 'core/rich-text' );\n\n\t\treturn {\n\t\t\tformatTypes: getFormatTypes(),\n\t\t};\n\t}\n)( FormatEdit );\n"]}