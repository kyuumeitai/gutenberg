{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/store/reducer.js"],"names":["optimist","flow","reduce","first","last","omit","without","mapValues","omitBy","keys","isEqual","overSome","get","isReusableBlock","combineReducers","withHistory","withChangeDetection","PREFERENCES_DEFAULTS","EDITOR_SETTINGS_DEFAULTS","insertAt","moveTo","getPostRawValue","value","raw","mapBlockOrder","blocks","rootClientId","result","forEach","block","clientId","innerBlocks","push","Object","assign","getFlattenedBlocks","flattenedBlocks","stack","length","shift","hasSameKeys","a","b","isUpdatingSameBlockAttribute","action","previousAction","type","attributes","isUpdatingSamePostProperty","edits","shouldOverwriteState","withInnerBlocksRemoveCascade","reducer","state","clientIds","i","order","editor","resetTypes","ignoreTypes","key","getCanonicalValue","post","byClientId","nextAttributes","updates","id","updatedId","name","ref","subState","mappedBlocks","index","fromRootClientId","toRootClientId","fromIndex","indexOf","firstClientId","firstIndex","lastClientId","nextState","currentPost","isTyping","isCaretWithinFormattedText","blockSelection","start","end","isMultiSelecting","isEnabled","initialPosition","nextSelectedBlockClientId","isSelectionEnabled","blocksMode","insertionPoint","template","isValid","settings","preferences","prevState","insert","insertUsage","time","count","isPublishSidebarEnabled","saving","requesting","successful","error","isAutosave","postLock","isLocked","lock","postSavingLock","lockName","reusableBlocks","data","results","reusableBlock","title","parsedBlock","isFetching","isSaving","blockListSettings","hasOwnProperty","autosave","map","field","excerpt","content","preview_link","options"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport optimist from 'redux-optimist';\nimport {\n\tflow,\n\treduce,\n\tfirst,\n\tlast,\n\tomit,\n\twithout,\n\tmapValues,\n\tomitBy,\n\tkeys,\n\tisEqual,\n\toverSome,\n\tget,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { isReusableBlock } from '@wordpress/blocks';\nimport { combineReducers } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport withHistory from '../utils/with-history';\nimport withChangeDetection from '../utils/with-change-detection';\nimport { PREFERENCES_DEFAULTS, EDITOR_SETTINGS_DEFAULTS } from './defaults';\nimport { insertAt, moveTo } from './array';\n\n/**\n * Returns a post attribute value, flattening nested rendered content using its\n * raw value in place of its original object form.\n *\n * @param {*} value Original value.\n *\n * @return {*} Raw value.\n */\nexport function getPostRawValue( value ) {\n\tif ( value && 'object' === typeof value && 'raw' in value ) {\n\t\treturn value.raw;\n\t}\n\n\treturn value;\n}\n\n/**\n * Given an array of blocks, returns an object where each key is a nesting\n * context, the value of which is an array of block client IDs existing within\n * that nesting context.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockOrder( blocks, rootClientId = '' ) {\n\tconst result = { [ rootClientId ]: [] };\n\n\tblocks.forEach( ( block ) => {\n\t\tconst { clientId, innerBlocks } = block;\n\n\t\tresult[ rootClientId ].push( clientId );\n\n\t\tObject.assign( result, mapBlockOrder( innerBlocks, clientId ) );\n\t} );\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object containing all blocks, recursing\n * into inner blocks. Keys correspond to the block client ID, the value of\n * which is the block object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened blocks object.\n */\nfunction getFlattenedBlocks( blocks ) {\n\tconst flattenedBlocks = {};\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\t// `innerBlocks` is redundant data which can fall out of sync, since\n\t\t// this is reflected in `blocks.order`, so exclude from appended block.\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\n\t\tstack.push( ...innerBlocks );\n\n\t\tflattenedBlocks[ block.clientId ] = block;\n\t}\n\n\treturn flattenedBlocks;\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn isEqual( keys( a ), keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are updating the same block attribute, or\n * false otherwise.\n *\n * @param {Object} action         Currently dispatching action.\n * @param {Object} previousAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same block attribute.\n */\nexport function isUpdatingSameBlockAttribute( action, previousAction ) {\n\treturn (\n\t\taction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\taction.clientId === previousAction.clientId &&\n\t\thasSameKeys( action.attributes, previousAction.attributes )\n\t);\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are editing the same post property, or\n * false otherwise.\n *\n * @param {Object} action         Currently dispatching action.\n * @param {Object} previousAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same post property.\n */\nexport function isUpdatingSamePostProperty( action, previousAction ) {\n\treturn (\n\t\taction.type === 'EDIT_POST' &&\n\t\thasSameKeys( action.edits, previousAction.edits )\n\t);\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are modifying the same property such that\n * undo history should be batched.\n *\n * @param {Object} action         Currently dispatching action.\n * @param {Object} previousAction Previously dispatched action.\n *\n * @return {boolean} Whether to overwrite present state.\n */\nexport function shouldOverwriteState( action, previousAction ) {\n\tif ( ! previousAction || action.type !== previousAction.type ) {\n\t\treturn false;\n\t}\n\n\treturn overSome( [\n\t\tisUpdatingSameBlockAttribute,\n\t\tisUpdatingSamePostProperty,\n\t] )( action, previousAction );\n}\n\n/**\n * Higher-order reducer targeting the combined editor reducer, augmenting\n * block client IDs in remove action to include cascade of inner blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withInnerBlocksRemoveCascade = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'REMOVE_BLOCKS' ) {\n\t\tconst clientIds = [ ...action.clientIds ];\n\n\t\t// For each removed client ID, include its inner blocks to remove,\n\t\t// recursing into those so long as inner blocks exist.\n\t\tfor ( let i = 0; i < clientIds.length; i++ ) {\n\t\t\tclientIds.push( ...state.blocks.order[ clientIds[ i ] ] );\n\t\t}\n\n\t\taction = { ...action, clientIds };\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Undoable reducer returning the editor post state, including blocks parsed\n * from current HTML markup.\n *\n * Handles the following state keys:\n *  - edits: an object describing changes to be made to the current post, in\n *           the format accepted by the WP REST API\n *  - blocks: post content blocks\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @returns {Object} Updated state.\n */\nexport const editor = flow( [\n\tcombineReducers,\n\n\twithInnerBlocksRemoveCascade,\n\n\t// Track undo history, starting at editor initialization.\n\twithHistory( {\n\t\tresetTypes: [ 'SETUP_EDITOR_STATE' ],\n\t\tignoreTypes: [ 'RECEIVE_BLOCKS', 'RESET_POST', 'UPDATE_POST' ],\n\t\tshouldOverwriteState,\n\t} ),\n\n\t// Track whether changes exist, resetting at each post save. Relies on\n\t// editor initialization firing post reset as an effect.\n\twithChangeDetection( {\n\t\tresetTypes: [ 'SETUP_EDITOR_STATE', 'REQUEST_POST_UPDATE_START' ],\n\t\tignoreTypes: [ 'RECEIVE_BLOCKS', 'RESET_POST', 'UPDATE_POST' ],\n\t} ),\n] )( {\n\tedits( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'EDIT_POST':\n\t\t\tcase 'SETUP_EDITOR_STATE':\n\t\t\t\treturn reduce( action.edits, ( result, value, key ) => {\n\t\t\t\t\t// Only assign into result if not already same value\n\t\t\t\t\tif ( value !== state[ key ] ) {\n\t\t\t\t\t\t// Avoid mutating original state by creating shallow\n\t\t\t\t\t\t// clone. Should only occur once per reduce.\n\t\t\t\t\t\tif ( result === state ) {\n\t\t\t\t\t\t\tresult = { ...state };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult[ key ] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t}, state );\n\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\tif ( 'content' in state ) {\n\t\t\t\t\treturn omit( state, 'content' );\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\n\t\t\tcase 'DIRTY_ARTIFICIALLY':\n\t\t\t\treturn { ...state };\n\n\t\t\tcase 'UPDATE_POST':\n\t\t\tcase 'RESET_POST':\n\t\t\t\tconst getCanonicalValue = action.type === 'UPDATE_POST' ?\n\t\t\t\t\t( key ) => action.edits[ key ] :\n\t\t\t\t\t( key ) => getPostRawValue( action.post[ key ] );\n\n\t\t\t\treturn reduce( state, ( result, value, key ) => {\n\t\t\t\t\tif ( value !== getCanonicalValue( key ) ) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( state === result ) {\n\t\t\t\t\t\tresult = { ...state };\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete result[ key ];\n\t\t\t\t\treturn result;\n\t\t\t\t}, state );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tblocks: combineReducers( {\n\t\tbyClientId( state = {}, action ) {\n\t\t\tswitch ( action.type ) {\n\t\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\tcase 'SETUP_EDITOR_STATE':\n\t\t\t\t\treturn getFlattenedBlocks( action.blocks );\n\n\t\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t...getFlattenedBlocks( action.blocks ),\n\t\t\t\t\t};\n\n\t\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\t\t\t// Ignore updates if block isn't known\n\t\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Consider as updates only changed values\n\t\t\t\t\tconst nextAttributes = reduce( action.attributes, ( result, value, key ) => {\n\t\t\t\t\t\tif ( value !== result[ key ] ) {\n\t\t\t\t\t\t\t// Avoid mutating original block by creating shallow clone\n\t\t\t\t\t\t\tif ( result === state[ action.clientId ].attributes ) {\n\t\t\t\t\t\t\t\tresult = { ...result };\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tresult[ key ] = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}, state[ action.clientId ].attributes );\n\n\t\t\t\t\t// Skip update if nothing has been changed. The reference will\n\t\t\t\t\t// match the original block if `reduce` had no changed values.\n\t\t\t\t\tif ( nextAttributes === state[ action.clientId ].attributes ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Otherwise merge attributes into state\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t\tattributes: nextAttributes,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t\t// Ignore updates if block isn't known\n\t\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t\t...action.updates,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t...getFlattenedBlocks( action.blocks ),\n\t\t\t\t\t};\n\n\t\t\t\tcase 'REPLACE_BLOCKS':\n\t\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...omit( state, action.clientIds ),\n\t\t\t\t\t\t...getFlattenedBlocks( action.blocks ),\n\t\t\t\t\t};\n\n\t\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\t\treturn omit( state, action.clientIds );\n\n\t\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\t\t\tconst { id, updatedId } = action;\n\n\t\t\t\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one\n\t\t\t\t\tif ( id === updatedId ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn mapValues( state, ( block ) => {\n\t\t\t\t\t\tif ( block.name === 'core/block' && block.attributes.ref === id ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...block,\n\t\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\t\t...block.attributes,\n\t\t\t\t\t\t\t\t\tref: updatedId,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn block;\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn state;\n\t\t},\n\n\t\torder( state = {}, action ) {\n\t\t\tswitch ( action.type ) {\n\t\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\tcase 'SETUP_EDITOR_STATE':\n\t\t\t\t\treturn mapBlockOrder( action.blocks );\n\n\t\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t...omit( mapBlockOrder( action.blocks ), '' ),\n\t\t\t\t\t};\n\n\t\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\t\tconst { rootClientId = '', blocks } = action;\n\t\t\t\t\tconst subState = state[ rootClientId ] || [];\n\t\t\t\t\tconst mappedBlocks = mapBlockOrder( blocks, rootClientId );\n\t\t\t\t\tconst { index = subState.length } = action;\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t...mappedBlocks,\n\t\t\t\t\t\t[ rootClientId ]: insertAt( subState, mappedBlocks[ rootClientId ], index ),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tcase 'MOVE_BLOCK_TO_POSITION': {\n\t\t\t\t\tconst { fromRootClientId = '', toRootClientId = '', clientId } = action;\n\t\t\t\t\tconst { index = state[ toRootClientId ].length } = action;\n\n\t\t\t\t\t// Moving inside the same parent block\n\t\t\t\t\tif ( fromRootClientId === toRootClientId ) {\n\t\t\t\t\t\tconst subState = state[ toRootClientId ];\n\t\t\t\t\t\tconst fromIndex = subState.indexOf( clientId );\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t[ toRootClientId ]: moveTo( state[ toRootClientId ], fromIndex, index ),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Moving from a parent block to another\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ fromRootClientId ]: without( state[ fromRootClientId ], clientId ),\n\t\t\t\t\t\t[ toRootClientId ]: insertAt( state[ toRootClientId ], clientId, index ),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tcase 'MOVE_BLOCKS_UP': {\n\t\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\t\tif ( ! subState.length || firstClientId === first( subState ) ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ rootClientId ]: moveTo( subState, firstIndex, firstIndex - 1, clientIds.length ),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\t\tconst lastClientId = last( clientIds );\n\t\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\t\tif ( ! subState.length || lastClientId === last( subState ) ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ rootClientId ]: moveTo( subState, firstIndex, firstIndex + 1, clientIds.length ),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tcase 'REPLACE_BLOCKS': {\n\t\t\t\t\tconst { blocks, clientIds } = action;\n\t\t\t\t\tif ( ! blocks ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst mappedBlocks = mapBlockOrder( blocks );\n\n\t\t\t\t\treturn flow( [\n\t\t\t\t\t\t( nextState ) => omit( nextState, clientIds ),\n\t\t\t\t\t\t( nextState ) => ( {\n\t\t\t\t\t\t\t...nextState,\n\t\t\t\t\t\t\t...omit( mappedBlocks, '' ),\n\t\t\t\t\t\t} ),\n\t\t\t\t\t\t( nextState ) => mapValues( nextState, ( subState ) => (\n\t\t\t\t\t\t\treduce( subState, ( result, clientId ) => {\n\t\t\t\t\t\t\t\tif ( clientId === clientIds[ 0 ] ) {\n\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\t\t\t\t...mappedBlocks[ '' ],\n\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( clientIds.indexOf( clientId ) === -1 ) {\n\t\t\t\t\t\t\t\t\tresult.push( clientId );\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t}, [] )\n\t\t\t\t\t\t) ),\n\t\t\t\t\t] )( state );\n\t\t\t\t}\n\n\t\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\t\treturn flow( [\n\t\t\t\t\t\t// Remove inner block ordering for removed blocks\n\t\t\t\t\t\t( nextState ) => omit( nextState, action.clientIds ),\n\n\t\t\t\t\t\t// Remove deleted blocks from other blocks' orderings\n\t\t\t\t\t\t( nextState ) => mapValues( nextState, ( subState ) => (\n\t\t\t\t\t\t\twithout( subState, ...action.clientIds )\n\t\t\t\t\t\t) ),\n\t\t\t\t\t] )( state );\n\t\t\t}\n\n\t\t\treturn state;\n\t\t},\n\t} ),\n} );\n\n/**\n * Reducer returning the last-known state of the current post, in the format\n * returned by the WP REST API.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function currentPost( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SETUP_EDITOR_STATE':\n\t\tcase 'RESET_POST':\n\t\tcase 'UPDATE_POST':\n\t\t\tlet post;\n\t\t\tif ( action.post ) {\n\t\t\t\tpost = action.post;\n\t\t\t} else if ( action.edits ) {\n\t\t\t\tpost = {\n\t\t\t\t\t...state,\n\t\t\t\t\t...action.edits,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn mapValues( post, getPostRawValue );\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning typing state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isTyping( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_TYPING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_TYPING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the caret is within formatted text.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isCaretWithinFormattedText( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENTER_FORMATTED_TEXT':\n\t\t\treturn true;\n\n\t\tcase 'EXIT_FORMATTED_TEXT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block selection's state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function blockSelection( state = {\n\tstart: null,\n\tend: null,\n\tisMultiSelecting: false,\n\tisEnabled: true,\n\tinitialPosition: null,\n}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'CLEAR_SELECTED_BLOCK':\n\t\t\tif ( state.start === null && state.end === null && ! state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: null,\n\t\t\t\tend: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'START_MULTI_SELECT':\n\t\t\tif ( state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisMultiSelecting: true,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'STOP_MULTI_SELECT':\n\t\t\tif ( ! state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'MULTI_SELECT':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: action.start,\n\t\t\t\tend: action.end,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId === state.start && action.clientId === state.end ) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: action.clientId,\n\t\t\t\tend: action.clientId,\n\t\t\t\tinitialPosition: action.initialPosition,\n\t\t\t};\n\t\tcase 'INSERT_BLOCKS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: action.blocks[ 0 ].clientId,\n\t\t\t\tend: action.blocks[ 0 ].clientId,\n\t\t\t\tinitialPosition: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t};\n\t\tcase 'REMOVE_BLOCKS':\n\t\t\tif ( ! action.clientIds || ! action.clientIds.length || action.clientIds.indexOf( state.start ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: null,\n\t\t\t\tend: null,\n\t\t\t\tinitialPosition: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t};\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\tif ( action.clientIds.indexOf( state.start ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\t// If there is replacement block(s), assign first's client ID as\n\t\t\t// the next selected block. If empty replacement, reset to null.\n\t\t\tconst nextSelectedBlockClientId = get( action.blocks, [ 0, 'clientId' ], null );\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: nextSelectedBlockClientId,\n\t\t\t\tend: nextSelectedBlockClientId,\n\t\t\t\tinitialPosition: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t};\n\t\tcase 'TOGGLE_SELECTION':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisEnabled: action.isSelectionEnabled,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\nexport function blocksMode( state = {}, action ) {\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\n\t\tconst { clientId } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ clientId ]: state[ clientId ] && state[ clientId ] === 'html' ? 'visual' : 'html',\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion point visibility, either null if there\n * is not an explicit insertion point assigned, or an object of its `index` and\n * `rootClientId`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function insertionPoint( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SHOW_INSERTION_POINT':\n\t\t\tconst { rootClientId, index } = action;\n\t\t\treturn { rootClientId, index };\n\n\t\tcase 'HIDE_INSERTION_POINT':\n\t\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function settings( state = EDITOR_SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_EDITOR_SETTINGS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object}  state                 Current state.\n * @param {Object}  action                Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\treturn action.blocks.reduce( ( prevState, block ) => {\n\t\t\t\tlet id = block.name;\n\t\t\t\tconst insert = { name: block.name };\n\t\t\t\tif ( isReusableBlock( block ) ) {\n\t\t\t\t\tinsert.ref = block.attributes.ref;\n\t\t\t\t\tid += '/' + block.attributes.ref;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\tinsertUsage: {\n\t\t\t\t\t\t...prevState.insertUsage,\n\t\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t\ttime: action.time,\n\t\t\t\t\t\t\tcount: prevState.insertUsage[ id ] ? prevState.insertUsage[ id ].count + 1 : 1,\n\t\t\t\t\t\t\tinsert,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}, state );\n\n\t\tcase 'REMOVE_REUSABLE_BLOCK':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tinsertUsage: omitBy( state.insertUsage, ( { insert } ) => insert.ref === action.id ),\n\t\t\t};\n\n\t\tcase 'ENABLE_PUBLISH_SIDEBAR':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisPublishSidebarEnabled: true,\n\t\t\t};\n\n\t\tcase 'DISABLE_PUBLISH_SIDEBAR':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisPublishSidebarEnabled: false,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning current network request state (whether a request to\n * the WP REST API is in progress, successful, or failed).\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function saving( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'REQUEST_POST_UPDATE_START':\n\t\t\treturn {\n\t\t\t\trequesting: true,\n\t\t\t\tsuccessful: false,\n\t\t\t\terror: null,\n\t\t\t\tisAutosave: action.isAutosave,\n\t\t\t};\n\n\t\tcase 'REQUEST_POST_UPDATE_SUCCESS':\n\t\t\treturn {\n\t\t\t\trequesting: false,\n\t\t\t\tsuccessful: true,\n\t\t\t\terror: null,\n\t\t\t};\n\n\t\tcase 'REQUEST_POST_UPDATE_FAILURE':\n\t\t\treturn {\n\t\t\t\trequesting: false,\n\t\t\t\tsuccessful: false,\n\t\t\t\terror: action.error,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Post Lock State.\n *\n * @typedef {Object} PostLockState\n *\n * @property {boolean} isLocked       Whether the post is locked.\n * @property {?boolean} isTakeover     Whether the post editing has been taken over.\n * @property {?boolean} activePostLock Active post lock value.\n * @property {?Object}  user           User that took over the post.\n */\n\n/**\n * Reducer returning the post lock status.\n *\n * @param {PostLockState} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {PostLockState} Updated state.\n */\nexport function postLock( state = { isLocked: false }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_POST_LOCK':\n\t\t\treturn action.lock;\n\t}\n\n\treturn state;\n}\n\n/**\n * Post saving lock.\n *\n * When post saving is locked, the post cannot be published or updated.\n *\n * @param {PostSavingLockState} state  Current state.\n * @param {Object}              action Dispatched action.\n *\n * @return {PostLockState} Updated state.\n */\nexport function postSavingLock( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'LOCK_POST_SAVING':\n\t\t\treturn { ...state, [ action.lockName ]: true };\n\n\t\tcase 'UNLOCK_POST_SAVING':\n\t\t\treturn omit( state, action.lockName );\n\t}\n\treturn state;\n}\n\nexport const reusableBlocks = combineReducers( {\n\tdata( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_REUSABLE_BLOCKS': {\n\t\t\t\treturn reduce( action.results, ( nextState, result ) => {\n\t\t\t\t\tconst { id, title } = result.reusableBlock;\n\t\t\t\t\tconst { clientId } = result.parsedBlock;\n\n\t\t\t\t\tconst value = { clientId, title };\n\n\t\t\t\t\tif ( ! isEqual( nextState[ id ], value ) ) {\n\t\t\t\t\t\tif ( nextState === state ) {\n\t\t\t\t\t\t\tnextState = { ...nextState };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnextState[ id ] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn nextState;\n\t\t\t\t}, state );\n\t\t\t}\n\n\t\t\tcase 'UPDATE_REUSABLE_BLOCK_TITLE': {\n\t\t\t\tconst { id, title } = action;\n\n\t\t\t\tif ( ! state[ id ] || state[ id ].title === title ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t...state[ id ],\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\t\tconst { id, updatedId } = action;\n\n\t\t\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one\n\t\t\t\tif ( id === updatedId ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst value = state[ id ];\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, id ),\n\t\t\t\t\t[ updatedId ]: value,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REMOVE_REUSABLE_BLOCK': {\n\t\t\t\tconst { id } = action;\n\t\t\t\treturn omit( state, id );\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tisFetching( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'FETCH_REUSABLE_BLOCKS': {\n\t\t\t\tconst { id } = action;\n\t\t\t\tif ( ! id ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ id ]: true,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'FETCH_REUSABLE_BLOCKS_SUCCESS':\n\t\t\tcase 'FETCH_REUSABLE_BLOCKS_FAILURE': {\n\t\t\t\tconst { id } = action;\n\t\t\t\treturn omit( state, id );\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tisSaving( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'SAVE_REUSABLE_BLOCK':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.id ]: true,\n\t\t\t\t};\n\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS':\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_FAILURE': {\n\t\t\t\tconst { id } = action;\n\t\t\t\treturn omit( state, id );\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning an object where each key is a block client ID, its value\n * representing the settings for its nested blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blockListSettings = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\t// Even if the replaced blocks have the same client ID, our logic\n\t\t// should correct the state.\n\t\tcase 'REPLACE_BLOCKS' :\n\t\tcase 'REMOVE_BLOCKS': {\n\t\t\treturn omit( state, action.clientIds );\n\t\t}\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\n\t\t\tconst { clientId } = action;\n\t\t\tif ( ! action.settings ) {\n\t\t\t\tif ( state.hasOwnProperty( clientId ) ) {\n\t\t\t\t\treturn omit( state, clientId );\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif ( isEqual( state[ clientId ], action.settings ) ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: action.settings,\n\t\t\t};\n\t\t}\n\t}\n\treturn state;\n};\n\n/**\n * Reducer returning the most recent autosave.\n *\n * @param  {Object} state  The autosave object.\n * @param  {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function autosave( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RESET_AUTOSAVE':\n\t\t\tconst { post } = action;\n\t\t\tconst [ title, excerpt, content ] = [\n\t\t\t\t'title',\n\t\t\t\t'excerpt',\n\t\t\t\t'content',\n\t\t\t].map( ( field ) => getPostRawValue( post[ field ] ) );\n\n\t\t\treturn {\n\t\t\t\ttitle,\n\t\t\t\texcerpt,\n\t\t\t\tcontent,\n\t\t\t\tpreview_link: post.preview_link,\n\t\t\t};\n\n\t\tcase 'REQUEST_POST_UPDATE':\n\t\t\t// Invalidate known preview link when autosave starts.\n\t\t\tif ( state && action.options.autosave ) {\n\t\t\t\treturn omit( state, 'preview_link' );\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn state;\n}\n\nexport default optimist( combineReducers( {\n\teditor,\n\tcurrentPost,\n\tisTyping,\n\tisCaretWithinFormattedText,\n\tblockSelection,\n\tblocksMode,\n\tblockListSettings,\n\tinsertionPoint,\n\tpreferences,\n\tsaving,\n\tpostLock,\n\treusableBlocks,\n\ttemplate,\n\tautosave,\n\tsettings,\n\tpostSavingLock,\n} ) );\n"]}