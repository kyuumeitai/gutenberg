{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/url/src/index.js"],"names":["URL_REGEXP","EMAIL_REGEXP","USABLE_HREF_REGEXP","isURL","url","test","addQueryArgs","args","queryStringIndex","indexOf","query","substr","baseUrl","getQueryArg","arg","hasQueryArg","undefined","removeQueryArgs","forEach","prependHTTP","safeDecodeURI","uri","decodeURI","uriError","filterURLForDisplay","filteredURL","replace","match"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { parse, stringify } from 'qs';\n\nconst URL_REGEXP = /^(?:https?:)?\\/\\/\\S+$/i;\nconst EMAIL_REGEXP = /^(mailto:)?[a-z0-9._%+-]+@[a-z0-9][a-z0-9.-]*\\.[a-z]{2,63}$/i;\nconst USABLE_HREF_REGEXP = /^(?:[a-z]+:|#|\\?|\\.|\\/)/i;\n\n/**\n * Determines whether the given string looks like a URL.\n *\n * @param {string} url The string to scrutinise.\n *\n * @return {boolean} Whether or not it looks like a URL.\n */\nexport function isURL( url ) {\n\treturn URL_REGEXP.test( url );\n}\n\n/**\n * Appends arguments to the query string of the url\n *\n * @param {string} url  URL\n * @param {Object} args Query Args\n *\n * @return {string} Updated URL\n */\nexport function addQueryArgs( url, args ) {\n\tconst queryStringIndex = url.indexOf( '?' );\n\tconst query = queryStringIndex !== -1 ? parse( url.substr( queryStringIndex + 1 ) ) : {};\n\tconst baseUrl = queryStringIndex !== -1 ? url.substr( 0, queryStringIndex ) : url;\n\n\treturn baseUrl + '?' + stringify( { ...query, ...args } );\n}\n\n/**\n * Returns a single query argument of the url\n *\n * @param {string} url URL\n * @param {string} arg Query arg name\n *\n * @return {Array|string} Query arg value.\n */\nexport function getQueryArg( url, arg ) {\n\tconst queryStringIndex = url.indexOf( '?' );\n\tconst query = queryStringIndex !== -1 ? parse( url.substr( queryStringIndex + 1 ) ) : {};\n\n\treturn query[ arg ];\n}\n\n/**\n * Determines whether the URL contains a given query arg.\n *\n * @param {string} url URL\n * @param {string} arg Query arg name\n *\n * @return {boolean} Whether or not the URL contains the query aeg.\n */\nexport function hasQueryArg( url, arg ) {\n\treturn getQueryArg( url, arg ) !== undefined;\n}\n\n/**\n * Removes arguments from the query string of the url\n *\n * @param {string} url  URL\n * @param {...string} args Query Args\n *\n * @return {string} Updated URL\n */\nexport function removeQueryArgs( url, ...args ) {\n\tconst queryStringIndex = url.indexOf( '?' );\n\tconst query = queryStringIndex !== -1 ? parse( url.substr( queryStringIndex + 1 ) ) : {};\n\tconst baseUrl = queryStringIndex !== -1 ? url.substr( 0, queryStringIndex ) : url;\n\n\targs.forEach( ( arg ) => delete query[ arg ] );\n\n\treturn baseUrl + '?' + stringify( query );\n}\n\n/**\n * Prepends \"http://\" to a url, if it looks like something that is meant to be a TLD.\n *\n * @param  {string} url The URL to test\n *\n * @return {string}     The updated URL\n */\nexport function prependHTTP( url ) {\n\tif ( ! USABLE_HREF_REGEXP.test( url ) && ! EMAIL_REGEXP.test( url ) ) {\n\t\treturn 'http://' + url;\n\t}\n\n\treturn url;\n}\n\n/**\n * Safely decodes a URI with `decodeURI`. Returns the URI unmodified if\n * `decodeURI` throws an error.\n *\n * @param {string} uri URI to decode.\n *\n * @return {string} Decoded URI if possible.\n */\nexport function safeDecodeURI( uri ) {\n\ttry {\n\t\treturn decodeURI( uri );\n\t} catch ( uriError ) {\n\t\treturn uri;\n\t}\n}\n\n/**\n * Returns a URL for display.\n *\n * @param {string} url Original URL.\n *\n * @return {string} Displayed URL.\n */\nexport function filterURLForDisplay( url ) {\n\t// Remove protocol and www prefixes.\n\tconst filteredURL = url.replace( /^(?:https?:)\\/\\/(?:www\\.)?/, '' );\n\n\t// Ends with / and only has that single slash, strip it.\n\tif ( filteredURL.match( /^[^\\/]+\\/$/ ) ) {\n\t\treturn filteredURL.replace( '/', '' );\n\t}\n\n\treturn filteredURL;\n}\n"]}