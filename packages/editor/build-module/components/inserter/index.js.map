{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/components/inserter/index.js"],"names":["__","Dropdown","IconButton","Component","withSelect","compose","ifCondition","InserterMenu","defaultRenderToggle","onToggle","disabled","isOpen","Inserter","arguments","bind","renderToggle","renderContent","props","onClose","rootClientId","index","position","title","select","getEditedPostAttribute","getBlockInsertionPoint","getInserterItems","undefined","insertionPoint","hasItems","length"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Dropdown, IconButton } from '@wordpress/components';\nimport { Component } from '@wordpress/element';\nimport { withSelect } from '@wordpress/data';\nimport { compose, ifCondition } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport InserterMenu from './menu';\n\nconst defaultRenderToggle = ( { onToggle, disabled, isOpen } ) => (\n\t<IconButton\n\t\ticon=\"insert\"\n\t\tlabel={ __( 'Add block' ) }\n\t\tonClick={ onToggle }\n\t\tclassName=\"editor-inserter__toggle\"\n\t\taria-haspopup=\"true\"\n\t\taria-expanded={ isOpen }\n\t\tdisabled={ disabled }\n\t/>\n);\n\nclass Inserter extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.onToggle = this.onToggle.bind( this );\n\t\tthis.renderToggle = this.renderToggle.bind( this );\n\t\tthis.renderContent = this.renderContent.bind( this );\n\t}\n\n\tonToggle( isOpen ) {\n\t\tconst { onToggle } = this.props;\n\n\t\t// Surface toggle callback to parent component\n\t\tif ( onToggle ) {\n\t\t\tonToggle( isOpen );\n\t\t}\n\t}\n\n\t/**\n\t * Render callback to display Dropdown toggle element.\n\t *\n\t * @param {Function} options.onToggle Callback to invoke when toggle is\n\t *                                    pressed.\n\t * @param {boolean}  options.isOpen   Whether dropdown is currently open.\n\t *\n\t * @return {WPElement} Dropdown toggle element.\n\t */\n\trenderToggle( { onToggle, isOpen } ) {\n\t\tconst {\n\t\t\tdisabled,\n\t\t\trenderToggle = defaultRenderToggle,\n\t\t} = this.props;\n\n\t\treturn renderToggle( { onToggle, isOpen, disabled } );\n\t}\n\n\t/**\n\t * Render callback to display Dropdown content element.\n\t *\n\t * @param {Function} options.onClose Callback to invoke when dropdown is\n\t *                                   closed.\n\t *\n\t * @return {WPElement} Dropdown content element.\n\t */\n\trenderContent( { onClose } ) {\n\t\tconst { rootClientId, index } = this.props;\n\n\t\treturn (\n\t\t\t<InserterMenu\n\t\t\t\tonSelect={ onClose }\n\t\t\t\trootClientId={ rootClientId }\n\t\t\t\tindex={ index }\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { position, title } = this.props;\n\n\t\treturn (\n\t\t\t<Dropdown\n\t\t\t\tclassName=\"editor-inserter\"\n\t\t\t\tcontentClassName=\"editor-inserter__popover\"\n\t\t\t\tposition={ position }\n\t\t\t\tonToggle={ this.onToggle }\n\t\t\t\texpandOnMobile\n\t\t\t\theaderTitle={ title }\n\t\t\t\trenderToggle={ this.renderToggle }\n\t\t\t\trenderContent={ this.renderContent }\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default compose( [\n\twithSelect( ( select, { rootClientId, index } ) => {\n\t\tconst {\n\t\t\tgetEditedPostAttribute,\n\t\t\tgetBlockInsertionPoint,\n\t\t\tgetInserterItems,\n\t\t} = select( 'core/editor' );\n\n\t\tif ( rootClientId === undefined && index === undefined ) {\n\t\t\t// Unless explicitly provided, the default insertion point provided\n\t\t\t// by the store occurs immediately following the selected block.\n\t\t\t// Otherwise, the default behavior for an undefined index is to\n\t\t\t// append block to the end of the rootClientId context.\n\t\t\tconst insertionPoint = getBlockInsertionPoint();\n\t\t\t( { rootClientId, index } = insertionPoint );\n\t\t}\n\n\t\treturn {\n\t\t\ttitle: getEditedPostAttribute( 'title' ),\n\t\t\thasItems: getInserterItems( rootClientId ).length > 0,\n\t\t\trootClientId,\n\t\t\tindex,\n\t\t};\n\t} ),\n\tifCondition( ( { hasItems } ) => hasItems ),\n] )( Inserter );\n"]}