{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/components/rich-text/index.native.js"],"names":["RCTAztecView","View","forEach","merge","Component","RawHTML","withInstanceId","compose","Toolbar","isEmpty","create","split","toHTMLString","BACKSPACE","children","__","FORMATTING_CONTROLS","icon","title","format","isRichTextValueEmpty","value","length","getFormatValue","formatName","isActive","RichText","arguments","onChange","bind","onEnter","onBackspace","onContentSizeChange","changeFormats","toggleFormat","onActiveFormatsChange","valueToFormat","state","formats","selectedNodeId","htmlText","start","end","onSplit","props","record","html","range","multilineTag","removeNode","unwrapNode","removeAttribute","filterString","before","after","lastEventCount","undefined","text","removeRootTagsProduceByAztec","forceUpdate","newFormats","reduce","accFormats","activeFormat","setState","openingTagRegexp","RegExp","tagName","closingTagRegexp","replace","event","currentTimer","clearTimeout","nativeEvent","eventCount","contentWithoutRootTag","lastContent","setTimeout","content","contentSize","contentHeight","height","aztecHeight","splitContent","selectionStart","selectionEnd","onMerge","onRemove","keyCode","isReverse","empty","formatToValue","Array","isArray","toHTML","nextProps","_editor","applyFormat","args","node","newStateFormats","formatValue","isFormatActive","removeFormat","style","formattingControls","toolbarControls","filter","control","indexOf","map","onClick","flex","ref","defaultProps","RichTextContainer","Content","Tag"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport RCTAztecView from 'react-native-aztec';\nimport { View } from 'react-native';\nimport {\n\tforEach,\n\tmerge,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component, RawHTML } from '@wordpress/element';\nimport { withInstanceId, compose } from '@wordpress/compose';\nimport { Toolbar } from '@wordpress/components';\nimport {\n\tisEmpty,\n\tcreate,\n\tsplit,\n\ttoHTMLString,\n} from '@wordpress/rich-text';\nimport { BACKSPACE } from '@wordpress/keycodes';\nimport { children } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\n\nconst FORMATTING_CONTROLS = [\n\t{\n\t\ticon: 'editor-bold',\n\t\ttitle: __( 'Bold' ),\n\t\tformat: 'bold',\n\t},\n\t{\n\t\ticon: 'editor-italic',\n\t\ttitle: __( 'Italic' ),\n\t\tformat: 'italic',\n\t},\n\t{\n\t\ticon: 'admin-links',\n\t\ttitle: __( 'Link' ),\n\t\tformat: 'link',\n\t},\n\t{\n\t\ticon: 'editor-strikethrough',\n\t\ttitle: __( 'Strikethrough' ),\n\t\tformat: 'strikethrough',\n\t},\n];\n\nconst isRichTextValueEmpty = ( value ) => {\n\treturn ! value || ! value.length;\n};\n\nexport function getFormatValue( formatName ) {\n\tif ( 'link' === formatName ) {\n\t\t//TODO: Implement link command\n\t}\n\treturn { isActive: true };\n}\n\nexport class RichText extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\t\tthis.onChange = this.onChange.bind( this );\n\t\tthis.onEnter = this.onEnter.bind( this );\n\t\tthis.onBackspace = this.onBackspace.bind( this );\n\t\tthis.onContentSizeChange = this.onContentSizeChange.bind( this );\n\t\tthis.changeFormats = this.changeFormats.bind( this );\n\t\tthis.toggleFormat = this.toggleFormat.bind( this );\n\t\tthis.onActiveFormatsChange = this.onActiveFormatsChange.bind( this );\n\t\tthis.isEmpty = this.isEmpty.bind( this );\n\t\tthis.valueToFormat = this.valueToFormat.bind( this );\n\t\tthis.state = {\n\t\t\tformats: {},\n\t\t\tselectedNodeId: 0,\n\t\t};\n\t}\n\n\t/*\n\t * Splits the content at the location of the selection.\n\t *\n\t * Replaces the content of the editor inside this element with the contents\n\t * before the selection. Sends the elements after the selection to the `onSplit`\n\t * handler.\n\t *\n\t */\n\tsplitContent( htmlText, start, end ) {\n\t\tconst { onSplit } = this.props;\n\n\t\tif ( ! onSplit ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst record = create( {\n\t\t\thtml: htmlText,\n\t\t\trange: null,\n\t\t\tmultilineTag: false,\n\t\t\tremoveNode: null,\n\t\t\tunwrapNode: null,\n\t\t\tremoveAttribute: null,\n\t\t\tfilterString: null,\n\t\t} );\n\n\t\t// TODO : Fix the index position in AztecNative for Android\n\t\tlet [ before, after ] = split( { start, end, ...record } );\n\n\t\t// In case split occurs at the trailing or leading edge of the field,\n\t\t// assume that the before/after values respectively reflect the current\n\t\t// value. This also provides an opportunity for the parent component to\n\t\t// determine whether the before/after value has changed using a trivial\n\t\t//  strict equality operation.\n\t\tif ( isEmpty( after ) ) {\n\t\t\tbefore = record;\n\t\t} else if ( isEmpty( before ) ) {\n\t\t\tafter = record;\n\t\t}\n\n\t\tif ( before ) {\n\t\t\tbefore = this.valueToFormat( before );\n\t\t}\n\n\t\tif ( after ) {\n\t\t\tafter = this.valueToFormat( after );\n\t\t}\n\n\t\t// The onSplit event can cause a content update event for this block.  Such event should\n\t\t// definitely be processed by our native components, since they have no knowledge of\n\t\t// how the split works.  Setting lastEventCount to undefined forces the native component to\n\t\t// always update when provided with new content.\n\t\tthis.lastEventCount = undefined;\n\n\t\tonSplit( before, after );\n\t}\n\n\tvalueToFormat( { formats, text } ) {\n\t\tconst value = toHTMLString( {\n\t\t\tvalue: { formats, text },\n\t\t\tmultilineTag: this.multilineTag,\n\t\t} );\n\t\t// remove the outer root tags\n\t\treturn this.removeRootTagsProduceByAztec( value );\n\t}\n\n\tonActiveFormatsChange( formats ) {\n\t\t// force re-render the component skipping shouldComponentUpdate() See: https://reactjs.org/docs/react-component.html#forceupdate\n\t\t// This is needed because our shouldComponentUpdate impl. doesn't take in consideration props yet.\n\t\tthis.forceUpdate();\n\t\tconst newFormats = formats.reduce( ( accFormats, activeFormat ) => {\n\t\t\taccFormats[ activeFormat ] = getFormatValue( activeFormat );\n\t\t\treturn accFormats;\n\t\t}, {} );\n\n\t\tthis.setState( {\n\t\t\tformats: merge( {}, newFormats ),\n\t\t\tselectedNodeId: this.state.selectedNodeId + 1,\n\t\t} );\n\t}\n\n\t/*\n\t * Cleans up any root tags produced by aztec.\n\t * TODO: This should be removed on a later version when aztec doesn't return the top tag of the text being edited\n\t */\n\n\tremoveRootTagsProduceByAztec( html ) {\n\t\tconst openingTagRegexp = RegExp( '^<' + this.props.tagName + '>', 'gim' );\n\t\tconst closingTagRegexp = RegExp( '</' + this.props.tagName + '>$', 'gim' );\n\t\treturn html.replace( openingTagRegexp, '' ).replace( closingTagRegexp, '' );\n\t}\n\n\t/**\n\t * Handles any case where the content of the AztecRN instance has changed.\n\t */\n\n\tonChange( event ) {\n\t\t// If we had a timer set to propagate a change, let's cancel it, because the user meanwhile typed something extra\n\t\tif ( !! this.currentTimer ) {\n\t\t\tclearTimeout( this.currentTimer );\n\t\t}\n\t\tthis.lastEventCount = event.nativeEvent.eventCount;\n\t\tconst contentWithoutRootTag = this.removeRootTagsProduceByAztec( event.nativeEvent.text );\n\t\tthis.lastContent = contentWithoutRootTag;\n\t\t// Set a time to call the onChange prop if nothing changes in the next second\n\t\tthis.currentTimer = setTimeout( function() {\n\t\t\tthis.props.onChange( {\n\t\t\t\tcontent: this.lastContent,\n\t\t\t} );\n\t\t}.bind( this ), 1000 );\n\t}\n\n\t/**\n\t * Handles any case where the content of the AztecRN instance has changed in size\n\t */\n\n\tonContentSizeChange( contentSize ) {\n\t\tconst contentHeight = contentSize.height;\n\t\tthis.forceUpdate(); // force re-render the component skipping shouldComponentUpdate() See: https://reactjs.org/docs/react-component.html#forceupdate\n\t\tthis.props.onContentSizeChange( {\n\t\t\taztecHeight: contentHeight,\n\t\t}\n\t\t);\n\t}\n\n\t// eslint-disable-next-line no-unused-vars\n\tonEnter( event ) {\n\t\tif ( ! this.props.onSplit ) {\n\t\t\t// TODO: insert the \\n char instead?\n\t\t\treturn;\n\t\t}\n\n\t\tthis.splitContent( event.nativeEvent.text, event.nativeEvent.selectionStart, event.nativeEvent.selectionEnd );\n\t}\n\n\t// eslint-disable-next-line no-unused-vars\n\tonBackspace( event ) {\n\t\tconst { onMerge, onRemove } = this.props;\n\t\tif ( ! onMerge && ! onRemove ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyCode = BACKSPACE; // TODO : should we differentiate BACKSPACE and DELETE?\n\t\tconst isReverse = keyCode === BACKSPACE;\n\n\t\tconst empty = this.isEmpty();\n\n\t\tif ( onMerge ) {\n\t\t\t// The onMerge event can cause a content update event for this block.  Such event should\n\t\t\t// definitely be processed by our native components, since they have no knowledge of\n\t\t\t// how the split works.  Setting lastEventCount to undefined forces the native component to\n\t\t\t// always update when provided with new content.\n\t\t\tthis.lastEventCount = undefined;\n\n\t\t\tonMerge( ! isReverse );\n\t\t}\n\n\t\t// Only handle remove on Backspace. This serves dual-purpose of being\n\t\t// an intentional user interaction distinguishing between Backspace and\n\t\t// Delete to remove the empty field, but also to avoid merge & remove\n\t\t// causing destruction of two fields (merge, then removed merged).\n\t\tif ( onRemove && empty && isReverse ) {\n\t\t\tonRemove( ! isReverse );\n\t\t}\n\t}\n\n\tisEmpty() {\n\t\treturn isEmpty( this.formatToValue( this.props.value ) );\n\t}\n\n\tformatToValue( value ) {\n\t\t// Handle deprecated `children` and `node` sources.\n\t\tif ( Array.isArray( value ) ) {\n\t\t\treturn create( {\n\t\t\t\thtml: children.toHTML( value ),\n\t\t\t\tmultilineTag: this.multilineTag,\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.props.format === 'string' ) {\n\t\t\treturn create( {\n\t\t\t\thtml: value,\n\t\t\t\tmultilineTag: this.multilineTag,\n\t\t\t} );\n\t\t}\n\n\t\t// Guard for blocks passing `null` in onSplit callbacks. May be removed\n\t\t// if onSplit is revised to not pass a `null` value.\n\t\tif ( value === null ) {\n\t\t\treturn create();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tshouldComponentUpdate( nextProps ) {\n\t\tif ( nextProps.tagName !== this.props.tagName ) {\n\t\t\tthis.lastEventCount = undefined;\n\t\t\tthis.lastContent = undefined;\n\t\t\treturn true;\n\t\t}\n\t\t// The check below allows us to avoid updating the content right after an `onChange` call\n\t\t// first time the component is drawn with empty content `lastContent` is undefined\n\t\tif ( nextProps.value &&\n\t\t\tthis.lastContent &&\n\t\t\tthis.lastEventCount ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tisFormatActive( format ) {\n\t\treturn this.state.formats[ format ] && this.state.formats[ format ].isActive;\n\t}\n\n\t// eslint-disable-next-line no-unused-vars\n\tremoveFormat( format ) {\n\t\tthis._editor.applyFormat( format );\n\t}\n\n\t// eslint-disable-next-line no-unused-vars\n\tapplyFormat( format, args, node ) {\n\t\tthis._editor.applyFormat( format );\n\t}\n\n\tchangeFormats( formats ) {\n\t\tconst newStateFormats = {};\n\t\tforEach( formats, ( formatValue, format ) => {\n\t\t\tnewStateFormats[ format ] = getFormatValue( format );\n\t\t\tconst isActive = this.isFormatActive( format );\n\t\t\tif ( isActive && ! formatValue ) {\n\t\t\t\tthis.removeFormat( format );\n\t\t\t} else if ( ! isActive && formatValue ) {\n\t\t\t\tthis.applyFormat( format );\n\t\t\t}\n\t\t} );\n\n\t\tthis.setState( ( state ) => ( {\n\t\t\tformats: merge( {}, state.formats, newStateFormats ),\n\t\t} ) );\n\t}\n\n\ttoggleFormat( format ) {\n\t\treturn () => this.changeFormats( {\n\t\t\t[ format ]: ! this.state.formats[ format ],\n\t\t} );\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\ttagName,\n\t\t\tstyle,\n\t\t\tformattingControls,\n\t\t\tvalue,\n\t\t} = this.props;\n\n\t\tconst toolbarControls = FORMATTING_CONTROLS\n\t\t\t.filter( ( control ) => formattingControls.indexOf( control.format ) !== -1 )\n\t\t\t.map( ( control ) => ( {\n\t\t\t\t...control,\n\t\t\t\tonClick: this.toggleFormat( control.format ),\n\t\t\t\tisActive: this.isFormatActive( control.format ),\n\t\t\t} ) );\n\n\t\t// Save back to HTML from React tree\n\t\tconst html = '<' + tagName + '>' + value + '</' + tagName + '>';\n\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<View style={ { flex: 1 } }>\n\t\t\t\t\t<Toolbar controls={ toolbarControls } />\n\t\t\t\t</View>\n\t\t\t\t<RCTAztecView\n\t\t\t\t\tref={ ( ref ) => {\n\t\t\t\t\t\tthis._editor = ref;\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttext={ { text: html, eventCount: this.lastEventCount } }\n\t\t\t\t\tonChange={ this.onChange }\n\t\t\t\t\tonEnter={ this.onEnter }\n\t\t\t\t\tonBackspace={ this.onBackspace }\n\t\t\t\t\tonContentSizeChange={ this.onContentSizeChange }\n\t\t\t\t\tonActiveFormatsChange={ this.onActiveFormatsChange }\n\t\t\t\t\tcolor={ 'black' }\n\t\t\t\t\tmaxImagesWidth={ 200 }\n\t\t\t\t\tstyle={ style }\n\t\t\t\t/>\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nRichText.defaultProps = {\n\tformattingControls: FORMATTING_CONTROLS.map( ( { format } ) => format ),\n\tformat: 'string',\n};\n\nconst RichTextContainer = compose( [\n\twithInstanceId,\n] )( RichText );\n\nRichTextContainer.Content = ( { value, format, tagName: Tag, ...props } ) => {\n\tlet content;\n\tswitch ( format ) {\n\t\tcase 'string':\n\t\t\tcontent = <RawHTML>{ value }</RawHTML>;\n\t\t\tbreak;\n\t}\n\n\tif ( Tag ) {\n\t\treturn <Tag { ...props }>{ content }</Tag>;\n\t}\n\n\treturn content;\n};\n\nRichTextContainer.isEmpty = isRichTextValueEmpty;\n\nRichTextContainer.Content.defaultProps = {\n\tformat: 'string',\n};\n\nexport default RichTextContainer;\n"]}