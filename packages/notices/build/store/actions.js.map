{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/notices/src/store/actions.js"],"names":["createNotice","status","content","options","isDismissible","context","DEFAULT_CONTEXT","id","actions","type","message","notice","createSuccessNotice","createInfoNotice","createErrorNotice","createWarningNotice","removeNotice"],"mappings":";;;;;;;;;;;;AAGA;;AAKA;;;;wBAoBiBA,Y;;AAlBjB;;;;;;;;;;;;;;;;;;AAkBO,SAAUA,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAwBC,UAAAA,MAAxB,2DAAiC,MAAjC;AAAyCC,UAAAA,OAAzC;AAAkDC,UAAAA,OAAlD,2DAA4D,EAA5D;AAAA,kCAMFA,OANE,CAELC,aAFK,EAELA,aAFK,sCAEW,IAFX,6CAMFD,OANE,CAGLE,OAHK,EAGLA,OAHK,iCAGKC,0BAHL,mCAMFH,OANE,CAILI,EAJK,EAILA,EAJK,4BAIA,sBAAUF,OAAV,CAJA,mCAMFF,OANE,CAKLK,OALK,EAKLA,OALK,iCAKK,EALL;AAAA;AAQN,iBAAM;AAAEC,YAAAA,IAAI,EAAE,OAAR;AAAiBC,YAAAA,OAAO,EAAER;AAA1B,WAAN;;AARM;AAAA;AAUN,iBAAM;AACLO,YAAAA,IAAI,EAAE,eADD;AAELJ,YAAAA,OAAO,EAAPA,OAFK;AAGLM,YAAAA,MAAM,EAAE;AACPJ,cAAAA,EAAE,EAAFA,EADO;AAEPN,cAAAA,MAAM,EAANA,MAFO;AAGPC,cAAAA,OAAO,EAAPA,OAHO;AAIPE,cAAAA,aAAa,EAAbA,aAJO;AAKPI,cAAAA,OAAO,EAAPA;AALO;AAHH,WAAN;;AAVM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBP;;;;;;;;;;;;;AAWO,SAASI,mBAAT,CAA8BV,OAA9B,EAAuCC,OAAvC,EAAiD;AACvD,SAAOH,YAAY,CAAE,SAAF,EAAaE,OAAb,EAAsBC,OAAtB,CAAnB;AACA;AAED;;;;;;;;;;;;;AAWO,SAASU,gBAAT,CAA2BX,OAA3B,EAAoCC,OAApC,EAA8C;AACpD,SAAOH,YAAY,CAAE,MAAF,EAAUE,OAAV,EAAmBC,OAAnB,CAAnB;AACA;AAED;;;;;;;;;;;;;AAWO,SAASW,iBAAT,CAA4BZ,OAA5B,EAAqCC,OAArC,EAA+C;AACrD,SAAOH,YAAY,CAAE,OAAF,EAAWE,OAAX,EAAoBC,OAApB,CAAnB;AACA;AAED;;;;;;;;;;;;;AAWO,SAASY,mBAAT,CAA8Bb,OAA9B,EAAuCC,OAAvC,EAAiD;AACvD,SAAOH,YAAY,CAAE,SAAF,EAAaE,OAAb,EAAsBC,OAAtB,CAAnB;AACA;AAED;;;;;;;;;;;AASO,SAASa,YAAT,CAAuBT,EAAvB,EAAuD;AAAA,MAA5BF,OAA4B,uEAAlBC,0BAAkB;AAC7D,SAAO;AACNG,IAAAA,IAAI,EAAE,eADA;AAENF,IAAAA,EAAE,EAAFA,EAFM;AAGNF,IAAAA,OAAO,EAAPA;AAHM,GAAP;AAKA","sourcesContent":["/**\n * External dependencies\n */\nimport { uniqueId } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { DEFAULT_CONTEXT } from './constants';\n\n/**\n * Yields action objects used in signalling that a notice is to be created.\n *\n * @param {?string}                status                Notice status.\n *                                                       Defaults to `info`.\n * @param {string}                 content               Notice message.\n * @param {?Object}                options               Notice options.\n * @param {?string}                options.context       Context under which to\n *                                                       group notice.\n * @param {?string}                options.id            Identifier for notice.\n *                                                       Automatically assigned\n *                                                       if not specified.\n * @param {?boolean}               options.isDismissible Whether the notice can\n *                                                       be dismissed by user.\n *                                                       Defaults to `true`.\n * @param {?Array<WPNoticeAction>} options.actions       User actions to be\n *                                                       presented with notice.\n */\nexport function* createNotice( status = 'info', content, options = {} ) {\n\tconst {\n\t\tisDismissible = true,\n\t\tcontext = DEFAULT_CONTEXT,\n\t\tid = uniqueId( context ),\n\t\tactions = [],\n\t} = options;\n\n\tyield { type: 'SPEAK', message: content };\n\n\tyield {\n\t\ttype: 'CREATE_NOTICE',\n\t\tcontext,\n\t\tnotice: {\n\t\t\tid,\n\t\t\tstatus,\n\t\t\tcontent,\n\t\t\tisDismissible,\n\t\t\tactions,\n\t\t},\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a success notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string}  content Notice message.\n * @param {?Object} options Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createSuccessNotice( content, options ) {\n\treturn createNotice( 'success', content, options );\n}\n\n/**\n * Returns an action object used in signalling that an info notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string}  content Notice message.\n * @param {?Object} options Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createInfoNotice( content, options ) {\n\treturn createNotice( 'info', content, options );\n}\n\n/**\n * Returns an action object used in signalling that an error notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string}  content Notice message.\n * @param {?Object} options Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createErrorNotice( content, options ) {\n\treturn createNotice( 'error', content, options );\n}\n\n/**\n * Returns an action object used in signalling that a warning notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string}  content Notice message.\n * @param {?Object} options Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createWarningNotice( content, options ) {\n\treturn createNotice( 'warning', content, options );\n}\n\n/**\n * Returns an action object used in signalling that a notice is to be removed.\n *\n * @param {string}  id      Notice unique identifier.\n * @param {?string} context Optional context (grouping) in which the notice is\n *                          intended to appear. Defaults to default context.\n *\n * @return {Object} Action object.\n */\nexport function removeNotice( id, context = DEFAULT_CONTEXT ) {\n\treturn {\n\t\ttype: 'REMOVE_NOTICE',\n\t\tid,\n\t\tcontext,\n\t};\n}\n"]}