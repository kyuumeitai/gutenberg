{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/rich-text/src/to-tree.js"],"names":["fromFormat","type","attributes","object","formatType","match","tagName","elementAttributes","name","key","toTree","value","multilineTag","multilineWrapperTags","createEmpty","append","getLastChild","getParent","isText","getText","remove","appendText","onStartIndex","onEndIndex","isEditableTree","formats","text","start","end","formatPlaceholder","formatsLength","length","tree","multilineFormat","lastSeparatorFormats","lastCharacterFormats","lastCharacter","setFormatPlaceholder","pointer","index","parent","format","undefined","ZERO_WIDTH_NO_BREAK_SPACE","i","character","charAt","characterFormats","LINE_SEPARATOR","reduce","accumulator","indexOf","push","node","forEach","formatIndex","newNode","OBJECT_REPLACEMENT_CHARACTER"],"mappings":"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","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { getFormatType } from './get-format-type';\nimport {\n\tLINE_SEPARATOR,\n\tOBJECT_REPLACEMENT_CHARACTER,\n\tZERO_WIDTH_NO_BREAK_SPACE,\n} from './special-characters';\n\nfunction fromFormat( { type, attributes, object } ) {\n\tconst formatType = getFormatType( type );\n\n\tif ( ! formatType ) {\n\t\treturn { type, attributes, object };\n\t}\n\n\tif ( ! attributes ) {\n\t\treturn {\n\t\t\ttype: formatType.match.tagName,\n\t\t\tobject: formatType.object,\n\t\t};\n\t}\n\n\tconst elementAttributes = {};\n\n\tfor ( const name in attributes ) {\n\t\tconst key = formatType.attributes[ name ];\n\n\t\tif ( key ) {\n\t\t\telementAttributes[ key ] = attributes[ name ];\n\t\t} else {\n\t\t\telementAttributes[ name ] = attributes[ name ];\n\t\t}\n\t}\n\n\treturn {\n\t\ttype: formatType.match.tagName,\n\t\tobject: formatType.object,\n\t\tattributes: elementAttributes,\n\t};\n}\n\nexport function toTree( {\n\tvalue,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\tcreateEmpty,\n\tappend,\n\tgetLastChild,\n\tgetParent,\n\tisText,\n\tgetText,\n\tremove,\n\tappendText,\n\tonStartIndex,\n\tonEndIndex,\n\tisEditableTree,\n} ) {\n\tconst { formats, text, start, end, formatPlaceholder } = value;\n\tconst formatsLength = formats.length + 1;\n\tconst tree = createEmpty();\n\tconst multilineFormat = { type: multilineTag };\n\n\tlet lastSeparatorFormats;\n\tlet lastCharacterFormats;\n\tlet lastCharacter;\n\n\t// If we're building a multiline tree, start off with a multiline element.\n\tif ( multilineTag ) {\n\t\tappend( append( tree, { type: multilineTag } ), '' );\n\t\tlastCharacterFormats = lastSeparatorFormats = [ multilineFormat ];\n\t} else {\n\t\tappend( tree, '' );\n\t}\n\n\tfunction setFormatPlaceholder( pointer, index ) {\n\t\tif ( isEditableTree && formatPlaceholder && formatPlaceholder.index === index ) {\n\t\t\tconst parent = getParent( pointer );\n\n\t\t\tif ( formatPlaceholder.format === undefined ) {\n\t\t\t\tpointer = getParent( parent );\n\t\t\t} else {\n\t\t\t\tpointer = append( parent, fromFormat( formatPlaceholder.format ) );\n\t\t\t}\n\n\t\t\tpointer = append( pointer, ZERO_WIDTH_NO_BREAK_SPACE );\n\t\t}\n\n\t\treturn pointer;\n\t}\n\n\tfor ( let i = 0; i < formatsLength; i++ ) {\n\t\tconst character = text.charAt( i );\n\t\tlet characterFormats = formats[ i ];\n\n\t\t// Set multiline tags in queue for building the tree.\n\t\tif ( multilineTag ) {\n\t\t\tif ( character === LINE_SEPARATOR ) {\n\t\t\t\tcharacterFormats = lastSeparatorFormats = ( characterFormats || [] ).reduce( ( accumulator, format ) => {\n\t\t\t\t\tif ( character === LINE_SEPARATOR && multilineWrapperTags.indexOf( format.type ) !== -1 ) {\n\t\t\t\t\t\taccumulator.push( format );\n\t\t\t\t\t\taccumulator.push( multilineFormat );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn accumulator;\n\t\t\t\t}, [ multilineFormat ] );\n\t\t\t} else {\n\t\t\t\tcharacterFormats = [ ...lastSeparatorFormats, ...( characterFormats || [] ) ];\n\t\t\t}\n\t\t}\n\n\t\tlet pointer = getLastChild( tree );\n\n\t\t// Set selection for the start of line.\n\t\tif ( lastCharacter === LINE_SEPARATOR ) {\n\t\t\tlet node = pointer;\n\n\t\t\twhile ( ! isText( node ) ) {\n\t\t\t\tnode = getLastChild( node );\n\t\t\t}\n\n\t\t\tif ( onStartIndex && start === i ) {\n\t\t\t\tonStartIndex( tree, node );\n\t\t\t}\n\n\t\t\tif ( onEndIndex && end === i ) {\n\t\t\t\tonEndIndex( tree, node );\n\t\t\t}\n\t\t}\n\n\t\tif ( characterFormats ) {\n\t\t\tcharacterFormats.forEach( ( format, formatIndex ) => {\n\t\t\t\tif (\n\t\t\t\t\tpointer &&\n\t\t\t\t\tlastCharacterFormats &&\n\t\t\t\t\tformat === lastCharacterFormats[ formatIndex ] &&\n\t\t\t\t\t// Do not reuse the last element if the character is a\n\t\t\t\t\t// line separator.\n\t\t\t\t\t( character !== LINE_SEPARATOR ||\n\t\t\t\t\t\tcharacterFormats.length - 1 !== formatIndex )\n\t\t\t\t) {\n\t\t\t\t\tpointer = getLastChild( pointer );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { type, attributes, object } = format;\n\t\t\t\tconst parent = getParent( pointer );\n\t\t\t\tconst newNode = append( parent, fromFormat( { type, attributes, object } ) );\n\n\t\t\t\tif ( isText( pointer ) && getText( pointer ).length === 0 ) {\n\t\t\t\t\tremove( pointer );\n\t\t\t\t}\n\n\t\t\t\tpointer = append( object ? parent : newNode, '' );\n\t\t\t} );\n\t\t}\n\n\t\t// No need for further processing if the character is a line separator.\n\t\tif ( character === LINE_SEPARATOR ) {\n\t\t\tlastCharacterFormats = characterFormats;\n\t\t\tlastCharacter = character;\n\t\t\tcontinue;\n\t\t}\n\n\t\tpointer = setFormatPlaceholder( pointer, 0 );\n\n\t\t// If there is selection at 0, handle it before characters are inserted.\n\t\tif ( i === 0 ) {\n\t\t\tif ( onStartIndex && start === 0 ) {\n\t\t\t\tonStartIndex( tree, pointer );\n\t\t\t}\n\n\t\t\tif ( onEndIndex && end === 0 ) {\n\t\t\t\tonEndIndex( tree, pointer );\n\t\t\t}\n\t\t}\n\n\t\tif ( character !== OBJECT_REPLACEMENT_CHARACTER ) {\n\t\t\tif ( character === '\\n' ) {\n\t\t\t\tpointer = append( getParent( pointer ), { type: 'br', object: true } );\n\t\t\t\t// Ensure pointer is text node.\n\t\t\t\tpointer = append( getParent( pointer ), '' );\n\t\t\t} else if ( ! isText( pointer ) ) {\n\t\t\t\tpointer = append( getParent( pointer ), character );\n\t\t\t} else {\n\t\t\t\tappendText( pointer, character );\n\t\t\t}\n\t\t}\n\n\t\tpointer = setFormatPlaceholder( pointer, i + 1 );\n\n\t\tif ( onStartIndex && start === i + 1 ) {\n\t\t\tonStartIndex( tree, pointer );\n\t\t}\n\n\t\tif ( onEndIndex && end === i + 1 ) {\n\t\t\tonEndIndex( tree, pointer );\n\t\t}\n\n\t\tlastCharacterFormats = characterFormats;\n\t\tlastCharacter = character;\n\t}\n\n\treturn tree;\n}\n"]}