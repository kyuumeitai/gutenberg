{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/blocks/src/store/selectors.js"],"names":["createSelector","filter","get","includes","map","some","getBlockTypes","state","Object","values","blockTypes","getBlockType","name","getCategories","categories","getDefaultBlockName","defaultBlockName","getFreeformFallbackBlockName","freeformFallbackBlockName","getUnregisteredFallbackBlockName","unregisteredFallbackBlockName","getChildBlockNames","blockName","blockType","parent","getBlockSupport","nameOrType","feature","defaultSupports","hasBlockSupport","hasChildBlocks","length","hasChildBlocksWithInserterSupport","childBlockName"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { filter, get, includes, map, some } from 'lodash';\n\n/**\n * Returns all the available block types.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Block Types.\n */\nexport const getBlockTypes = createSelector(\n\t( state ) => Object.values( state.blockTypes ),\n\t( state ) => [\n\t\tstate.blockTypes,\n\t]\n);\n\n/**\n * Returns a block type by name.\n *\n * @param {Object} state Data state.\n * @param {string} name Block type name.\n *\n * @return {Object?} Block Type.\n */\nexport function getBlockType( state, name ) {\n\treturn state.blockTypes[ name ];\n}\n\n/**\n * Returns all the available categories.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Categories list.\n */\nexport function getCategories( state ) {\n\treturn state.categories;\n}\n\n/**\n * Returns the name of the default block name.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Default block name.\n */\nexport function getDefaultBlockName( state ) {\n\treturn state.defaultBlockName;\n}\n\n/**\n * Returns the name of the block for handling non-block content.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Name of the block for handling non-block content.\n */\nexport function getFreeformFallbackBlockName( state ) {\n\treturn state.freeformFallbackBlockName;\n}\n\n/**\n * Returns the name of the block for handling unregistered blocks.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Name of the block for handling unregistered blocks.\n */\nexport function getUnregisteredFallbackBlockName( state ) {\n\treturn state.unregisteredFallbackBlockName;\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = createSelector(\n\t( state, blockName ) => {\n\t\treturn map(\n\t\t\tfilter( state.blockTypes, ( blockType ) => {\n\t\t\t\treturn includes( blockType.parent, blockName );\n\t\t\t} ),\n\t\t\t( { name } ) => name\n\t\t);\n\t},\n\t( state ) => [\n\t\tstate.blockTypes,\n\t]\n);\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param  {Object}          state           Data state.\n * @param  {(string|Object)} nameOrType      Block name or type object\n * @param  {string}          feature         Feature to retrieve\n * @param  {*}               defaultSupports Default value to return if not\n *                                           explicitly defined\n *\n * @return {?*} Block support value\n */\nexport const getBlockSupport = ( state, nameOrType, feature, defaultSupports ) => {\n\tconst blockType = 'string' === typeof nameOrType ?\n\t\tgetBlockType( state, nameOrType ) :\n\t\tnameOrType;\n\n\treturn get( blockType, [\n\t\t'supports',\n\t\tfeature,\n\t], defaultSupports );\n};\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param  {Object}         state           Data state.\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( state, nameOrType, feature, defaultSupports ) {\n\treturn !! getBlockSupport( state, nameOrType, feature, defaultSupports );\n}\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( state, blockName ) => {\n\treturn getChildBlockNames( state, blockName ).length > 0;\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( state, blockName ) => {\n\treturn some( getChildBlockNames( state, blockName ), ( childBlockName ) => {\n\t\treturn hasBlockSupport( state, childBlockName, 'inserter', true );\n\t} );\n};\n"]}