{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/block-library/src/paragraph/edit.native.js"],"names":["minHeight","name","ParagraphEdit","arguments","splitBlock","bind","before","after","props","attributes","insertBlocksAfter","setAttributes","blocks","newBlock","content","push","length","style","mergeBlocks","placeholder","Math","max","aztecHeight","event","newParaBlock","Component"],"mappings":";;;;;;;;;AASA;;;;;;;;;;;;;;;;AANA;;AAKA;;AAEA;;AACA;;AAXA;;;;AAKA;;;AAQA,IAAMA,SAAS,GAAG,EAAlB;AAEA,IAAMC,IAAI,GAAG,gBAAb;;IAEMC,a;;;;;AACL,2BAAc;AAAA;;AAAA;AACb,oHAAUC,SAAV;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,mFAAlB;AAFa;AAGb;AAED;;;;;;;;;;;;;;;;;+BAaYC,M,EAAQC,K,EAAmB;AAAA,wBAKlC,KAAKC,KAL6B;AAAA,UAErCC,UAFqC,eAErCA,UAFqC;AAAA,UAGrCC,iBAHqC,eAGrCA,iBAHqC;AAAA,UAIrCC,aAJqC,eAIrCA,aAJqC;;AAAA,wCAATC,MAAS;AAATA,QAAAA,MAAS;AAAA;;AAOtC,UAAKL,KAAK,KAAK,IAAf,EAAsB;AACrB;AACA;AACA,YAAMM,QAAQ,GAAG,yBAAaZ,IAAb,EAAmB;AAAEa,UAAAA,OAAO,EAAEP;AAAX,SAAnB,CAAjB;AACAK,QAAAA,MAAM,CAACG,IAAP,CAAaF,QAAb;AACA;;AAED,UAAKD,MAAM,CAACI,MAAP,IAAiBN,iBAAtB,EAA0C;AACzCA,QAAAA,iBAAiB,CAAEE,MAAF,CAAjB;AACA;;AAhBqC,UAkB9BE,OAlB8B,GAkBlBL,UAlBkB,CAkB9BK,OAlB8B;;AAmBtC,UAAKR,MAAM,KAAK,IAAhB,EAAuB,CACtB;AACA;AACA,OAHD,MAGO,IAAKQ,OAAO,KAAKR,MAAjB,EAA0B;AAChC;AACA;AACA;AACAK,QAAAA,aAAa,CAAE;AAAEG,UAAAA,OAAO,EAAER;AAAX,SAAF,CAAb;AACA;AACD;;;6BAEQ;AAAA;;AAAA,yBAMJ,KAAKE,KAND;AAAA,UAEPC,UAFO,gBAEPA,UAFO;AAAA,UAGPE,aAHO,gBAGPA,aAHO;AAAA,UAIPM,KAJO,gBAIPA,KAJO;AAAA,UAKPC,WALO,gBAKPA,WALO;AAAA,UASPC,WATO,GAWJV,UAXI,CASPU,WATO;AAAA,UAUPL,OAVO,GAWJL,UAXI,CAUPK,OAVO;AAaR,aACC,4BAAC,iBAAD,QACC,4BAAC,gBAAD;AACC,QAAA,OAAO,EAAC,GADT;AAEC,QAAA,KAAK,EAAGA,OAFT;AAGC,QAAA,KAAK,kCACDG,KADC;AAEJjB,UAAAA,SAAS,EAAEoB,IAAI,CAACC,GAAL,CAAUrB,SAAV,EAAqB,OAAOS,UAAU,CAACa,WAAlB,KAAkC,WAAlC,GAAgD,CAAhD,GAAoDb,UAAU,CAACa,WAApF;AAFP,UAHN;AAOC,QAAA,QAAQ,EAAG,kBAAEC,KAAF,EAAa;AACvB;AACA,cAAMC,YAAY,GAAG,mBAAO,6BAA6BD,KAAK,CAACT,OAAnC,GAA6C,4BAApD,EAAoF,CAApF,CAArB;AACAH,UAAAA,aAAa,iCACT,MAAI,CAACH,KAAL,CAAWC,UADF;AAEZK,YAAAA,OAAO,EAAEU,YAAY,CAACf,UAAb,CAAwBK;AAFrB,aAAb;AAIA,SAdF;AAgBC,QAAA,OAAO,EAAG,KAAKV,UAhBhB;AAiBC,QAAA,OAAO,EAAGc,WAjBX;AAkBC,QAAA,mBAAmB,EAAG,6BAAEK,KAAF,EAAa;AAClCZ,UAAAA,aAAa,iCACT,MAAI,CAACH,KAAL,CAAWC,UADF;AAEZa,YAAAA,WAAW,EAAEC,KAAK,CAACD;AAFP,aAAb;AAIA,SAvBF;AAyBC,QAAA,WAAW,EAAGH,WAAW,IAAI,cAAI,mCAAJ;AAzB9B,QADD,CADD;AA+BA;;;EA7F0BM,kB;;eAgGbvB,a","sourcesContent":["/**\n * External dependencies\n */\nimport { View } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Component } from '@wordpress/element';\nimport { parse, createBlock } from '@wordpress/blocks';\nimport { RichText } from '@wordpress/editor';\n\nconst minHeight = 50;\n\nconst name = 'core/paragraph';\n\nclass ParagraphEdit extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\t\tthis.splitBlock = this.splitBlock.bind( this );\n\t}\n\n\t/**\n\t * Split handler for RichText value, namely when content is pasted or the\n\t * user presses the Enter key.\n\t *\n\t * @param {?Array}     before Optional before value, to be used as content\n\t *                            in place of what exists currently for the\n\t *                            block. If undefined, the block is deleted.\n\t * @param {?Array}     after  Optional after value, to be appended in a new\n\t *                            paragraph block to the set of blocks passed\n\t *                            as spread.\n\t * @param {...WPBlock} blocks Optional blocks inserted between the before\n\t *                            and after value blocks.\n\t */\n\tsplitBlock( before, after, ...blocks ) {\n\t\tconst {\n\t\t\tattributes,\n\t\t\tinsertBlocksAfter,\n\t\t\tsetAttributes,\n\t\t} = this.props;\n\n\t\tif ( after !== null ) {\n\t\t\t// Append \"After\" content as a new paragraph block to the end of\n\t\t\t// any other blocks being inserted after the current paragraph.\n\t\t\tconst newBlock = createBlock( name, { content: after } );\n\t\t\tblocks.push( newBlock );\n\t\t}\n\n\t\tif ( blocks.length && insertBlocksAfter ) {\n\t\t\tinsertBlocksAfter( blocks );\n\t\t}\n\n\t\tconst { content } = attributes;\n\t\tif ( before === null ) {\n\t\t\t// TODO : If before content is omitted, treat as intent to delete block.\n\t\t\t// onReplace( [] );\n\t\t} else if ( content !== before ) {\n\t\t\t// Only update content if it has in-fact changed. In case that user\n\t\t\t// has created a new paragraph at end of an existing one, the value\n\t\t\t// of before will be strictly equal to the current content.\n\t\t\tsetAttributes( { content: before } );\n\t\t}\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tattributes,\n\t\t\tsetAttributes,\n\t\t\tstyle,\n\t\t\tmergeBlocks,\n\t\t} = this.props;\n\n\t\tconst {\n\t\t\tplaceholder,\n\t\t\tcontent,\n\t\t} = attributes;\n\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<RichText\n\t\t\t\t\ttagName=\"p\"\n\t\t\t\t\tvalue={ content }\n\t\t\t\t\tstyle={ {\n\t\t\t\t\t\t...style,\n\t\t\t\t\t\tminHeight: Math.max( minHeight, typeof attributes.aztecHeight === 'undefined' ? 0 : attributes.aztecHeight ),\n\t\t\t\t\t} }\n\t\t\t\t\tonChange={ ( event ) => {\n\t\t\t\t\t\t// Create a React Tree from the new HTML\n\t\t\t\t\t\tconst newParaBlock = parse( '<!-- wp:paragraph --><p>' + event.content + '</p><!-- /wp:paragraph -->' )[ 0 ];\n\t\t\t\t\t\tsetAttributes( {\n\t\t\t\t\t\t\t...this.props.attributes,\n\t\t\t\t\t\t\tcontent: newParaBlock.attributes.content,\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tonSplit={ this.splitBlock }\n\t\t\t\t\tonMerge={ mergeBlocks }\n\t\t\t\t\tonContentSizeChange={ ( event ) => {\n\t\t\t\t\t\tsetAttributes( {\n\t\t\t\t\t\t\t...this.props.attributes,\n\t\t\t\t\t\t\taztecHeight: event.aztecHeight,\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tplaceholder={ placeholder || __( 'Add text or type / to add content' ) }\n\t\t\t\t/>\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nexport default ParagraphEdit;\n"]}