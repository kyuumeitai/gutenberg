{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/components/block-inspector/index.js"],"names":["BlockInspector","selectedBlock","blockType","count","isSelectedBlockUnregistered","name","icon","title","description","styles","clientId","fills","select","getSelectedBlock","getSelectedBlockCount"],"mappings":";;;;;;;;;AAYA;;AATA;;AAKA;;AACA;;AACA;;AACA;;AAMA;;AACA;;AACA;;AACA;;AACA;;AArBA;;;;AAKA;;;;AASA;;;AASA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,OAA2C;AAAA,MAAvCC,aAAuC,QAAvCA,aAAuC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,KAAa,QAAbA,KAAa;;AACjE,MAAKA,KAAK,GAAG,CAAb,EAAiB;AAChB,WAAO;AAAM,MAAA,SAAS,EAAC;AAAhB,OAAyD,cAAI,aAAJ,CAAzD,CAAP;AACA;;AAED,MAAMC,2BAA2B,GAChC,CAAC,CAAEH,aAAH,IAAoBA,aAAa,CAACI,IAAd,KAAuB,6CAD5C;AAGA;;;;;AAIA,MAAK,CAAEJ,aAAF,IAAmBG,2BAAxB,EAAsD;AACrD,WAAO;AAAM,MAAA,SAAS,EAAC;AAAhB,OAAsD,cAAI,oBAAJ,CAAtD,CAAP;AACA;;AAED,SACC,4BAAC,iBAAD,QACC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC,4BAAC,kBAAD;AAAW,IAAA,IAAI,EAAGF,SAAS,CAACI,IAA5B;AAAmC,IAAA,UAAU;AAA7C,IADD,EAEC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC;AAAK,IAAA,SAAS,EAAC;AAAf,KAAsDJ,SAAS,CAACK,KAAhE,CADD,EAEC;AAAK,IAAA,SAAS,EAAC;AAAf,KAA4DL,SAAS,CAACM,WAAtE,CAFD,CAFD,CADD,EAQG,CAAC,CAAEN,SAAS,CAACO,MAAb,IACD,yCACC,4BAAC,qBAAD;AACC,IAAA,KAAK,EAAG,cAAI,QAAJ,CADT;AAEC,IAAA,WAAW,EAAG;AAFf,KAIC,4BAAC,oBAAD;AACC,IAAA,QAAQ,EAAGR,aAAa,CAACS;AAD1B,IAJD,CADD,CATF,EAoBC,yCAAK,4BAAC,0BAAD,CAAmB,IAAnB,OAAL,CApBD,EAqBC,yCACC,4BAAC,kCAAD,CAA2B,IAA3B,QACG,UAAEC,KAAF;AAAA,WAAa,CAAE,qBAASA,KAAT,CAAF,IACd,4BAAC,qBAAD;AACC,MAAA,SAAS,EAAC,kCADX;AAEC,MAAA,KAAK,EAAG,cAAI,UAAJ,CAFT;AAGC,MAAA,WAAW,EAAG;AAHf,OAKGA,KALH,CADC;AAAA,GADH,CADD,CArBD,EAkCC,4BAAC,4BAAD;AAAqB,IAAA,GAAG,EAAC;AAAzB,IAlCD,CADD;AAsCA,CAtDD;;eAwDe,sBACd,UAAEC,MAAF,EAAc;AAAA,gBACuCA,MAAM,CAAE,aAAF,CAD7C;AAAA,MACLC,gBADK,WACLA,gBADK;AAAA,MACaC,qBADb,WACaA,qBADb;;AAEb,MAAMb,aAAa,GAAGY,gBAAgB,EAAtC;AACA,MAAMX,SAAS,GAAGD,aAAa,IAAI,0BAAcA,aAAa,CAACI,IAA5B,CAAnC;AACA,SAAO;AACNJ,IAAAA,aAAa,EAAbA,aADM;AAENC,IAAAA,SAAS,EAATA,SAFM;AAGNC,IAAAA,KAAK,EAAEW,qBAAqB;AAHtB,GAAP;AAKA,CAVa,EAWZd,cAXY,C","sourcesContent":["/**\n * External dependencies\n */\nimport { isEmpty } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { getBlockType, getUnregisteredTypeHandlerName } from '@wordpress/blocks';\nimport { PanelBody } from '@wordpress/components';\nimport { withSelect } from '@wordpress/data';\nimport { Fragment } from '@wordpress/element';\n\n/**\n * Internal Dependencies\n */\nimport SkipToSelectedBlock from '../skip-to-selected-block';\nimport BlockIcon from '../block-icon';\nimport InspectorControls from '../inspector-controls';\nimport InspectorAdvancedControls from '../inspector-advanced-controls';\nimport BlockStyles from '../block-styles';\n\nconst BlockInspector = ( { selectedBlock, blockType, count } ) => {\n\tif ( count > 1 ) {\n\t\treturn <span className=\"editor-block-inspector__multi-blocks\">{ __( 'Coming Soon' ) }</span>;\n\t}\n\n\tconst isSelectedBlockUnregistered =\n\t\t!! selectedBlock && selectedBlock.name === getUnregisteredTypeHandlerName();\n\n\t/*\n\t * If the selected block is of an unregistered type, avoid showing it as an actual selection\n\t * because we want the user to focus on the unregistered block warning, not block settings.\n\t */\n\tif ( ! selectedBlock || isSelectedBlockUnregistered ) {\n\t\treturn <span className=\"editor-block-inspector__no-blocks\">{ __( 'No block selected.' ) }</span>;\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"editor-block-inspector__card\">\n\t\t\t\t<BlockIcon icon={ blockType.icon } showColors />\n\t\t\t\t<div className=\"editor-block-inspector__card-content\">\n\t\t\t\t\t<div className=\"editor-block-inspector__card-title\">{ blockType.title }</div>\n\t\t\t\t\t<div className=\"editor-block-inspector__card-description\">{ blockType.description }</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{ !! blockType.styles && (\n\t\t\t\t<div>\n\t\t\t\t\t<PanelBody\n\t\t\t\t\t\ttitle={ __( 'Styles' ) }\n\t\t\t\t\t\tinitialOpen={ false }\n\t\t\t\t\t>\n\t\t\t\t\t\t<BlockStyles\n\t\t\t\t\t\t\tclientId={ selectedBlock.clientId }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PanelBody>\n\t\t\t\t</div>\n\t\t\t) }\n\t\t\t<div><InspectorControls.Slot /></div>\n\t\t\t<div>\n\t\t\t\t<InspectorAdvancedControls.Slot>\n\t\t\t\t\t{ ( fills ) => ! isEmpty( fills ) && (\n\t\t\t\t\t\t<PanelBody\n\t\t\t\t\t\t\tclassName=\"editor-block-inspector__advanced\"\n\t\t\t\t\t\t\ttitle={ __( 'Advanced' ) }\n\t\t\t\t\t\t\tinitialOpen={ false }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ fills }\n\t\t\t\t\t\t</PanelBody>\n\t\t\t\t\t) }\n\t\t\t\t</InspectorAdvancedControls.Slot>\n\t\t\t</div>\n\t\t\t<SkipToSelectedBlock key=\"back\" />\n\t\t</Fragment>\n\t);\n};\n\nexport default withSelect(\n\t( select ) => {\n\t\tconst { getSelectedBlock, getSelectedBlockCount } = select( 'core/editor' );\n\t\tconst selectedBlock = getSelectedBlock();\n\t\tconst blockType = selectedBlock && getBlockType( selectedBlock.name );\n\t\treturn {\n\t\t\tselectedBlock,\n\t\t\tblockType,\n\t\t\tcount: getSelectedBlockCount(),\n\t\t};\n\t}\n)( BlockInspector );\n"]}