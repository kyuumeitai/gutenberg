{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/store/effects/reusable-blocks.js"],"names":["REUSABLE_BLOCK_NOTICE_ID","fetchReusableBlocks","action","store","id","dispatch","postType","result","path","rest_base","reusableBlockOrBlocks","post","parsedBlocks","content","raw","reusableBlock","title","parsedBlock","length","type","error","saveReusableBlocks","state","getState","clientId","isTemporary","name","innerBlocks","data","status","method","updatedReusableBlock","updatedId","message","createSuccessNotice","createErrorNotice","deleteReusableBlocks","allBlocks","associatedBlocks","filter","block","attributes","ref","associatedBlockClientIds","map","transactionId","optimist","BEGIN","COMMIT","REVERT","receiveReusableBlocks","results","convertBlockToStatic","oldBlock","referencedBlock","newBlocks","innerBlock","convertBlockToReusable","clientIds"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray, map, uniqueId } from 'lodash';\nimport { BEGIN, COMMIT, REVERT } from 'redux-optimist';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport {\n\tparse,\n\tserialize,\n\tcreateBlock,\n\tisReusableBlock,\n\tcloneBlock,\n} from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n// TODO: Ideally this would be the only dispatch in scope. This requires either\n// refactoring editor actions to yielded controls, or replacing direct dispatch\n// on the editor store with action creators (e.g. `REMOVE_REUSABLE_BLOCK`).\nimport { dispatch as dataDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { resolveSelector } from './utils';\nimport {\n\t__experimentalReceiveReusableBlocks as receiveReusableBlocksAction,\n\tremoveBlocks,\n\treplaceBlocks,\n\treceiveBlocks,\n\t__experimentalSaveReusableBlock as saveReusableBlock,\n} from '../actions';\nimport {\n\t__experimentalGetReusableBlock as getReusableBlock,\n\tgetBlock,\n\tgetBlocks,\n\tgetBlocksByClientId,\n} from '../selectors';\nimport { getPostRawValue } from '../reducer';\n\n/**\n * Module Constants\n */\nconst REUSABLE_BLOCK_NOTICE_ID = 'REUSABLE_BLOCK_NOTICE_ID';\n\n/**\n * Fetch Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const fetchReusableBlocks = async ( action, store ) => {\n\tconst { id } = action;\n\tconst { dispatch } = store;\n\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await resolveSelector( 'core', 'getPostType', 'wp_block' );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tlet result;\n\tif ( id ) {\n\t\tresult = apiFetch( { path: `/wp/v2/${ postType.rest_base }/${ id }?context=edit` } );\n\t} else {\n\t\tresult = apiFetch( { path: `/wp/v2/${ postType.rest_base }?per_page=-1&context=edit` } );\n\t}\n\n\ttry {\n\t\tconst reusableBlockOrBlocks = await result;\n\t\tdispatch( receiveReusableBlocksAction( map(\n\t\t\tcastArray( reusableBlockOrBlocks ),\n\t\t\t( post ) => {\n\t\t\t\tconst parsedBlocks = parse( post.content.raw );\n\t\t\t\treturn {\n\t\t\t\t\treusableBlock: {\n\t\t\t\t\t\tid: post.id,\n\t\t\t\t\t\ttitle: getPostRawValue( post.title ),\n\t\t\t\t\t},\n\t\t\t\t\tparsedBlock: parsedBlocks.length === 1 ?\n\t\t\t\t\t\tparsedBlocks[ 0 ] :\n\t\t\t\t\t\tcreateBlock( 'core/template', {}, parsedBlocks ),\n\t\t\t\t};\n\t\t\t}\n\t\t) ) );\n\n\t\tdispatch( {\n\t\t\ttype: 'FETCH_REUSABLE_BLOCKS_SUCCESS',\n\t\t\tid,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'FETCH_REUSABLE_BLOCKS_FAILURE',\n\t\t\tid,\n\t\t\terror,\n\t\t} );\n\t}\n};\n\n/**\n * Save Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const saveReusableBlocks = async ( action, store ) => {\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await resolveSelector( 'core', 'getPostType', 'wp_block' );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tconst { id } = action;\n\tconst { dispatch } = store;\n\tconst state = store.getState();\n\tconst { clientId, title, isTemporary } = getReusableBlock( state, id );\n\tconst reusableBlock = getBlock( state, clientId );\n\tconst content = serialize( reusableBlock.name === 'core/template' ? reusableBlock.innerBlocks : reusableBlock );\n\n\tconst data = isTemporary ? { title, content, status: 'publish' } : { id, title, content, status: 'publish' };\n\tconst path = isTemporary ? `/wp/v2/${ postType.rest_base }` : `/wp/v2/${ postType.rest_base }/${ id }`;\n\tconst method = isTemporary ? 'POST' : 'PUT';\n\n\ttry {\n\t\tconst updatedReusableBlock = await apiFetch( { path, data, method } );\n\t\tdispatch( {\n\t\t\ttype: 'SAVE_REUSABLE_BLOCK_SUCCESS',\n\t\t\tupdatedId: updatedReusableBlock.id,\n\t\t\tid,\n\t\t} );\n\t\tconst message = isTemporary ? __( 'Block created.' ) : __( 'Block updated.' );\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice( message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( { type: 'SAVE_REUSABLE_BLOCK_FAILURE', id } );\n\t\tdataDispatch( 'core/notices' ).createErrorNotice( error.message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t}\n};\n\n/**\n * Delete Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const deleteReusableBlocks = async ( action, store ) => {\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await resolveSelector( 'core', 'getPostType', 'wp_block' );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tconst { id } = action;\n\tconst { getState, dispatch } = store;\n\n\t// Don't allow a reusable block with a temporary ID to be deleted\n\tconst reusableBlock = getReusableBlock( getState(), id );\n\tif ( ! reusableBlock || reusableBlock.isTemporary ) {\n\t\treturn;\n\t}\n\n\t// Remove any other blocks that reference this reusable block\n\tconst allBlocks = getBlocks( getState() );\n\tconst associatedBlocks = allBlocks.filter( ( block ) => isReusableBlock( block ) && block.attributes.ref === id );\n\tconst associatedBlockClientIds = associatedBlocks.map( ( block ) => block.clientId );\n\n\tconst transactionId = uniqueId();\n\n\tdispatch( {\n\t\ttype: 'REMOVE_REUSABLE_BLOCK',\n\t\tid,\n\t\toptimist: { type: BEGIN, id: transactionId },\n\t} );\n\n\t// Remove the parsed block.\n\tdispatch( removeBlocks( [\n\t\t...associatedBlockClientIds,\n\t\treusableBlock.clientId,\n\t] ) );\n\n\ttry {\n\t\tawait apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ id }`,\n\t\t\tmethod: 'DELETE',\n\t\t} );\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_REUSABLE_BLOCK_SUCCESS',\n\t\t\tid,\n\t\t\toptimist: { type: COMMIT, id: transactionId },\n\t\t} );\n\t\tconst message = __( 'Block deleted.' );\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice( message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_REUSABLE_BLOCK_FAILURE',\n\t\t\tid,\n\t\t\toptimist: { type: REVERT, id: transactionId },\n\t\t} );\n\t\tdataDispatch( 'core/notices' ).createErrorNotice( error.message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t}\n};\n\n/**\n * Receive Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @return {Object} receive blocks action\n */\nexport const receiveReusableBlocks = ( action ) => {\n\treturn receiveBlocks( map( action.results, 'parsedBlock' ) );\n};\n\n/**\n * Convert a reusable block to a static block effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const convertBlockToStatic = ( action, store ) => {\n\tconst state = store.getState();\n\tconst oldBlock = getBlock( state, action.clientId );\n\tconst reusableBlock = getReusableBlock( state, oldBlock.attributes.ref );\n\tconst referencedBlock = getBlock( state, reusableBlock.clientId );\n\tlet newBlocks;\n\tif ( referencedBlock.name === 'core/template' ) {\n\t\tnewBlocks = referencedBlock.innerBlocks.map( ( innerBlock ) => cloneBlock( innerBlock ) );\n\t} else {\n\t\tnewBlocks = [ cloneBlock( referencedBlock ) ];\n\t}\n\tstore.dispatch( replaceBlocks( oldBlock.clientId, newBlocks ) );\n};\n\n/**\n * Convert a static block to a reusable block effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const convertBlockToReusable = ( action, store ) => {\n\tconst { getState, dispatch } = store;\n\tlet parsedBlock;\n\tif ( action.clientIds.length === 1 ) {\n\t\tparsedBlock = getBlock( getState(), action.clientIds[ 0 ] );\n\t} else {\n\t\tparsedBlock = createBlock(\n\t\t\t'core/template',\n\t\t\t{},\n\t\t\tgetBlocksByClientId( getState(), action.clientIds )\n\t\t);\n\n\t\t// This shouldn't be necessary but at the moment\n\t\t// we expect the content of the shared blocks to live in the blocks state.\n\t\tdispatch( receiveBlocks( [ parsedBlock ] ) );\n\t}\n\n\tconst reusableBlock = {\n\t\tid: uniqueId( 'reusable' ),\n\t\tclientId: parsedBlock.clientId,\n\t\ttitle: __( 'Untitled Reusable Block' ),\n\t};\n\n\tdispatch( receiveReusableBlocksAction( [ {\n\t\treusableBlock,\n\t\tparsedBlock,\n\t} ] ) );\n\n\tdispatch( saveReusableBlock( reusableBlock.id ) );\n\n\tdispatch( replaceBlocks(\n\t\taction.clientIds,\n\t\tcreateBlock( 'core/block', {\n\t\t\tref: reusableBlock.id,\n\t\t} )\n\t) );\n\n\t// Re-add the original block to the store, since replaceBlock() will have removed it\n\tdispatch( receiveBlocks( [ parsedBlock ] ) );\n};\n"]}