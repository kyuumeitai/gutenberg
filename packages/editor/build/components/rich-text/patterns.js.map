{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/components/rich-text/patterns.js"],"names":["getPatterns","onReplace","multiline","valueToFormat","patterns","type","trigger","undefined","record","text","transformation","item","regExp","test","result","match","block","transform","content","length","indexOf","start","index","end"],"mappings":";;;;;;;AAGA;;AAKA;;AACA;;AATA;;;;AAKA;;;AAMO,SAASA,WAAT,OAAgE;AAAA,MAAxCC,SAAwC,QAAxCA,SAAwC;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBC,aAAkB,QAAlBA,aAAkB;AACtE,MAAMC,QAAQ,GAAG,oBAAQ,gCAAoB,MAApB,CAAR,EAAsC,iBAAyB;AAAA,QAArBC,IAAqB,SAArBA,IAAqB;AAAA,QAAfC,OAAe,SAAfA,OAAe;AAC/E,WAAOD,IAAI,KAAK,SAAT,IAAsBC,OAAO,KAAKC,SAAzC;AACA,GAFgB,CAAjB;AAIA,SAAO,CACN,UAAEC,MAAF,EAAc;AACb,QAAK,CAAEP,SAAP,EAAmB;AAClB,aAAOO,MAAP;AACA;;AAED,QAAMC,IAAI,GAAG,8BAAgBD,MAAhB,CAAb;AACA,QAAME,cAAc,GAAG,2BAAeN,QAAf,EAAyB,UAAEO,IAAF,EAAY;AAC3D,aAAOA,IAAI,CAACC,MAAL,CAAYC,IAAZ,CAAkBJ,IAAlB,CAAP;AACA,KAFsB,CAAvB;;AAIA,QAAK,CAAEC,cAAP,EAAwB;AACvB,aAAOF,MAAP;AACA;;AAED,QAAMM,MAAM,GAAGL,IAAI,CAACM,KAAL,CAAYL,cAAc,CAACE,MAA3B,CAAf;AAEA,QAAMI,KAAK,GAAGN,cAAc,CAACO,SAAf,CAA0B;AACvCC,MAAAA,OAAO,EAAEf,aAAa,CAAE,sBAAQK,MAAR,EAAgB,CAAhB,EAAmBM,MAAM,CAAE,CAAF,CAAN,CAAYK,MAA/B,CAAF,CADiB;AAEvCJ,MAAAA,KAAK,EAAED;AAFgC,KAA1B,CAAd;AAKAb,IAAAA,SAAS,CAAE,CAAEe,KAAF,CAAF,CAAT;AAEA,WAAOR,MAAP;AACA,GAzBK,EA0BN,UAAEA,MAAF,EAAc;AACb,QAAKN,SAAL,EAAiB;AAChB,aAAOM,MAAP;AACA;;AAED,QAAMC,IAAI,GAAG,8BAAgBD,MAAhB,CAAb,CALa,CAOb;;AACA,QAAKC,IAAI,CAACW,OAAL,CAAc,GAAd,MAAwB,CAAC,CAA9B,EAAkC;AACjC,aAAOZ,MAAP;AACA;;AAED,QAAMO,KAAK,GAAGN,IAAI,CAACM,KAAL,CAAY,WAAZ,CAAd;;AAEA,QAAK,CAAEA,KAAP,EAAe;AACd,aAAOP,MAAP;AACA;;AAED,QAAMa,KAAK,GAAGN,KAAK,CAACO,KAApB;AACA,QAAMC,GAAG,GAAGF,KAAK,GAAGN,KAAK,CAAE,CAAF,CAAL,CAAWI,MAA/B;AAEAX,IAAAA,MAAM,GAAG,sBAAQA,MAAR,EAAgBa,KAAhB,EAAuBA,KAAK,GAAG,CAA/B,CAAT;AACAb,IAAAA,MAAM,GAAG,sBAAQA,MAAR,EAAgBe,GAAhB,EAAqBA,GAAG,GAAG,CAA3B,CAAT;AACAf,IAAAA,MAAM,GAAG,2BAAaA,MAAb,EAAqB;AAAEH,MAAAA,IAAI,EAAE;AAAR,KAArB,EAAuCgB,KAAvC,EAA8CE,GAA9C,CAAT;AAEA,WAAOf,MAAP;AACA,GApDK,CAAP;AAsDA","sourcesContent":["/**\n * External dependencies\n */\nimport { filter } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { getBlockTransforms, findTransform } from '@wordpress/blocks';\nimport { remove, applyFormat, getTextContent } from '@wordpress/rich-text';\n\nexport function getPatterns( { onReplace, multiline, valueToFormat } ) {\n\tconst patterns = filter( getBlockTransforms( 'from' ), ( { type, trigger } ) => {\n\t\treturn type === 'pattern' && trigger === undefined;\n\t} );\n\n\treturn [\n\t\t( record ) => {\n\t\t\tif ( ! onReplace ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst text = getTextContent( record );\n\t\t\tconst transformation = findTransform( patterns, ( item ) => {\n\t\t\t\treturn item.regExp.test( text );\n\t\t\t} );\n\n\t\t\tif ( ! transformation ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst result = text.match( transformation.regExp );\n\n\t\t\tconst block = transformation.transform( {\n\t\t\t\tcontent: valueToFormat( remove( record, 0, result[ 0 ].length ) ),\n\t\t\t\tmatch: result,\n\t\t\t} );\n\n\t\t\tonReplace( [ block ] );\n\n\t\t\treturn record;\n\t\t},\n\t\t( record ) => {\n\t\t\tif ( multiline ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst text = getTextContent( record );\n\n\t\t\t// Quick check the text for the necessary character.\n\t\t\tif ( text.indexOf( '`' ) === -1 ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst match = text.match( /`([^`]+)`/ );\n\n\t\t\tif ( ! match ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst start = match.index;\n\t\t\tconst end = start + match[ 1 ].length;\n\n\t\t\trecord = remove( record, start, start + 1 );\n\t\t\trecord = remove( record, end, end + 1 );\n\t\t\trecord = applyFormat( record, { type: 'code' }, start, end );\n\n\t\t\treturn record;\n\t\t},\n\t];\n}\n"]}