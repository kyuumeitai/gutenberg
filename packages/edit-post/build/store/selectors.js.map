{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/edit-post/src/store/selectors.js"],"names":["getEditorMode","state","getPreference","isEditorSidebarOpened","activeGeneralSidebar","getActiveGeneralSidebarName","isPluginSidebarOpened","isDismissed","getPreferences","preferences","preferenceKey","defaultValue","value","undefined","isPublishSidebarOpened","publishSidebarActive","isEditorPanelEnabled","panelName","panels","isEditorSidebarPanelOpened","panel","alternative","plugin","version","isEditorPanelOpened","isModalActive","modalName","activeModal","isFeatureActive","feature","features","isPluginItemPinned","pluginName","pinnedPluginItems","getActiveMetaBoxLocations","Object","keys","metaBoxes","locations","filter","location","isMetaBoxLocationActive","isMetaBoxLocationVisible","getMetaBoxesPerLocation","id","length","getAllMetaBoxes","hasMetaBoxes","isSavingMetaBoxes","isSaving"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AACA;;AAKA;;AATA;;;;AAMA;;;;AAKA;;;;;;;AAOO,SAASA,aAAT,CAAwBC,KAAxB,EAAgC;AACtC,SAAOC,aAAa,CAAED,KAAF,EAAS,YAAT,EAAuB,QAAvB,CAApB;AACA;AAED;;;;;;;;;AAOO,SAASE,qBAAT,CAAgCF,KAAhC,EAAwC;AAC9C,MAAMG,oBAAoB,GAAGC,2BAA2B,CAAEJ,KAAF,CAAxD;AAEA,SAAO,sBAAU,CAAE,oBAAF,EAAwB,iBAAxB,CAAV,EAAuDG,oBAAvD,CAAP;AACA;AAED;;;;;;;;AAMO,SAASE,qBAAT,CAAgCL,KAAhC,EAAwC;AAC9C,MAAMG,oBAAoB,GAAGC,2BAA2B,CAAEJ,KAAF,CAAxD;AACA,SAAO,CAAC,CAAEG,oBAAH,IAA2B,CAAED,qBAAqB,CAAEF,KAAF,CAAzD;AACA;AAED;;;;;;;;;;;;;;;;AAcO,SAASI,2BAAT,CAAsCJ,KAAtC,EAA8C;AACpD;AACA,MAAMM,WAAW,GAAGL,aAAa,CAAED,KAAF,EAAS,2BAAT,EAAsC,KAAtC,CAAjC;;AACA,MAAKM,WAAL,EAAmB;AAClB,WAAO,IAAP;AACA;;AAED,SAAON,KAAK,CAACG,oBAAb;AACA;AAED;;;;;;;;;AAOO,SAASI,cAAT,CAAyBP,KAAzB,EAAiC;AACvC,SAAOA,KAAK,CAACQ,WAAb;AACA;AAED;;;;;;;;;;AAQO,SAASP,aAAT,CAAwBD,KAAxB,EAA+BS,aAA/B,EAA8CC,YAA9C,EAA6D;AACnE,MAAMF,WAAW,GAAGD,cAAc,CAAEP,KAAF,CAAlC;AACA,MAAMW,KAAK,GAAGH,WAAW,CAAEC,aAAF,CAAzB;AACA,SAAOE,KAAK,KAAKC,SAAV,GAAsBF,YAAtB,GAAqCC,KAA5C;AACA;AAED;;;;;;;;;AAOO,SAASE,sBAAT,CAAiCb,KAAjC,EAAyC;AAC/C,SAAOA,KAAK,CAACc,oBAAb;AACA;AAED;;;;;;;;;;;AASO,SAASC,oBAAT,CAA+Bf,KAA/B,EAAsCgB,SAAtC,EAAkD;AACxD,MAAMC,MAAM,GAAGhB,aAAa,CAAED,KAAF,EAAS,QAAT,CAA5B;AACA,SAAO,iBAAKiB,MAAL,EAAa,CAAED,SAAF,EAAa,SAAb,CAAb,EAAuC,IAAvC,CAAP;AACA;AAED;;;;;;;;;;;AASO,SAASE,0BAAT,CAAqClB,KAArC,EAA4CmB,KAA5C,EAAoD;AAC1D,2BAAY,4BAAZ,EAA0C;AACzCC,IAAAA,WAAW,EAAE,sBAD4B;AAEzCC,IAAAA,MAAM,EAAE,WAFiC;AAGzCC,IAAAA,OAAO,EAAE;AAHgC,GAA1C;AAKA,SAAOP,oBAAoB,CAAEf,KAAF,EAASmB,KAAT,CAA3B;AACA;AAED;;;;;;;;;;;AASO,SAASI,mBAAT,CAA8BvB,KAA9B,EAAqCgB,SAArC,EAAiD;AACvD,MAAMC,MAAM,GAAGhB,aAAa,CAAED,KAAF,EAAS,QAAT,CAA5B;AACA,SAAOiB,MAAM,CAAED,SAAF,CAAN,KAAwB,IAAxB,IAAgC,iBAAKC,MAAL,EAAa,CAAED,SAAF,EAAa,QAAb,CAAb,EAAsC,KAAtC,CAAvC;AACA;AAED;;;;;;;;;;AAQO,SAASQ,aAAT,CAAwBxB,KAAxB,EAA+ByB,SAA/B,EAA2C;AACjD,SAAOzB,KAAK,CAAC0B,WAAN,KAAsBD,SAA7B;AACA;AAED;;;;;;;;;;AAQO,SAASE,eAAT,CAA0B3B,KAA1B,EAAiC4B,OAAjC,EAA2C;AACjD,SAAO,CAAC,CAAE5B,KAAK,CAACQ,WAAN,CAAkBqB,QAAlB,CAA4BD,OAA5B,CAAV;AACA;AAED;;;;;;;;;;;AASO,SAASE,kBAAT,CAA6B9B,KAA7B,EAAoC+B,UAApC,EAAiD;AACvD,MAAMC,iBAAiB,GAAG/B,aAAa,CAAED,KAAF,EAAS,mBAAT,EAA8B,EAA9B,CAAvC;AAEA,SAAO,iBAAKgC,iBAAL,EAAwB,CAAED,UAAF,CAAxB,EAAwC,IAAxC,CAAP;AACA;AAED;;;;;;;;;AAOO,IAAME,yBAAyB,GAAG,qBACxC,UAAEjC,KAAF,EAAa;AACZ,SAAOkC,MAAM,CAACC,IAAP,CAAanC,KAAK,CAACoC,SAAN,CAAgBC,SAA7B,EACLC,MADK,CACG,UAAEC,QAAF;AAAA,WAAgBC,uBAAuB,CAAExC,KAAF,EAASuC,QAAT,CAAvC;AAAA,GADH,CAAP;AAEA,CAJuC,EAKxC,UAAEvC,KAAF;AAAA,SAAa,CACZA,KAAK,CAACoC,SAAN,CAAgBC,SADJ,CAAb;AAAA,CALwC,CAAlC;AAUP;;;;;;;;;;;AAQO,SAASI,wBAAT,CAAmCzC,KAAnC,EAA0CuC,QAA1C,EAAqD;AAC3D,SACCC,uBAAuB,CAAExC,KAAF,EAASuC,QAAT,CAAvB,IACA,kBAAMG,uBAAuB,CAAE1C,KAAF,EAASuC,QAAT,CAA7B,EAAkD,gBAAc;AAAA,QAAVI,EAAU,QAAVA,EAAU;AAC/D,WAAO5B,oBAAoB,CAAEf,KAAF,qBAAsB2C,EAAtB,EAA3B;AACA,GAFD,CAFD;AAMA;AAED;;;;;;;;;;;AASO,SAASH,uBAAT,CAAkCxC,KAAlC,EAAyCuC,QAAzC,EAAoD;AAC1D,MAAMH,SAAS,GAAGM,uBAAuB,CAAE1C,KAAF,EAASuC,QAAT,CAAzC;AACA,SAAO,CAAC,CAAEH,SAAH,IAAgBA,SAAS,CAACQ,MAAV,KAAqB,CAA5C;AACA;AAED;;;;;;;;;;AAQO,SAASF,uBAAT,CAAkC1C,KAAlC,EAAyCuC,QAAzC,EAAoD;AAC1D,SAAOvC,KAAK,CAACoC,SAAN,CAAgBC,SAAhB,CAA2BE,QAA3B,CAAP;AACA;AAED;;;;;;;;;AAOO,IAAMM,eAAe,GAAG,qBAC9B,UAAE7C,KAAF,EAAa;AACZ,SAAO,qBAAS,oBAAQA,KAAK,CAACoC,SAAN,CAAgBC,SAAxB,CAAT,CAAP;AACA,CAH6B,EAI9B,UAAErC,KAAF;AAAA,SAAa,CACZA,KAAK,CAACoC,SAAN,CAAgBC,SADJ,CAAb;AAAA,CAJ8B,CAAxB;AASP;;;;;;;;;;AAOO,SAASS,YAAT,CAAuB9C,KAAvB,EAA+B;AACrC,SAAOiC,yBAAyB,CAAEjC,KAAF,CAAzB,CAAmC4C,MAAnC,GAA4C,CAAnD;AACA;AAED;;;;;;;;;AAOO,SAASG,iBAAT,CAA4B/C,KAA5B,EAAoC;AAC1C,SAAOA,KAAK,CAACoC,SAAN,CAAgBY,QAAvB;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { get, includes, some, flatten, values } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Returns the current editing mode.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Editing mode.\n */\nexport function getEditorMode( state ) {\n\treturn getPreference( state, 'editorMode', 'visual' );\n}\n\n/**\n * Returns true if the editor sidebar is opened.\n *\n * @param {Object} state Global application state\n *\n * @return {boolean} Whether the editor sidebar is opened.\n */\nexport function isEditorSidebarOpened( state ) {\n\tconst activeGeneralSidebar = getActiveGeneralSidebarName( state );\n\n\treturn includes( [ 'edit-post/document', 'edit-post/block' ], activeGeneralSidebar );\n}\n\n/**\n * Returns true if the plugin sidebar is opened.\n *\n * @param {Object} state Global application state\n * @return {boolean}     Whether the plugin sidebar is opened.\n */\nexport function isPluginSidebarOpened( state ) {\n\tconst activeGeneralSidebar = getActiveGeneralSidebarName( state );\n\treturn !! activeGeneralSidebar && ! isEditorSidebarOpened( state );\n}\n\n/**\n * Returns the current active general sidebar name, or null if there is no\n * general sidebar active. The active general sidebar is a unique name to\n * identify either an editor or plugin sidebar.\n *\n * Examples:\n *\n *  - `edit-post/document`\n *  - `my-plugin/insert-image-sidebar`\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Active general sidebar name.\n */\nexport function getActiveGeneralSidebarName( state ) {\n\t// Dismissal takes precedent.\n\tconst isDismissed = getPreference( state, 'isGeneralSidebarDismissed', false );\n\tif ( isDismissed ) {\n\t\treturn null;\n\t}\n\n\treturn state.activeGeneralSidebar;\n}\n\n/**\n * Returns the preferences (these preferences are persisted locally).\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Preferences Object.\n */\nexport function getPreferences( state ) {\n\treturn state.preferences;\n}\n\n/**\n *\n * @param {Object} state         Global application state.\n * @param {string} preferenceKey Preference Key.\n * @param {Mixed}  defaultValue  Default Value.\n *\n * @return {Mixed} Preference Value.\n */\nexport function getPreference( state, preferenceKey, defaultValue ) {\n\tconst preferences = getPreferences( state );\n\tconst value = preferences[ preferenceKey ];\n\treturn value === undefined ? defaultValue : value;\n}\n\n/**\n * Returns true if the publish sidebar is opened.\n *\n * @param {Object} state Global application state\n *\n * @return {boolean} Whether the publish sidebar is open.\n */\nexport function isPublishSidebarOpened( state ) {\n\treturn state.publishSidebarActive;\n}\n\n/**\n * Returns true if the given panel is enabled, or false otherwise. Panels are\n * enabled by default.\n *\n * @param {Object} state     Global application state.\n * @param {string} panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is enabled.\n */\nexport function isEditorPanelEnabled( state, panelName ) {\n\tconst panels = getPreference( state, 'panels' );\n\treturn get( panels, [ panelName, 'enabled' ], true );\n}\n\n/**\n * Returns true if the given panel is enabled, or false otherwise. Panels are\n * enabled by default.\n *\n * @param {Object} state Global application state.\n * @param {string} panel A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is enabled.\n */\nexport function isEditorSidebarPanelOpened( state, panel ) {\n\tdeprecated( 'isEditorSidebarPanelOpened', {\n\t\talternative: 'isEditorPanelEnabled',\n\t\tplugin: 'Gutenberg',\n\t\tversion: '4.3',\n\t} );\n\treturn isEditorPanelEnabled( state, panel );\n}\n\n/**\n * Returns true if the given panel is open, or false otherwise. Panels are\n * closed by default.\n *\n * @param  {Object}  state     Global application state.\n * @param  {string}  panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is open.\n */\nexport function isEditorPanelOpened( state, panelName ) {\n\tconst panels = getPreference( state, 'panels' );\n\treturn panels[ panelName ] === true || get( panels, [ panelName, 'opened' ], false );\n}\n\n/**\n * Returns true if a modal is active, or false otherwise.\n *\n * @param  {Object}  state \t   Global application state.\n * @param  {string}  modalName A string that uniquely identifies the modal.\n *\n * @return {boolean} Whether the modal is active.\n */\nexport function isModalActive( state, modalName ) {\n\treturn state.activeModal === modalName;\n}\n\n/**\n * Returns whether the given feature is enabled or not.\n *\n * @param {Object} state   Global application state.\n * @param {string} feature Feature slug.\n *\n * @return {boolean} Is active.\n */\nexport function isFeatureActive( state, feature ) {\n\treturn !! state.preferences.features[ feature ];\n}\n\n/**\n * Returns true if the plugin item is pinned to the header.\n * When the value is not set it defaults to true.\n *\n * @param  {Object}  state      Global application state.\n * @param  {string}  pluginName Plugin item name.\n *\n * @return {boolean} Whether the plugin item is pinned.\n */\nexport function isPluginItemPinned( state, pluginName ) {\n\tconst pinnedPluginItems = getPreference( state, 'pinnedPluginItems', {} );\n\n\treturn get( pinnedPluginItems, [ pluginName ], true );\n}\n\n/**\n * Returns an array of active meta box locations.\n *\n * @param {Object} state Post editor state.\n *\n * @return {string[]} Active meta box locations.\n */\nexport const getActiveMetaBoxLocations = createSelector(\n\t( state ) => {\n\t\treturn Object.keys( state.metaBoxes.locations )\n\t\t\t.filter( ( location ) => isMetaBoxLocationActive( state, location ) );\n\t},\n\t( state ) => [\n\t\tstate.metaBoxes.locations,\n\t]\n);\n\n/**\n * Returns true if a metabox location is active and visible\n *\n * @param {Object} state    Post editor state.\n * @param {string} location Meta box location to test.\n *\n * @return {boolean} Whether the meta box location is active and visible.\n */\nexport function isMetaBoxLocationVisible( state, location ) {\n\treturn (\n\t\tisMetaBoxLocationActive( state, location ) &&\n\t\tsome( getMetaBoxesPerLocation( state, location ), ( { id } ) => {\n\t\t\treturn isEditorPanelEnabled( state, `meta-box-${ id }` );\n\t\t} )\n\t);\n}\n\n/**\n * Returns true if there is an active meta box in the given location, or false\n * otherwise.\n *\n * @param {Object} state    Post editor state.\n * @param {string} location Meta box location to test.\n *\n * @return {boolean} Whether the meta box location is active.\n */\nexport function isMetaBoxLocationActive( state, location ) {\n\tconst metaBoxes = getMetaBoxesPerLocation( state, location );\n\treturn !! metaBoxes && metaBoxes.length !== 0;\n}\n\n/**\n * Returns the list of all the available meta boxes for a given location.\n *\n * @param {Object} state    Global application state.\n * @param {string} location Meta box location to test.\n *\n * @return {?Array} List of meta boxes.\n */\nexport function getMetaBoxesPerLocation( state, location ) {\n\treturn state.metaBoxes.locations[ location ];\n}\n\n/**\n * Returns the list of all the available meta boxes.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} List of meta boxes.\n */\nexport const getAllMetaBoxes = createSelector(\n\t( state ) => {\n\t\treturn flatten( values( state.metaBoxes.locations ) );\n\t},\n\t( state ) => [\n\t\tstate.metaBoxes.locations,\n\t]\n);\n\n/**\n * Returns true if the post is using Meta Boxes\n *\n * @param  {Object} state Global application state\n *\n * @return {boolean} Whether there are metaboxes or not.\n */\nexport function hasMetaBoxes( state ) {\n\treturn getActiveMetaBoxLocations( state ).length > 0;\n}\n\n/**\n * Returns true if the Meta Boxes are being saved.\n *\n * @param   {Object}  state Global application state.\n *\n * @return {boolean} Whether the metaboxes are being saved.\n */\nexport function isSavingMetaBoxes( state ) {\n\treturn state.metaBoxes.isSaving;\n}\n"]}