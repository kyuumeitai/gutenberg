{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/components/colors/with-colors.js"],"names":["DEFAULT_COLORS","args","colorMap","colorObject","arg","select","settings","getEditorSettings","colors","WrappedComponent","props","setters","createSetters","colorUtils","getMostReadableColor","bind","state","colorValue","settersAccumulator","colorContext","colorAttributeName","upperFirstColorAttributeName","customColorAttributeName","createSetColor","setAttributes","slug","undefined","previousState","attributes","newState","previousColorObject","previousColor","color","class","Component"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { get, isString, kebabCase, reduce, upperFirst } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport { withSelect } from '@wordpress/data';\nimport { compose, createHigherOrderComponent } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { getColorClassName, getColorObjectByColorValue, getColorObjectByAttributeValues, getMostReadableColor } from './utils';\n\nconst DEFAULT_COLORS = [];\n\n/**\n * Higher-order component, which handles color logic for class generation\n * color value, retrieval and color attribute setting.\n *\n * @param {...(object|string)} args The arguments can be strings or objects. If the argument is an object,\n *                                  it should contain the color attribute name as key and the color context as value.\n *                                  If the argument is a string the value should be the color attribute name,\n *                                  the color context is computed by applying a kebab case transform to the value.\n *                                  Color context represents the context/place where the color is going to be used.\n *                                  The class name of the color is generated using 'has' followed by the color name\n *                                  and ending with the color context all in kebab case e.g: has-green-background-color.\n *\n *\n * @return {Function} Higher-order component.\n */\nexport default ( ...args ) => {\n\tconst colorMap = reduce( args, ( colorObject, arg ) => {\n\t\treturn {\n\t\t\t...colorObject,\n\t\t\t...( isString( arg ) ? { [ arg ]: kebabCase( arg ) } : arg ),\n\t\t};\n\t}, {} );\n\n\treturn createHigherOrderComponent(\n\t\tcompose( [\n\t\t\twithSelect( ( select ) => {\n\t\t\t\tconst settings = select( 'core/editor' ).getEditorSettings();\n\t\t\t\treturn {\n\t\t\t\t\tcolors: get( settings, [ 'colors' ], DEFAULT_COLORS ),\n\t\t\t\t};\n\t\t\t} ),\n\t\t\t( WrappedComponent ) => {\n\t\t\t\treturn class extends Component {\n\t\t\t\t\tconstructor( props ) {\n\t\t\t\t\t\tsuper( props );\n\n\t\t\t\t\t\tthis.setters = this.createSetters();\n\t\t\t\t\t\tthis.colorUtils = {\n\t\t\t\t\t\t\tgetMostReadableColor: this.getMostReadableColor.bind( this ),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.state = {};\n\t\t\t\t\t}\n\n\t\t\t\t\tgetMostReadableColor( colorValue ) {\n\t\t\t\t\t\tconst { colors } = this.props;\n\t\t\t\t\t\treturn getMostReadableColor( colors, colorValue );\n\t\t\t\t\t}\n\n\t\t\t\t\tcreateSetters() {\n\t\t\t\t\t\treturn reduce( colorMap, ( settersAccumulator, colorContext, colorAttributeName ) => {\n\t\t\t\t\t\t\tconst upperFirstColorAttributeName = upperFirst( colorAttributeName );\n\t\t\t\t\t\t\tconst customColorAttributeName = `custom${ upperFirstColorAttributeName }`;\n\t\t\t\t\t\t\tsettersAccumulator[ `set${ upperFirstColorAttributeName }` ] =\n\t\t\t\t\t\t\t\tthis.createSetColor( colorAttributeName, customColorAttributeName );\n\t\t\t\t\t\t\treturn settersAccumulator;\n\t\t\t\t\t\t}, {} );\n\t\t\t\t\t}\n\n\t\t\t\t\tcreateSetColor( colorAttributeName, customColorAttributeName ) {\n\t\t\t\t\t\treturn ( colorValue ) => {\n\t\t\t\t\t\t\tconst colorObject = getColorObjectByColorValue( this.props.colors, colorValue );\n\t\t\t\t\t\t\tthis.props.setAttributes( {\n\t\t\t\t\t\t\t\t[ colorAttributeName ]: colorObject && colorObject.slug ? colorObject.slug : undefined,\n\t\t\t\t\t\t\t\t[ customColorAttributeName ]: colorObject && colorObject.slug ? undefined : colorValue,\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tstatic getDerivedStateFromProps( { attributes, colors }, previousState ) {\n\t\t\t\t\t\treturn reduce( colorMap, ( newState, colorContext, colorAttributeName ) => {\n\t\t\t\t\t\t\tconst colorObject = getColorObjectByAttributeValues(\n\t\t\t\t\t\t\t\tcolors,\n\t\t\t\t\t\t\t\tattributes[ colorAttributeName ],\n\t\t\t\t\t\t\t\tattributes[ `custom${ upperFirst( colorAttributeName ) }` ],\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tconst previousColorObject = previousState[ colorAttributeName ];\n\t\t\t\t\t\t\tconst previousColor = get( previousColorObject, [ 'color' ] );\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t* The \"and previousColorObject\" condition checks that a previous color object was already computed.\n\t\t\t\t\t\t\t* At the start previousColorObject and colorValue are both equal to undefined\n\t\t\t\t\t\t\t* bus as previousColorObject does not exist we should compute the object.\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tif ( previousColor === colorObject.color && previousColorObject ) {\n\t\t\t\t\t\t\t\tnewState[ colorAttributeName ] = previousColorObject;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnewState[ colorAttributeName ] = {\n\t\t\t\t\t\t\t\t\t...colorObject,\n\t\t\t\t\t\t\t\t\tclass: getColorClassName( colorContext, colorObject.slug ),\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn newState;\n\t\t\t\t\t\t}, {} );\n\t\t\t\t\t}\n\n\t\t\t\t\trender() {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<WrappedComponent\n\t\t\t\t\t\t\t\t{ ...{\n\t\t\t\t\t\t\t\t\t...this.props,\n\t\t\t\t\t\t\t\t\tcolors: undefined,\n\t\t\t\t\t\t\t\t\t...this.state,\n\t\t\t\t\t\t\t\t\t...this.setters,\n\t\t\t\t\t\t\t\t\tcolorUtils: this.colorUtils,\n\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t] ),\n\t\t'withColors'\n\t);\n};\n"]}