{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/date/src/index.js"],"names":["settings","l10n","locale","months","monthsShort","weekdays","weekdaysShort","meridiem","am","pm","AM","PM","relative","future","past","formats","time","date","datetime","datetimeAbbreviated","timezone","offset","string","setSettings","dateSettings","currentLocale","momentLib","updateLocale","parentLocale","hour","minute","isLowercase","longDateFormat","LT","LTS","L","LL","LLL","LLLL","relativeTime","s","m","mm","h","hh","d","dd","M","MM","y","yy","setupWPTimezone","__experimentalGetSettings","getSettings","version","alternative","plugin","hint","tz","add","pack","name","abbrs","untils","offsets","moment","args","MINUTE_IN_SECONDS","HOUR_IN_MINUTES","HOUR_IN_SECONDS","formatMap","D","j","l","N","S","momentDate","num","format","withOrdinal","replace","w","z","parseInt","W","F","n","t","daysInMonth","isLeapYear","o","Y","a","A","B","timezoned","utcOffset","seconds","minutes","hours","g","G","H","i","u","v","e","I","isDST","O","P","T","Z","sign","parts","substring","split","c","r","U","dateFormat","dateValue","Date","char","newFormat","length","push","join","dateMoment","gmdate","utc","dateI18n","gmt"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport momentLib from 'moment';\nimport 'moment-timezone';\nimport 'moment-timezone/moment-timezone-utils';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\n\n// Changes made here will likely need to be made in `lib/client-assets.php` as\n// well because it uses the `setSettings()` function to change these settings.\nlet settings = {\n\tl10n: {\n\t\tlocale: 'en_US',\n\t\tmonths: [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ],\n\t\tmonthsShort: [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ],\n\t\tweekdays: [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ],\n\t\tweekdaysShort: [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ],\n\t\tmeridiem: { am: 'am', pm: 'pm', AM: 'AM', PM: 'PM' },\n\t\trelative: { future: ' % s from now', past: '% s ago' },\n\t},\n\tformats: {\n\t\ttime: 'g: i a',\n\t\tdate: 'F j, Y',\n\t\tdatetime: 'F j, Y g: i a',\n\t\tdatetimeAbbreviated: 'M j, Y g: i a',\n\t},\n\ttimezone: { offset: '0', string: '' },\n};\n\n/**\n * Adds a locale to moment, using the format supplied by `wp_localize_script()`.\n *\n * @param {Object} dateSettings Settings, including locale data.\n */\nexport function setSettings( dateSettings ) {\n\tsettings = dateSettings;\n\n\t// Backup and restore current locale.\n\tconst currentLocale = momentLib.locale();\n\tmomentLib.updateLocale( dateSettings.l10n.locale, {\n\t\t// Inherit anything missing from the default locale.\n\t\tparentLocale: currentLocale,\n\t\tmonths: dateSettings.l10n.months,\n\t\tmonthsShort: dateSettings.l10n.monthsShort,\n\t\tweekdays: dateSettings.l10n.weekdays,\n\t\tweekdaysShort: dateSettings.l10n.weekdaysShort,\n\t\tmeridiem( hour, minute, isLowercase ) {\n\t\t\tif ( hour < 12 ) {\n\t\t\t\treturn isLowercase ? dateSettings.l10n.meridiem.am : dateSettings.l10n.meridiem.AM;\n\t\t\t}\n\t\t\treturn isLowercase ? dateSettings.l10n.meridiem.pm : dateSettings.l10n.meridiem.PM;\n\t\t},\n\t\tlongDateFormat: {\n\t\t\tLT: dateSettings.formats.time,\n\t\t\tLTS: null,\n\t\t\tL: null,\n\t\t\tLL: dateSettings.formats.date,\n\t\t\tLLL: dateSettings.formats.datetime,\n\t\t\tLLLL: null,\n\t\t},\n\t\t// From human_time_diff?\n\t\t// Set to `(number, withoutSuffix, key, isFuture) => {}` instead.\n\t\trelativeTime: {\n\t\t\tfuture: dateSettings.l10n.relative.future,\n\t\t\tpast: dateSettings.l10n.relative.past,\n\t\t\ts: 'seconds',\n\t\t\tm: 'a minute',\n\t\t\tmm: '%d minutes',\n\t\t\th: 'an hour',\n\t\t\thh: '%d hours',\n\t\t\td: 'a day',\n\t\t\tdd: '%d days',\n\t\t\tM: 'a month',\n\t\t\tMM: '%d months',\n\t\t\ty: 'a year',\n\t\t\tyy: '%d years',\n\t\t},\n\t} );\n\tmomentLib.locale( currentLocale );\n\n\tsetupWPTimezone();\n}\n\n/**\n * Returns the currently defined date settings.\n *\n * @return {Object} Settings, including locale data.\n */\nexport function __experimentalGetSettings() {\n\treturn settings;\n}\n\n// deprecations\nexport function getSettings() {\n\tdeprecated( 'wp.date.getSettings', {\n\t\tversion: '4.4',\n\t\talternative: 'wp.date.__experimentalGetSettings',\n\t\tplugin: 'Gutenberg',\n\t\thint: 'Unstable APIs are strongly discouraged to be used, and are subject to removal without notice.',\n\t} );\n\treturn settings;\n}\n\nfunction setupWPTimezone() {\n\t// Create WP timezone based off dateSettings.\n\tmomentLib.tz.add( momentLib.tz.pack( {\n\t\tname: 'WP',\n\t\tabbrs: [ 'WP' ],\n\t\tuntils: [ null ],\n\t\toffsets: [ -settings.timezone.offset * 60 || 0 ],\n\t} ) );\n}\n\n// Create a new moment object which mirrors moment but includes\n// the attached timezone, instead of setting a default timezone on\n// the global moment object.\nexport const moment = ( ...args ) => {\n\treturn momentLib.tz( ...args, 'WP' );\n};\n\n// Date constants.\n/**\n * Number of seconds in one minute.\n *\n * @type {Number}\n */\nconst MINUTE_IN_SECONDS = 60;\n/**\n * Number of minutes in one hour.\n *\n * @type {Number}\n */\nconst HOUR_IN_MINUTES = 60;\n/**\n * Number of seconds in one hour.\n *\n * @type {Number}\n */\nconst HOUR_IN_SECONDS = 60 * MINUTE_IN_SECONDS;\n\n/**\n * Map of PHP formats to Moment.js formats.\n *\n * These are used internally by {@link wp.date.format}, and are either\n * a string representing the corresponding Moment.js format code, or a\n * function which returns the formatted string.\n *\n * This should only be used through {@link wp.date.format}, not\n * directly.\n *\n * @type {Object}\n */\nconst formatMap = {\n\t// Day\n\td: 'DD',\n\tD: 'ddd',\n\tj: 'D',\n\tl: 'dddd',\n\tN: 'E',\n\n\t/**\n\t * Gets the ordinal suffix.\n\t *\n\t * @param {moment} momentDate Moment instance.\n\t *\n\t * @return {string} Formatted date.\n\t */\n\tS( momentDate ) {\n\t\t// Do - D\n\t\tconst num = momentDate.format( 'D' );\n\t\tconst withOrdinal = momentDate.format( 'Do' );\n\t\treturn withOrdinal.replace( num, '' );\n\t},\n\n\tw: 'd',\n\t/**\n\t * Gets the day of the year (zero-indexed).\n\t *\n\t * @param {moment} momentDate Moment instance.\n\t *\n\t * @return {string} Formatted date.\n\t */\n\tz( momentDate ) {\n\t\t// DDD - 1\n\t\treturn '' + parseInt( momentDate.format( 'DDD' ), 10 ) - 1;\n\t},\n\n\t// Week\n\tW: 'W',\n\n\t// Month\n\tF: 'MMMM',\n\tm: 'MM',\n\tM: 'MMM',\n\tn: 'M',\n\t/**\n\t * Gets the days in the month.\n\t *\n\t * @param {moment} momentDate Moment instance.\n\t *\n\t * @return {string} Formatted date.\n\t */\n\tt( momentDate ) {\n\t\treturn momentDate.daysInMonth();\n\t},\n\n\t// Year\n\t/**\n\t * Gets whether the current year is a leap year.\n\t *\n\t * @param {moment} momentDate Moment instance.\n\t *\n\t * @return {string} Formatted date.\n\t */\n\tL( momentDate ) {\n\t\treturn momentDate.isLeapYear() ? '1' : '0';\n\t},\n\to: 'GGGG',\n\tY: 'YYYY',\n\ty: 'YY',\n\n\t// Time\n\ta: 'a',\n\tA: 'A',\n\t/**\n\t * Gets the current time in Swatch Internet Time (.beats).\n\t *\n\t * @param {moment} momentDate Moment instance.\n\t *\n\t * @return {string} Formatted date.\n\t */\n\tB( momentDate ) {\n\t\tconst timezoned = momentLib( momentDate ).utcOffset( 60 );\n\t\tconst seconds = parseInt( timezoned.format( 's' ), 10 ),\n\t\t\tminutes = parseInt( timezoned.format( 'm' ), 10 ),\n\t\t\thours = parseInt( timezoned.format( 'H' ), 10 );\n\t\treturn parseInt(\n\t\t\t(\n\t\t\t\tseconds +\n\t\t\t\t( minutes * MINUTE_IN_SECONDS ) +\n\t\t\t\t( hours * HOUR_IN_SECONDS )\n\t\t\t) / 86.4,\n\t\t\t10\n\t\t);\n\t},\n\tg: 'h',\n\tG: 'H',\n\th: 'hh',\n\tH: 'HH',\n\ti: 'mm',\n\ts: 'ss',\n\tu: 'SSSSSS',\n\tv: 'SSS',\n\t// Timezone\n\te: 'zz',\n\t/**\n\t * Gets whether the timezone is in DST currently.\n\t *\n\t * @param {moment} momentDate Moment instance.\n\t *\n\t * @return {string} Formatted date.\n\t */\n\tI( momentDate ) {\n\t\treturn momentDate.isDST() ? '1' : '0';\n\t},\n\tO: 'ZZ',\n\tP: 'Z',\n\tT: 'z',\n\t/**\n\t * Gets the timezone offset in seconds.\n\t *\n\t * @param {moment} momentDate Moment instance.\n\t *\n\t * @return {string} Formatted date.\n\t */\n\tZ( momentDate ) {\n\t\t// Timezone offset in seconds.\n\t\tconst offset = momentDate.format( 'Z' );\n\t\tconst sign = offset[ 0 ] === '-' ? -1 : 1;\n\t\tconst parts = offset.substring( 1 ).split( ':' );\n\t\treturn sign * ( ( parts[ 0 ] * HOUR_IN_MINUTES ) + parts[ 1 ] ) * MINUTE_IN_SECONDS;\n\t},\n\t// Full date/time\n\tc: 'YYYY-MM-DDTHH:mm:ssZ', // .toISOString\n\tr: 'ddd, D MMM YYYY HH:mm:ss ZZ',\n\tU: 'X',\n};\n\n/**\n * Formats a date. Does not alter the date's timezone.\n *\n * @param {string}                    dateFormat PHP-style formatting string.\n *                                               See php.net/date.\n * @param {(Date|string|moment|null)} dateValue  Date object or string,\n *                                               parsable by moment.js.\n *\n * @return {string} Formatted date.\n */\nexport function format( dateFormat, dateValue = new Date() ) {\n\tlet i, char;\n\tlet newFormat = [];\n\tconst momentDate = momentLib( dateValue );\n\tfor ( i = 0; i < dateFormat.length; i++ ) {\n\t\tchar = dateFormat[ i ];\n\t\t// Is this an escape?\n\t\tif ( '\\\\' === char ) {\n\t\t\t// Add next character, then move on.\n\t\t\ti++;\n\t\t\tnewFormat.push( '[' + dateFormat[ i ] + ']' );\n\t\t\tcontinue;\n\t\t}\n\t\tif ( char in formatMap ) {\n\t\t\tif ( typeof formatMap[ char ] !== 'string' ) {\n\t\t\t\t// If the format is a function, call it.\n\t\t\t\tnewFormat.push( '[' + formatMap[ char ]( momentDate ) + ']' );\n\t\t\t} else {\n\t\t\t\t// Otherwise, add as a formatting string.\n\t\t\t\tnewFormat.push( formatMap[ char ] );\n\t\t\t}\n\t\t} else {\n\t\t\tnewFormat.push( '[' + char + ']' );\n\t\t}\n\t}\n\t// Join with [] between to separate characters, and replace\n\t// unneeded separators with static text.\n\tnewFormat = newFormat.join( '[]' );\n\treturn momentDate.format( newFormat );\n}\n\n/**\n * Formats a date (like `date()` in PHP), in the site's timezone.\n *\n * @param {string}                    dateFormat PHP-style formatting string.\n *                                               See php.net/date.\n * @param {(Date|string|moment|null)} dateValue  Date object or string,\n *                                               parsable by moment.js.\n *\n * @return {string} Formatted date.\n */\nexport function date( dateFormat, dateValue = new Date() ) {\n\tconst offset = settings.timezone.offset * HOUR_IN_MINUTES;\n\tconst dateMoment = momentLib( dateValue ).utcOffset( offset, true );\n\treturn format( dateFormat, dateMoment );\n}\n\n/**\n * Formats a date (like `date()` in PHP), in the UTC timezone.\n *\n * @param {string}                    dateFormat PHP-style formatting string.\n *                                               See php.net/date.\n * @param {(Date|string|moment|null)} dateValue  Date object or string,\n *                                               parsable by moment.js.\n *\n * @return {string} Formatted date.\n */\nexport function gmdate( dateFormat, dateValue = new Date() ) {\n\tconst dateMoment = momentLib( dateValue ).utc();\n\treturn format( dateFormat, dateMoment );\n}\n\n/**\n * Formats a date (like `dateI18n()` in PHP).\n *\n * @param {string}                    dateFormat PHP-style formatting string.\n *                                               See php.net/date.\n * @param {(Date|string|moment|null)} dateValue  Date object or string,\n *                                               parsable by moment.js.\n * @param {boolean}                   gmt        True for GMT/UTC, false for\n *                                               site's timezone.\n *\n * @return {string} Formatted date.\n */\nexport function dateI18n( dateFormat, dateValue = new Date(), gmt = false ) {\n\t// Defaults.\n\tconst offset = gmt ? 0 : settings.timezone.offset * HOUR_IN_MINUTES;\n\t// Convert to moment object.\n\tconst dateMoment = momentLib( dateValue ).utcOffset( offset, true );\n\n\t// Set the locale.\n\tdateMoment.locale( settings.l10n.locale );\n\t// Format and return.\n\treturn format( dateFormat, dateMoment );\n}\n\nsetupWPTimezone();\n"]}