{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/components/block-list/block-invalid-warning.js"],"names":["__","_x","Button","Modal","Component","getBlockType","createBlock","rawHandler","withDispatch","Warning","BlockCompare","BlockInvalidWarning","props","state","compare","onCompare","bind","onCompareClose","setState","convertToHTML","convertToBlocks","convertToClassic","block","hasHTMLBlock","hiddenActions","title","onClick","blockToBlocks","blockToClassic","content","originalContent","blockToHTML","HTML","mode","dispatch","replaceBlock","clientId"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __, _x } from '@wordpress/i18n';\nimport { Button, Modal } from '@wordpress/components';\nimport { Component } from '@wordpress/element';\nimport {\n\tgetBlockType,\n\tcreateBlock,\n\trawHandler,\n} from '@wordpress/blocks';\nimport { withDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport Warning from '../warning';\nimport BlockCompare from '../block-compare';\n\nexport class BlockInvalidWarning extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.state = { compare: false };\n\t\tthis.onCompare = this.onCompare.bind( this );\n\t\tthis.onCompareClose = this.onCompareClose.bind( this );\n\t}\n\n\tonCompare() {\n\t\tthis.setState( { compare: true } );\n\t}\n\n\tonCompareClose() {\n\t\tthis.setState( { compare: false } );\n\t}\n\n\trender() {\n\t\tconst { convertToHTML, convertToBlocks, convertToClassic, block } = this.props;\n\t\tconst hasHTMLBlock = !! getBlockType( 'core/html' );\n\t\tconst { compare } = this.state;\n\t\tconst hiddenActions = [\n\t\t\t{ title: __( 'Convert to Classic Block' ), onClick: convertToClassic },\n\t\t];\n\n\t\tif ( compare ) {\n\t\t\treturn (\n\t\t\t\t<Modal\n\t\t\t\t\ttitle={\n\t\t\t\t\t\t// translators: Dialog title to fix block content\n\t\t\t\t\t\t__( 'Resolve Block' )\n\t\t\t\t\t}\n\t\t\t\t\tonRequestClose={ this.onCompareClose }\n\t\t\t\t\tclassName=\"editor-block-compare\"\n\t\t\t\t>\n\t\t\t\t\t<BlockCompare\n\t\t\t\t\t\tblock={ block }\n\t\t\t\t\t\tonKeep={ convertToHTML }\n\t\t\t\t\t\tonConvert={ convertToBlocks }\n\t\t\t\t\t\tconvertor={ blockToBlocks }\n\t\t\t\t\t\tconvertButtonText={ __( 'Convert to Blocks' ) }\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<Warning\n\t\t\t\tactions={ [\n\t\t\t\t\t<Button key=\"convert\" onClick={ this.onCompare } isLarge isPrimary={ ! hasHTMLBlock }>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// translators: Button to fix block content\n\t\t\t\t\t\t\t_x( 'Resolve', 'imperative verb' )\n\t\t\t\t\t\t}\n\t\t\t\t\t</Button>,\n\t\t\t\t\thasHTMLBlock && (\n\t\t\t\t\t\t<Button key=\"edit\" onClick={ convertToHTML } isLarge isPrimary>\n\t\t\t\t\t\t\t{ __( 'Convert to HTML' ) }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t),\n\t\t\t\t] }\n\t\t\t\tsecondaryActions={ hiddenActions }\n\t\t\t>\n\t\t\t\t{ __( 'This block contains unexpected or invalid content.' ) }\n\t\t\t</Warning>\n\t\t);\n\t}\n}\n\nconst blockToClassic = ( block ) => createBlock( 'core/freeform', {\n\tcontent: block.originalContent,\n} );\nconst blockToHTML = ( block ) => createBlock( 'core/html', {\n\tcontent: block.originalContent,\n} );\nconst blockToBlocks = ( block ) => rawHandler( {\n\tHTML: block.originalContent,\n\tmode: 'BLOCKS',\n} );\n\nexport default withDispatch( ( dispatch, { block } ) => {\n\tconst { replaceBlock } = dispatch( 'core/editor' );\n\n\treturn {\n\t\tconvertToClassic() {\n\t\t\treplaceBlock( block.clientId, blockToClassic( block ) );\n\t\t},\n\t\tconvertToHTML() {\n\t\t\treplaceBlock( block.clientId, blockToHTML( block ) );\n\t\t},\n\t\tconvertToBlocks() {\n\t\t\treplaceBlock( block.clientId, blockToBlocks( block ) );\n\t\t},\n\t};\n} )( BlockInvalidWarning );\n"]}