{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/store/actions.js"],"names":["setupEditor","post","type","resetPost","resetAutosave","updatePost","edits","setupEditorState","blocks","resetBlocks","receiveBlocks","updateBlockAttributes","clientId","attributes","updateBlock","updates","selectBlock","initialPosition","startMultiSelect","stopMultiSelect","multiSelect","start","end","clearSelectedBlock","toggleSelection","isSelectionEnabled","replaceBlocks","clientIds","time","Date","now","replaceBlock","block","createOnMove","rootClientId","moveBlocksDown","moveBlocksUp","moveBlockToPosition","fromRootClientId","toRootClientId","index","insertBlock","insertBlocks","showInsertionPoint","hideInsertionPoint","setTemplateValidity","isValid","synchronizeTemplate","editPost","savePost","options","refreshPost","trashPost","postId","postType","mergeBlocks","firstBlockClientId","secondBlockClientId","autosave","redo","undo","createUndoLevel","removeBlocks","selectPrevious","removeBlock","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","updatePostLock","lock","__experimentalFetchReusableBlocks","id","__experimentalReceiveReusableBlocks","results","__experimentalSaveReusableBlock","__experimentalDeleteReusableBlock","__experimentalUpdateReusableBlockTitle","title","__experimentalConvertBlockToStatic","__experimentalConvertBlockToReusable","insertDefaultBlock","updateBlockListSettings","settings","updateEditorSettings","enablePublishSidebar","disablePublishSidebar","lockPostSaving","lockName","unlockPostSaving","createNotice","status","content","alternative","plugin","version","removeNotice","createSuccessNotice","createInfoNotice","createErrorNotice","createWarningNotice","fetchReusableBlocks","receiveReusableBlocks","saveReusableBlock","deleteReusableBlock","hint","updateReusableBlockTitle","convertBlockToStatic","convertBlockToReusable"],"mappings":"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","sourcesContent":["/**\n * External Dependencies\n */\nimport { partial, castArray } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetDefaultBlockName,\n\tcreateBlock,\n} from '@wordpress/blocks';\nimport deprecated from '@wordpress/deprecated';\nimport { dispatch } from '@wordpress/data';\n\n/**\n * Returns an action object used in signalling that editor has initialized with\n * the specified post object and editor settings.\n *\n * @param {Object} post Post object.\n *\n * @return {Object} Action object.\n */\nexport function setupEditor( post ) {\n\treturn {\n\t\ttype: 'SETUP_EDITOR',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the latest version of the\n * post has been received, either by initialization or save.\n *\n * @param {Object} post Post object.\n *\n * @return {Object} Action object.\n */\nexport function resetPost( post ) {\n\treturn {\n\t\ttype: 'RESET_POST',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the latest autosave of the\n * post has been received, by initialization or autosave.\n *\n * @param {Object} post Autosave post object.\n *\n * @return {Object} Action object.\n */\nexport function resetAutosave( post ) {\n\treturn {\n\t\ttype: 'RESET_AUTOSAVE',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a patch of updates for the\n * latest version of the post have been received.\n *\n * @param {Object} edits Updated post fields.\n *\n * @return {Object} Action object.\n */\nexport function updatePost( edits ) {\n\treturn {\n\t\ttype: 'UPDATE_POST',\n\t\tedits,\n\t};\n}\n\n/**\n * Returns an action object used to setup the editor state when first opening an editor.\n *\n * @param {Object}  post            Post object.\n * @param {Array}   blocks          Array of blocks.\n * @param {Object}  edits           Initial edited attributes object.\n *\n * @return {Object} Action object.\n */\nexport function setupEditorState( post, blocks, edits ) {\n\treturn {\n\t\ttype: 'SETUP_EDITOR_STATE',\n\t\tpost,\n\t\tblocks,\n\t\tedits,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that blocks state should be\n * reset to the specified array of blocks, taking precedence over any other\n * content reflected as an edit in state.\n *\n * @param {Array} blocks Array of blocks.\n *\n * @return {Object} Action object.\n */\nexport function resetBlocks( blocks ) {\n\treturn {\n\t\ttype: 'RESET_BLOCKS',\n\t\tblocks,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that blocks have been received.\n * Unlike resetBlocks, these should be appended to the existing known set, not\n * replacing.\n *\n * @param {Object[]} blocks Array of block objects.\n *\n * @return {Object} Action object.\n */\nexport function receiveBlocks( blocks ) {\n\treturn {\n\t\ttype: 'RECEIVE_BLOCKS',\n\t\tblocks,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block attributes with\n * the specified client ID has been updated.\n *\n * @param {string} clientId   Block client ID.\n * @param {Object} attributes Block attributes to be merged.\n *\n * @return {Object} Action object.\n */\nexport function updateBlockAttributes( clientId, attributes ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK_ATTRIBUTES',\n\t\tclientId,\n\t\tattributes,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID has been updated.\n *\n * @param {string} clientId Block client ID.\n * @param {Object} updates  Block attributes to be merged.\n *\n * @return {Object} Action object.\n */\nexport function updateBlock( clientId, updates ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK',\n\t\tclientId,\n\t\tupdates,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID has been selected, optionally accepting a position\n * value reflecting its selection directionality. An initialPosition of -1\n * reflects a reverse selection.\n *\n * @param {string}  clientId        Block client ID.\n * @param {?number} initialPosition Optional initial position. Pass as -1 to\n *                                  reflect reverse selection.\n *\n * @return {Object} Action object.\n */\nexport function selectBlock( clientId, initialPosition = null ) {\n\treturn {\n\t\ttype: 'SELECT_BLOCK',\n\t\tinitialPosition,\n\t\tclientId,\n\t};\n}\n\nexport function startMultiSelect() {\n\treturn {\n\t\ttype: 'START_MULTI_SELECT',\n\t};\n}\n\nexport function stopMultiSelect() {\n\treturn {\n\t\ttype: 'STOP_MULTI_SELECT',\n\t};\n}\n\nexport function multiSelect( start, end ) {\n\treturn {\n\t\ttype: 'MULTI_SELECT',\n\t\tstart,\n\t\tend,\n\t};\n}\n\nexport function clearSelectedBlock() {\n\treturn {\n\t\ttype: 'CLEAR_SELECTED_BLOCK',\n\t};\n}\n\n/**\n * Returns an action object that enables or disables block selection.\n *\n * @param {boolean} [isSelectionEnabled=true] Whether block selection should\n *                                            be enabled.\n\n * @return {Object} Action object.\n */\nexport function toggleSelection( isSelectionEnabled = true ) {\n\treturn {\n\t\ttype: 'TOGGLE_SELECTION',\n\t\tisSelectionEnabled,\n\t};\n}\n\n/**\n * Returns an action object signalling that a blocks should be replaced with\n * one or more replacement blocks.\n *\n * @param {(string|string[])} clientIds Block client ID(s) to replace.\n * @param {(Object|Object[])} blocks    Replacement block(s).\n *\n * @return {Object} Action object.\n */\nexport function replaceBlocks( clientIds, blocks ) {\n\treturn {\n\t\ttype: 'REPLACE_BLOCKS',\n\t\tclientIds: castArray( clientIds ),\n\t\tblocks: castArray( blocks ),\n\t\ttime: Date.now(),\n\t};\n}\n\n/**\n * Returns an action object signalling that a single block should be replaced\n * with one or more replacement blocks.\n *\n * @param {(string|string[])} clientId Block client ID to replace.\n * @param {(Object|Object[])} block    Replacement block(s).\n *\n * @return {Object} Action object.\n */\nexport function replaceBlock( clientId, block ) {\n\treturn replaceBlocks( clientId, block );\n}\n\n/**\n * Higher-order action creator which, given the action type to dispatch creates\n * an action creator for managing block movement.\n *\n * @param {string} type Action type to dispatch.\n *\n * @return {Function} Action creator.\n */\nfunction createOnMove( type ) {\n\treturn ( clientIds, rootClientId ) => {\n\t\treturn {\n\t\t\tclientIds: castArray( clientIds ),\n\t\t\ttype,\n\t\t\trootClientId,\n\t\t};\n\t};\n}\n\nexport const moveBlocksDown = createOnMove( 'MOVE_BLOCKS_DOWN' );\nexport const moveBlocksUp = createOnMove( 'MOVE_BLOCKS_UP' );\n\n/**\n * Returns an action object signalling that an indexed block should be moved\n * to a new index.\n *\n * @param  {?string} clientId         The client ID of the block.\n * @param  {?string} fromRootClientId Root client ID source.\n * @param  {?string} toRootClientId   Root client ID destination.\n * @param  {number}  index            The index to move the block into.\n *\n * @return {Object} Action object.\n */\nexport function moveBlockToPosition( clientId, fromRootClientId, toRootClientId, index ) {\n\treturn {\n\t\ttype: 'MOVE_BLOCK_TO_POSITION',\n\t\tfromRootClientId,\n\t\ttoRootClientId,\n\t\tclientId,\n\t\tindex,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a single block should be\n * inserted, optionally at a specific index respective a root block list.\n *\n * @param {Object}  block        Block object to insert.\n * @param {?number} index        Index at which block should be inserted.\n * @param {?string} rootClientId Optional root client ID of block list on which\n *                               to insert.\n *\n * @return {Object} Action object.\n */\nexport function insertBlock( block, index, rootClientId ) {\n\treturn insertBlocks( [ block ], index, rootClientId );\n}\n\n/**\n * Returns an action object used in signalling that an array of blocks should\n * be inserted, optionally at a specific index respective a root block list.\n *\n * @param {Object[]} blocks       Block objects to insert.\n * @param {?number}  index        Index at which block should be inserted.\n * @param {?string}  rootClientId Optional root client ID of block list on\n *                                which to insert.\n *\n * @return {Object} Action object.\n */\nexport function insertBlocks( blocks, index, rootClientId ) {\n\treturn {\n\t\ttype: 'INSERT_BLOCKS',\n\t\tblocks: castArray( blocks ),\n\t\tindex,\n\t\trootClientId,\n\t\ttime: Date.now(),\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the insertion point should\n * be shown.\n *\n * @param {?string} rootClientId Optional root client ID of block list on\n *                               which to insert.\n * @param {?number} index        Index at which block should be inserted.\n *\n * @return {Object} Action object.\n */\nexport function showInsertionPoint( rootClientId, index ) {\n\treturn {\n\t\ttype: 'SHOW_INSERTION_POINT',\n\t\trootClientId,\n\t\tindex,\n\t};\n}\n\n/**\n * Returns an action object hiding the insertion point.\n *\n * @return {Object} Action object.\n */\nexport function hideInsertionPoint() {\n\treturn {\n\t\ttype: 'HIDE_INSERTION_POINT',\n\t};\n}\n\n/**\n * Returns an action object resetting the template validity.\n *\n * @param {boolean}  isValid  template validity flag.\n *\n * @return {Object} Action object.\n */\nexport function setTemplateValidity( isValid ) {\n\treturn {\n\t\ttype: 'SET_TEMPLATE_VALIDITY',\n\t\tisValid,\n\t};\n}\n\n/**\n * Returns an action object synchronize the template with the list of blocks\n *\n * @return {Object} Action object.\n */\nexport function synchronizeTemplate() {\n\treturn {\n\t\ttype: 'SYNCHRONIZE_TEMPLATE',\n\t};\n}\n\nexport function editPost( edits ) {\n\treturn {\n\t\ttype: 'EDIT_POST',\n\t\tedits,\n\t};\n}\n\n/**\n * Returns an action object to save the post.\n *\n * @param {Object}  options          Options for the save.\n * @param {boolean} options.autosave Perform an autosave if true.\n *\n * @return {Object} Action object.\n */\nexport function savePost( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE',\n\t\toptions,\n\t};\n}\n\nexport function refreshPost() {\n\treturn {\n\t\ttype: 'REFRESH_POST',\n\t};\n}\n\nexport function trashPost( postId, postType ) {\n\treturn {\n\t\ttype: 'TRASH_POST',\n\t\tpostId,\n\t\tpostType,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that two blocks should be merged\n *\n * @param {string} firstBlockClientId  Client ID of the first block to merge.\n * @param {string} secondBlockClientId Client ID of the second block to merge.\n *\n * @return {Object} Action object.\n */\nexport function mergeBlocks( firstBlockClientId, secondBlockClientId ) {\n\treturn {\n\t\ttype: 'MERGE_BLOCKS',\n\t\tblocks: [ firstBlockClientId, secondBlockClientId ],\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the post should autosave.\n *\n * @return {Object} Action object.\n */\nexport function autosave() {\n\treturn savePost( { autosave: true } );\n}\n\n/**\n * Returns an action object used in signalling that undo history should\n * restore last popped state.\n *\n * @return {Object} Action object.\n */\nexport function redo() {\n\treturn { type: 'REDO' };\n}\n\n/**\n * Returns an action object used in signalling that undo history should pop.\n *\n * @return {Object} Action object.\n */\nexport function undo() {\n\treturn { type: 'UNDO' };\n}\n\n/**\n * Returns an action object used in signalling that undo history record should\n * be created.\n *\n * @return {Object} Action object.\n */\nexport function createUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Returns an action object used in signalling that the blocks corresponding to\n * the set of specified client IDs are to be removed.\n *\n * @param {string|string[]} clientIds      Client IDs of blocks to remove.\n * @param {boolean}         selectPrevious True if the previous block should be\n *                                         selected when a block is removed.\n *\n * @return {Object} Action object.\n */\nexport function removeBlocks( clientIds, selectPrevious = true ) {\n\treturn {\n\t\ttype: 'REMOVE_BLOCKS',\n\t\tclientIds: castArray( clientIds ),\n\t\tselectPrevious,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID is to be removed.\n *\n * @param {string}  clientId       Client ID of block to remove.\n * @param {boolean} selectPrevious True if the previous block should be\n *                                 selected when a block is removed.\n *\n * @return {Object} Action object.\n */\nexport function removeBlock( clientId, selectPrevious ) {\n\treturn removeBlocks( [ clientId ], selectPrevious );\n}\n\n/**\n * Returns an action object used to toggle the block editing mode between\n * visual and HTML modes.\n *\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Action object.\n */\nexport function toggleBlockMode( clientId ) {\n\treturn {\n\t\ttype: 'TOGGLE_BLOCK_MODE',\n\t\tclientId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has begun to type.\n *\n * @return {Object} Action object.\n */\nexport function startTyping() {\n\treturn {\n\t\ttype: 'START_TYPING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has stopped typing.\n *\n * @return {Object} Action object.\n */\nexport function stopTyping() {\n\treturn {\n\t\ttype: 'STOP_TYPING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the caret has entered formatted text.\n *\n * @return {Object} Action object.\n */\nexport function enterFormattedText() {\n\treturn {\n\t\ttype: 'ENTER_FORMATTED_TEXT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user caret has exited formatted text.\n *\n * @return {Object} Action object.\n */\nexport function exitFormattedText() {\n\treturn {\n\t\ttype: 'EXIT_FORMATTED_TEXT',\n\t};\n}\n\n/**\n * Returns an action object used to lock the editor.\n *\n * @param {Object}  lock Details about the post lock status, user, and nonce.\n *\n * @return {Object} Action object.\n */\nexport function updatePostLock( lock ) {\n\treturn {\n\t\ttype: 'UPDATE_POST_LOCK',\n\t\tlock,\n\t};\n}\n\n/**\n * Returns an action object used to fetch a single reusable block or all\n * reusable blocks from the REST API into the store.\n *\n * @param {?string} id If given, only a single reusable block with this ID will\n *                     be fetched.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalFetchReusableBlocks( id ) {\n\treturn {\n\t\ttype: 'FETCH_REUSABLE_BLOCKS',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that reusable blocks have been\n * received. `results` is an array of objects containing:\n *  - `reusableBlock` - Details about how the reusable block is persisted.\n *  - `parsedBlock` - The original block.\n *\n * @param {Object[]} results Reusable blocks received.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveReusableBlocks( results ) {\n\treturn {\n\t\ttype: 'RECEIVE_REUSABLE_BLOCKS',\n\t\tresults,\n\t};\n}\n\n/**\n * Returns an action object used to save a reusable block that's in the store to\n * the REST API.\n *\n * @param {Object} id The ID of the reusable block to save.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalSaveReusableBlock( id ) {\n\treturn {\n\t\ttype: 'SAVE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used to delete a reusable block via the REST API.\n *\n * @param {number} id The ID of the reusable block to delete.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalDeleteReusableBlock( id ) {\n\treturn {\n\t\ttype: 'DELETE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a reusable block's title is\n * to be updated.\n *\n * @param {number} id    The ID of the reusable block to update.\n * @param {string} title The new title.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalUpdateReusableBlockTitle( id, title ) {\n\treturn {\n\t\ttype: 'UPDATE_REUSABLE_BLOCK_TITLE',\n\t\tid,\n\t\ttitle,\n\t};\n}\n\n/**\n * Returns an action object used to convert a reusable block into a static block.\n *\n * @param {string} clientId The client ID of the block to attach.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalConvertBlockToStatic( clientId ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_STATIC',\n\t\tclientId,\n\t};\n}\n\n/**\n * Returns an action object used to convert a static block into a reusable block.\n *\n * @param {string} clientIds The client IDs of the block to detach.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalConvertBlockToReusable( clientIds ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_REUSABLE',\n\t\tclientIds: castArray( clientIds ),\n\t};\n}\n/**\n * Returns an action object used in signalling that a new block of the default\n * type should be added to the block list.\n *\n * @param {?Object} attributes   Optional attributes of the block to assign.\n * @param {?string} rootClientId Optional root client ID of block list on which\n *                               to append.\n * @param {?number} index        Optional index where to insert the default block\n *\n * @return {Object} Action object\n */\nexport function insertDefaultBlock( attributes, rootClientId, index ) {\n\tconst block = createBlock( getDefaultBlockName(), attributes );\n\n\treturn insertBlock( block, index, rootClientId );\n}\n\n/**\n * Returns an action object that changes the nested settings of a given block.\n *\n * @param {string} clientId Client ID of the block whose nested setting are\n *                          being received.\n * @param {Object} settings Object with the new settings for the nested block.\n *\n * @return {Object} Action object\n */\nexport function updateBlockListSettings( clientId, settings ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK_LIST_SETTINGS',\n\t\tclientId,\n\t\tsettings,\n\t};\n}\n\n/*\n * Returns an action object used in signalling that the editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateEditorSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_EDITOR_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has enabled the publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function enablePublishSidebar() {\n\treturn {\n\t\ttype: 'ENABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has disabled the publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function disablePublishSidebar() {\n\treturn {\n\t\ttype: 'DISABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is locked.\n *\n * @param  {string} lockName The lock name.\n *\n * @return {Object} Action object\n */\nexport function lockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is unlocked.\n *\n * @param  {string} lockName The lock name.\n *\n * @return {Object} Action object\n */\nexport function unlockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n//\n// Deprecated\n//\n\nexport function createNotice( status, content, options ) {\n\tdeprecated( 'createNotice action (`core/editor` store)', {\n\t\talternative: 'createNotice action (`core/notices` store)',\n\t\tplugin: 'Gutenberg',\n\t\tversion: '4.4.0',\n\t} );\n\n\tdispatch( 'core/notices' ).createNotice( status, content, options );\n\n\treturn { type: '__INERT__' };\n}\n\nexport function removeNotice( id ) {\n\tdeprecated( 'removeNotice action (`core/editor` store)', {\n\t\talternative: 'removeNotice action (`core/notices` store)',\n\t\tplugin: 'Gutenberg',\n\t\tversion: '4.4.0',\n\t} );\n\n\tdispatch( 'core/notices' ).removeNotice( id );\n\n\treturn { type: '__INERT__' };\n}\n\nexport const createSuccessNotice = partial( createNotice, 'success' );\nexport const createInfoNotice = partial( createNotice, 'info' );\nexport const createErrorNotice = partial( createNotice, 'error' );\nexport const createWarningNotice = partial( createNotice, 'warning' );\n\n//\n// Deprecated\n//\n\nexport function fetchReusableBlocks( id ) {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).fetchReusableBlocks( id )\", {\n\t\talternative: \"wp.data.select( 'core' ).getEntityRecords( 'postType', 'wp_block' )\",\n\t\tplugin: 'Gutenberg',\n\t\tversion: '4.4.0',\n\t} );\n\n\treturn __experimentalFetchReusableBlocks( id );\n}\n\nexport function receiveReusableBlocks( results ) {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).receiveReusableBlocks( results )\", {\n\t\talternative: \"wp.data.select( 'core' ).getEntityRecords( 'postType', 'wp_block' )\",\n\t\tplugin: 'Gutenberg',\n\t\tversion: '4.4.0',\n\t} );\n\n\treturn __experimentalReceiveReusableBlocks( results );\n}\n\nexport function saveReusableBlock( id ) {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).saveReusableBlock( id )\", {\n\t\talternative: \"wp.data.dispatch( 'core' ).saveEntityRecord( 'postType', 'wp_block', reusableBlock )\",\n\t\tplugin: 'Gutenberg',\n\t\tversion: '4.4.0',\n\t} );\n\n\treturn __experimentalSaveReusableBlock( id );\n}\n\nexport function deleteReusableBlock( id ) {\n\tdeprecated( 'deleteReusableBlock action (`core/editor` store)', {\n\t\talternative: '__experimentalDeleteReusableBlock action (`core/edtior` store)',\n\t\tplugin: 'Gutenberg',\n\t\tversion: '4.4.0',\n\t\thint: 'Using experimental APIs is strongly discouraged as they are subject to removal without notice.',\n\t} );\n\n\treturn __experimentalDeleteReusableBlock( id );\n}\n\nexport function updateReusableBlockTitle( id, title ) {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).updateReusableBlockTitle( id, title )\", {\n\t\talternative: \"wp.data.dispatch( 'core' ).saveEntityRecord( 'postType', 'wp_block', reusableBlock )\",\n\t\tplugin: 'Gutenberg',\n\t\tversion: '4.4.0',\n\t} );\n\n\treturn __experimentalUpdateReusableBlockTitle( id, title );\n}\n\nexport function convertBlockToStatic( id ) {\n\tdeprecated( 'convertBlockToStatic action (`core/editor` store)', {\n\t\talternative: '__experimentalConvertBlockToStatic action (`core/edtior` store)',\n\t\tplugin: 'Gutenberg',\n\t\tversion: '4.4.0',\n\t\thint: 'Using experimental APIs is strongly discouraged as they are subject to removal without notice.',\n\t} );\n\n\treturn __experimentalConvertBlockToStatic( id );\n}\n\nexport function convertBlockToReusable( id ) {\n\tdeprecated( 'convertBlockToReusable action (`core/editor` store)', {\n\t\talternative: '__experimentalConvertBlockToReusable action (`core/edtior` store)',\n\t\tplugin: 'Gutenberg',\n\t\tversion: '4.4.0',\n\t\thint: 'Using experimental APIs is strongly discouraged as they are subject to removal without notice.',\n\t} );\n\n\treturn __experimentalConvertBlockToReusable( id );\n}\n"]}