{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/rich-text/src/create.js"],"names":["find","isEmpty","isFormatEqual","createElement","getFormatTypes","LINE_SEPARATOR","OBJECT_REPLACEMENT_CHARACTER","window","Node","TEXT_NODE","ELEMENT_NODE","createEmptyValue","formats","text","simpleFindKey","object","value","key","toFormat","type","attributes","formatType","match","tagName","name","registeredAttributes","unregisteredAttributes","create","element","html","range","multilineTag","multilineWrapperTags","removeNode","unwrapNode","filterString","removeAttribute","length","Array","document","createFromElement","createFromMultilineElement","accumulateSelection","accumulator","node","parentNode","startContainer","startOffset","endContainer","endOffset","currentLength","start","undefined","nodeType","childNodes","end","filterRange","filter","nodeValue","slice","currentWrapperTags","hasChildNodes","filterStringComplete","string","replace","index","nodeName","toLowerCase","lastFormats","lastFormat","format","newFormat","getAttributes","indexOf","unshift","i","formatIndex","push","children","concat","hasAttributes"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\n\nimport { find } from 'lodash';\n\n/**\n * Internal dependencies\n */\n\nimport { isEmpty } from './is-empty';\nimport { isFormatEqual } from './is-format-equal';\nimport { createElement } from './create-element';\nimport { getFormatTypes } from './get-format-types';\nimport {\n\tLINE_SEPARATOR,\n\tOBJECT_REPLACEMENT_CHARACTER,\n} from './special-characters';\n\n/**\n * Browser dependencies\n */\n\nconst { TEXT_NODE, ELEMENT_NODE } = window.Node;\n\nfunction createEmptyValue() {\n\treturn { formats: [], text: '' };\n}\n\nfunction simpleFindKey( object, value ) {\n\tfor ( const key in object ) {\n\t\tif ( object[ key ] === value ) {\n\t\t\treturn key;\n\t\t}\n\t}\n}\n\nfunction toFormat( { type, attributes } ) {\n\tconst formatType = find( getFormatTypes(), ( { match } ) =>\n\t\ttype === match.tagName\n\t);\n\n\tif ( ! formatType ) {\n\t\treturn attributes ? { type, attributes } : { type };\n\t}\n\n\tif ( ! attributes ) {\n\t\treturn { type: formatType.name };\n\t}\n\n\tconst registeredAttributes = {};\n\tconst unregisteredAttributes = {};\n\n\tfor ( const name in attributes ) {\n\t\tconst key = simpleFindKey( formatType.attributes, name );\n\n\t\tif ( key ) {\n\t\t\tregisteredAttributes[ key ] = attributes[ name ];\n\t\t} else {\n\t\t\tunregisteredAttributes[ name ] = attributes[ name ];\n\t\t}\n\t}\n\n\treturn {\n\t\ttype: formatType.name,\n\t\tattributes: registeredAttributes,\n\t\tunregisteredAttributes,\n\t};\n}\n\n/**\n * Create a RichText value from an `Element` tree (DOM), an HTML string or a\n * plain text string, with optionally a `Range` object to set the selection. If\n * called without any input, an empty value will be created. If\n * `multilineTag` is provided, any content of direct children whose type matches\n * `multilineTag` will be separated by two newlines. The optional functions can\n * be used to filter out content.\n *\n * @param {?Object}   $1                      Optional named argements.\n * @param {?Element}  $1.element              Element to create value from.\n * @param {?string}   $1.text                 Text to create value from.\n * @param {?string}   $1.html                 HTML to create value from.\n * @param {?Range}    $1.range                Range to create value from.\n * @param {?string}   $1.multilineTag         Multiline tag if the structure is\n *                                            multiline.\n * @param {?Array}    $1.multilineWrapperTags Tags where lines can be found if\n *                                            nesting is possible.\n * @param {?Function} $1.removeNode           Function to declare whether the\n *                                            given node should be removed.\n * @param {?Function} $1.unwrapNode           Function to declare whether the\n *                                            given node should be unwrapped.\n * @param {?Function} $1.filterString         Function to filter the given\n *                                            string.\n * @param {?Function} $1.removeAttribute      Wether to remove an attribute\n *                                            based on the name.\n *\n * @return {Object} A rich text value.\n */\nexport function create( {\n\telement,\n\ttext,\n\thtml,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\tremoveNode,\n\tunwrapNode,\n\tfilterString,\n\tremoveAttribute,\n} = {} ) {\n\tif ( typeof text === 'string' && text.length > 0 ) {\n\t\treturn {\n\t\t\tformats: Array( text.length ),\n\t\t\ttext: text,\n\t\t};\n\t}\n\n\tif ( typeof html === 'string' && html.length > 0 ) {\n\t\telement = createElement( document, html );\n\t}\n\n\tif ( typeof element !== 'object' ) {\n\t\treturn createEmptyValue();\n\t}\n\n\tif ( ! multilineTag ) {\n\t\treturn createFromElement( {\n\t\t\telement,\n\t\t\trange,\n\t\t\tremoveNode,\n\t\t\tunwrapNode,\n\t\t\tfilterString,\n\t\t\tremoveAttribute,\n\t\t} );\n\t}\n\n\treturn createFromMultilineElement( {\n\t\telement,\n\t\trange,\n\t\tmultilineTag,\n\t\tmultilineWrapperTags,\n\t\tremoveNode,\n\t\tunwrapNode,\n\t\tfilterString,\n\t\tremoveAttribute,\n\t} );\n}\n\n/**\n * Helper to accumulate the value's selection start and end from the current\n * node and range.\n *\n * @param {Object} accumulator Object to accumulate into.\n * @param {Node}   node        Node to create value with.\n * @param {Range}  range       Range to create value with.\n * @param {Object} value       Value that is being accumulated.\n */\nfunction accumulateSelection( accumulator, node, range, value ) {\n\tif ( ! range ) {\n\t\treturn;\n\t}\n\n\tconst { parentNode } = node;\n\tconst { startContainer, startOffset, endContainer, endOffset } = range;\n\tconst currentLength = accumulator.text.length;\n\n\t// Selection can be extracted from value.\n\tif ( value.start !== undefined ) {\n\t\taccumulator.start = currentLength + value.start;\n\t// Range indicates that the current node has selection.\n\t} else if ( node === startContainer && node.nodeType === TEXT_NODE ) {\n\t\taccumulator.start = currentLength + startOffset;\n\t// Range indicates that the current node is selected.\n\t} else if (\n\t\tparentNode === startContainer &&\n\t\tnode === startContainer.childNodes[ startOffset ]\n\t) {\n\t\taccumulator.start = currentLength;\n\t// Range indicates that the selection is after the current node.\n\t} else if (\n\t\tparentNode === startContainer &&\n\t\tnode === startContainer.childNodes[ startOffset - 1 ]\n\t) {\n\t\taccumulator.start = currentLength + value.text.length;\n\t// Fallback if no child inside handled the selection.\n\t} else if ( node === startContainer ) {\n\t\taccumulator.start = currentLength;\n\t}\n\n\t// Selection can be extracted from value.\n\tif ( value.end !== undefined ) {\n\t\taccumulator.end = currentLength + value.end;\n\t// Range indicates that the current node has selection.\n\t} else if ( node === endContainer && node.nodeType === TEXT_NODE ) {\n\t\taccumulator.end = currentLength + endOffset;\n\t// Range indicates that the current node is selected.\n\t} else if (\n\t\tparentNode === endContainer &&\n\t\tnode === endContainer.childNodes[ endOffset - 1 ]\n\t) {\n\t\taccumulator.end = currentLength + value.text.length;\n\t// Range indicates that the selection is before the current node.\n\t} else if (\n\t\tparentNode === endContainer &&\n\t\tnode === endContainer.childNodes[ endOffset ]\n\t) {\n\t\taccumulator.end = currentLength;\n\t// Fallback if no child inside handled the selection.\n\t} else if ( node === endContainer ) {\n\t\taccumulator.end = currentLength + endOffset;\n\t}\n}\n\n/**\n * Adjusts the start and end offsets from a range based on a text filter.\n *\n * @param {Node}     node   Node of which the text should be filtered.\n * @param {Range}    range  The range to filter.\n * @param {Function} filter Function to use to filter the text.\n *\n * @return {?Object} Object containing range properties.\n */\nfunction filterRange( node, range, filter ) {\n\tif ( ! range ) {\n\t\treturn;\n\t}\n\n\tconst { startContainer, endContainer } = range;\n\tlet { startOffset, endOffset } = range;\n\n\tif ( node === startContainer ) {\n\t\tstartOffset = filter( node.nodeValue.slice( 0, startOffset ) ).length;\n\t}\n\n\tif ( node === endContainer ) {\n\t\tendOffset = filter( node.nodeValue.slice( 0, endOffset ) ).length;\n\t}\n\n\treturn { startContainer, startOffset, endContainer, endOffset };\n}\n\n/**\n * Creates a Rich Text value from a DOM element and range.\n *\n * @param {Object}    $1                      Named argements.\n * @param {?Element}  $1.element              Element to create value from.\n * @param {?Range}    $1.range                Range to create value from.\n * @param {?string}   $1.multilineTag         Multiline tag if the structure is\n *                                            multiline.\n * @param {?Array}    $1.multilineWrapperTags Tags where lines can be found if\n *                                            nesting is possible.\n * @param {?Function} $1.removeNode           Function to declare whether the\n *                                            given node should be removed.\n * @param {?Function} $1.unwrapNode           Function to declare whether the\n *                                            given node should be unwrapped.\n * @param {?Function} $1.filterString         Function to filter the given\n *                                            string.\n * @param {?Function} $1.removeAttribute      Wether to remove an attribute\n *                                            based on the name.\n *\n * @return {Object} A rich text value.\n */\nfunction createFromElement( {\n\telement,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\tcurrentWrapperTags = [],\n\tremoveNode,\n\tunwrapNode,\n\tfilterString,\n\tremoveAttribute,\n} ) {\n\tconst accumulator = createEmptyValue();\n\n\tif ( ! element ) {\n\t\treturn accumulator;\n\t}\n\n\tif ( ! element.hasChildNodes() ) {\n\t\taccumulateSelection( accumulator, element, range, createEmptyValue() );\n\t\treturn accumulator;\n\t}\n\n\tconst length = element.childNodes.length;\n\n\t// Remove any line breaks in text nodes. They are not content, but used to\n\t// format the HTML. Line breaks in HTML are stored as BR elements.\n\t// See https://www.w3.org/TR/html5/syntax.html#newlines.\n\tconst filterStringComplete = ( string ) => {\n\t\tstring = string.replace( /[\\r\\n]/g, '' );\n\n\t\tif ( filterString ) {\n\t\t\tstring = filterString( string );\n\t\t}\n\n\t\treturn string;\n\t};\n\n\t// Optimise for speed.\n\tfor ( let index = 0; index < length; index++ ) {\n\t\tconst node = element.childNodes[ index ];\n\t\tconst type = node.nodeName.toLowerCase();\n\n\t\tif ( node.nodeType === TEXT_NODE ) {\n\t\t\tconst text = filterStringComplete( node.nodeValue );\n\t\t\trange = filterRange( node, range, filterStringComplete );\n\t\t\taccumulateSelection( accumulator, node, range, { text } );\n\t\t\taccumulator.text += text;\n\t\t\t// Create a sparse array of the same length as `text`, in which\n\t\t\t// formats can be added.\n\t\t\taccumulator.formats.length += text.length;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( node.nodeType !== ELEMENT_NODE ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (\n\t\t\t( removeNode && removeNode( node ) ) ||\n\t\t\t( unwrapNode && unwrapNode( node ) && ! node.hasChildNodes() )\n\t\t) {\n\t\t\taccumulateSelection( accumulator, node, range, createEmptyValue() );\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( type === 'br' ) {\n\t\t\taccumulateSelection( accumulator, node, range, createEmptyValue() );\n\t\t\taccumulator.text += '\\n';\n\t\t\taccumulator.formats.length += 1;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst lastFormats = accumulator.formats[ accumulator.formats.length - 1 ];\n\t\tconst lastFormat = lastFormats && lastFormats[ lastFormats.length - 1 ];\n\t\tlet format;\n\t\tlet value;\n\n\t\tif ( ! unwrapNode || ! unwrapNode( node ) ) {\n\t\t\tconst newFormat = toFormat( {\n\t\t\t\ttype,\n\t\t\t\tattributes: getAttributes( {\n\t\t\t\t\telement: node,\n\t\t\t\t\tremoveAttribute,\n\t\t\t\t} ),\n\t\t\t} );\n\n\t\t\t// Reuse the last format if it's equal.\n\t\t\tif ( isFormatEqual( newFormat, lastFormat ) ) {\n\t\t\t\tformat = lastFormat;\n\t\t\t} else {\n\t\t\t\tformat = newFormat;\n\t\t\t}\n\t\t}\n\n\t\tif ( multilineWrapperTags && multilineWrapperTags.indexOf( type ) !== -1 ) {\n\t\t\tvalue = createFromMultilineElement( {\n\t\t\t\telement: node,\n\t\t\t\trange,\n\t\t\t\tmultilineTag,\n\t\t\t\tmultilineWrapperTags,\n\t\t\t\tremoveNode,\n\t\t\t\tunwrapNode,\n\t\t\t\tfilterString,\n\t\t\t\tremoveAttribute,\n\t\t\t\tcurrentWrapperTags: [ ...currentWrapperTags, format ],\n\t\t\t} );\n\t\t\tformat = undefined;\n\t\t} else {\n\t\t\tvalue = createFromElement( {\n\t\t\t\telement: node,\n\t\t\t\trange,\n\t\t\t\tmultilineTag,\n\t\t\t\tmultilineWrapperTags,\n\t\t\t\tremoveNode,\n\t\t\t\tunwrapNode,\n\t\t\t\tfilterString,\n\t\t\t\tremoveAttribute,\n\t\t\t} );\n\t\t}\n\n\t\tconst text = value.text;\n\t\tconst start = accumulator.text.length;\n\n\t\taccumulateSelection( accumulator, node, range, value );\n\n\t\t// Don't apply the element as formatting if it has no content.\n\t\tif ( isEmpty( value ) && format && ! format.attributes ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst { formats } = accumulator;\n\n\t\tif ( format && format.attributes && text.length === 0 ) {\n\t\t\tformat.object = true;\n\t\t\taccumulator.text += OBJECT_REPLACEMENT_CHARACTER;\n\n\t\t\tif ( formats[ start ] ) {\n\t\t\t\tformats[ start ].unshift( format );\n\t\t\t} else {\n\t\t\t\tformats[ start ] = [ format ];\n\t\t\t}\n\t\t} else {\n\t\t\taccumulator.text += text;\n\t\t\taccumulator.formats.length += text.length;\n\n\t\t\tlet i = value.formats.length;\n\n\t\t\t// Optimise for speed.\n\t\t\twhile ( i-- ) {\n\t\t\t\tconst formatIndex = start + i;\n\n\t\t\t\tif ( format ) {\n\t\t\t\t\tif ( formats[ formatIndex ] ) {\n\t\t\t\t\t\tformats[ formatIndex ].push( format );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tformats[ formatIndex ] = [ format ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( value.formats[ i ] ) {\n\t\t\t\t\tif ( formats[ formatIndex ] ) {\n\t\t\t\t\t\tformats[ formatIndex ].push( ...value.formats[ i ] );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tformats[ formatIndex ] = value.formats[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn accumulator;\n}\n\n/**\n * Creates a rich text value from a DOM element and range that should be\n * multiline.\n *\n * @param {Object}    $1                      Named argements.\n * @param {?Element}  $1.element              Element to create value from.\n * @param {?Range}    $1.range                Range to create value from.\n * @param {?string}   $1.multilineTag         Multiline tag if the structure is\n *                                            multiline.\n * @param {?Array}    $1.multilineWrapperTags Tags where lines can be found if\n *                                            nesting is possible.\n * @param {?Function} $1.removeNode           Function to declare whether the\n *                                            given node should be removed.\n * @param {?Function} $1.unwrapNode           Function to declare whether the\n *                                            given node should be unwrapped.\n * @param {?Function} $1.filterString         Function to filter the given\n *                                            string.\n * @param {?Function} $1.removeAttribute      Wether to remove an attribute\n *                                            based on the name.\n * @param {boolean}   $1.currentWrapperTags   Whether to prepend a line\n *                                            separator.\n *\n * @return {Object} A rich text value.\n */\nfunction createFromMultilineElement( {\n\telement,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\tremoveNode,\n\tunwrapNode,\n\tfilterString,\n\tremoveAttribute,\n\tcurrentWrapperTags = [],\n} ) {\n\tconst accumulator = createEmptyValue();\n\n\tif ( ! element || ! element.hasChildNodes() ) {\n\t\treturn accumulator;\n\t}\n\n\tconst length = element.children.length;\n\n\t// Optimise for speed.\n\tfor ( let index = 0; index < length; index++ ) {\n\t\tconst node = element.children[ index ];\n\n\t\tif ( node.nodeName.toLowerCase() !== multilineTag ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet value = createFromElement( {\n\t\t\telement: node,\n\t\t\trange,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags,\n\t\t\tcurrentWrapperTags,\n\t\t\tremoveNode,\n\t\t\tunwrapNode,\n\t\t\tfilterString,\n\t\t\tremoveAttribute,\n\t\t} );\n\n\t\t// If a line consists of one single line break (invisible), consider the\n\t\t// line empty, wether this is the browser's doing or not.\n\t\tif ( value.text === '\\n' ) {\n\t\t\tconst start = value.start;\n\t\t\tconst end = value.end;\n\n\t\t\tvalue = createEmptyValue();\n\n\t\t\tif ( start !== undefined ) {\n\t\t\t\tvalue.start = 0;\n\t\t\t}\n\n\t\t\tif ( end !== undefined ) {\n\t\t\t\tvalue.end = 0;\n\t\t\t}\n\t\t}\n\n\t\t// Multiline value text should be separated by a double line break.\n\t\tif ( index !== 0 || currentWrapperTags.length > 0 ) {\n\t\t\tconst formats = currentWrapperTags.length > 0 ? [ currentWrapperTags ] : [ , ];\n\t\t\taccumulator.formats = accumulator.formats.concat( formats );\n\t\t\taccumulator.text += LINE_SEPARATOR;\n\t\t}\n\n\t\taccumulateSelection( accumulator, node, range, value );\n\n\t\taccumulator.formats = accumulator.formats.concat( value.formats );\n\t\taccumulator.text += value.text;\n\t}\n\n\treturn accumulator;\n}\n\n/**\n * Gets the attributes of an element in object shape.\n *\n * @param {Object}    $1                 Named argements.\n * @param {Element}   $1.element         Element to get attributes from.\n * @param {?Function} $1.removeAttribute Wether to remove an attribute based on\n *                                       the name.\n *\n * @return {?Object} Attribute object or `undefined` if the element has no\n *                   attributes.\n */\nfunction getAttributes( {\n\telement,\n\tremoveAttribute,\n} ) {\n\tif ( ! element.hasAttributes() ) {\n\t\treturn;\n\t}\n\n\tconst length = element.attributes.length;\n\tlet accumulator;\n\n\t// Optimise for speed.\n\tfor ( let i = 0; i < length; i++ ) {\n\t\tconst { name, value } = element.attributes[ i ];\n\n\t\tif ( removeAttribute && removeAttribute( name ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\taccumulator = accumulator || {};\n\t\taccumulator[ name ] = value;\n\t}\n\n\treturn accumulator;\n}\n"]}