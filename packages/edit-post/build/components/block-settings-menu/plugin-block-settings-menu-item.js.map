{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/edit-post/src/components/block-settings-menu/plugin-block-settings-menu-item.js"],"names":["isEverySelectedBlockAllowed","selected","allowed","length","shouldRenderItem","selectedBlockNames","allowedBlockNames","Array","isArray","PluginBlockSettingsMenuItem","allowedBlocks","icon","label","onClick","small","role","selectedBlocks","onClose","undefined"],"mappings":";;;;;;;;;;;AAGA;;AAKA;;AACA;;AAKA;;AAdA;;;;AAKA;;;;AAMA;;;AAKA,IAAMA,2BAA2B,GAAG,SAA9BA,2BAA8B,CAAEC,QAAF,EAAYC,OAAZ;AAAA,SAAyB,wBAAYD,QAAZ,EAAsBC,OAAtB,EAAgCC,MAAhC,KAA2C,CAApE;AAAA,CAApC;AAEA;;;;;;;;;;;;;AAWA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAEC,kBAAF,EAAsBC,iBAAtB;AAAA,SAA6C,CAAEC,KAAK,CAACC,OAAN,CAAeF,iBAAf,CAAF,IACrEN,2BAA2B,CAAEK,kBAAF,EAAsBC,iBAAtB,CADH;AAAA,CAAzB;;AAGA,IAAMG,2BAA2B,GAAG,SAA9BA,2BAA8B;AAAA,MAAIC,aAAJ,QAAIA,aAAJ;AAAA,MAAmBC,IAAnB,QAAmBA,IAAnB;AAAA,MAAyBC,KAAzB,QAAyBA,KAAzB;AAAA,MAAgCC,OAAhC,QAAgCA,OAAhC;AAAA,MAAyCC,KAAzC,QAAyCA,KAAzC;AAAA,MAAgDC,IAAhD,QAAgDA,IAAhD;AAAA,SACnC,4BAAC,qCAAD,QACG,iBAAmC;AAAA,QAA/BC,cAA+B,SAA/BA,cAA+B;AAAA,QAAfC,OAAe,SAAfA,OAAe;;AACpC,QAAK,CAAEb,gBAAgB,CAAEY,cAAF,EAAkBN,aAAlB,CAAvB,EAA2D;AAC1D,aAAO,IAAP;AACA;;AACD,WAAS,4BAAC,sBAAD;AACR,MAAA,SAAS,EAAC,qCADF;AAER,MAAA,OAAO,EAAG,sBAASG,OAAT,EAAkBI,OAAlB,CAFF;AAGR,MAAA,IAAI,EAAGN,IAAI,IAAI,eAHP;AAIR,MAAA,KAAK,EAAGG,KAAK,GAAGF,KAAH,GAAWM,SAJhB;AAKR,MAAA,IAAI,EAAGH;AALC,OAON,CAAED,KAAF,IAAWF,KAPL,CAAT;AASA,GAdF,CADmC;AAAA,CAApC;;eAmBeH,2B","sourcesContent":["/**\n * External dependencies\n */\nimport { difference } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { IconButton } from '@wordpress/components';\nimport { compose } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport PluginBlockSettingsMenuGroup from './plugin-block-settings-menu-group';\n\nconst isEverySelectedBlockAllowed = ( selected, allowed ) => difference( selected, allowed ).length === 0;\n\n/**\n * Plugins may want to add an item to the menu either for every block\n * or only for the specific ones provided in the `allowedBlocks` component property.\n *\n * If there are multiple blocks selected the item will be rendered if every block\n * is of one allowed type (not necessarily the same).\n *\n * @param {string[]} selectedBlockNames Array containing the names of the blocks selected\n * @param {string[]} allowedBlockNames Array containing the names of the blocks allowed\n * @return {boolean} Whether the item will be rendered or not.\n */\nconst shouldRenderItem = ( selectedBlockNames, allowedBlockNames ) => ! Array.isArray( allowedBlockNames ) ||\n\tisEverySelectedBlockAllowed( selectedBlockNames, allowedBlockNames );\n\nconst PluginBlockSettingsMenuItem = ( { allowedBlocks, icon, label, onClick, small, role } ) => (\n\t<PluginBlockSettingsMenuGroup>\n\t\t{ ( { selectedBlocks, onClose } ) => {\n\t\t\tif ( ! shouldRenderItem( selectedBlocks, allowedBlocks ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn ( <IconButton\n\t\t\t\tclassName=\"editor-block-settings-menu__control\"\n\t\t\t\tonClick={ compose( onClick, onClose ) }\n\t\t\t\ticon={ icon || 'admin-plugins' }\n\t\t\t\tlabel={ small ? label : undefined }\n\t\t\t\trole={ role }\n\t\t\t>\n\t\t\t\t{ ! small && label }\n\t\t\t</IconButton> );\n\t\t} }\n\t</PluginBlockSettingsMenuGroup>\n);\n\nexport default PluginBlockSettingsMenuItem;\n"]}