{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/store/effects/posts.js"],"names":["BEGIN","COMMIT","REVERT","pick","includes","apiFetch","__","dispatch","dataDispatch","resetAutosave","resetPost","updatePost","getCurrentPost","getPostEdits","getEditedPostContent","getAutosave","getCurrentPostType","isEditedPostAutosaveable","isEditedPostSaveable","isEditedPostNew","POST_UPDATE_TRANSACTION_ID","resolveSelector","SAVE_POST_NOTICE_ID","TRASH_POST_NOTICE_ID","requestPostUpdate","action","store","getState","state","post","isAutosave","options","autosave","isSaveable","edits","status","toSend","content","id","postType","type","optimist","parent","request","path","rest_base","method","data","removeNotice","newPost","reset","isRevision","previousPost","error","requestPostUpdateSuccess","Object","keys","length","publishStatus","isPublished","willPublish","noticeMessage","shouldShowLink","labels","item_reverted_to_draft","publish","item_published","private","item_published_privately","future","item_scheduled","item_updated","actions","push","label","view_item","url","link","createSuccessNotice","requestPostUpdateFailure","code","indexOf","messages","createErrorNotice","trashPost","postId","postTypeSlug","trashPostFailure","message","refreshPost","context"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { BEGIN, COMMIT, REVERT } from 'redux-optimist';\nimport { pick, includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { __ } from '@wordpress/i18n';\n// TODO: Ideally this would be the only dispatch in scope. This requires either\n// refactoring editor actions to yielded controls, or replacing direct dispatch\n// on the editor store with action creators (e.g. `REQUEST_POST_UPDATE_START`).\nimport { dispatch as dataDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\tresetAutosave,\n\tresetPost,\n\tupdatePost,\n} from '../actions';\nimport {\n\tgetCurrentPost,\n\tgetPostEdits,\n\tgetEditedPostContent,\n\tgetAutosave,\n\tgetCurrentPostType,\n\tisEditedPostAutosaveable,\n\tisEditedPostSaveable,\n\tisEditedPostNew,\n\tPOST_UPDATE_TRANSACTION_ID,\n} from '../selectors';\nimport { resolveSelector } from './utils';\n\n/**\n * Module Constants\n */\nexport const SAVE_POST_NOTICE_ID = 'SAVE_POST_NOTICE_ID';\nconst TRASH_POST_NOTICE_ID = 'TRASH_POST_NOTICE_ID';\n\n/**\n * Request Post Update Effect handler\n *\n * @param {Object} action  the fetchReusableBlocks action object.\n * @param {Object} store   Redux Store.\n */\nexport const requestPostUpdate = async ( action, store ) => {\n\tconst { dispatch, getState } = store;\n\tconst state = getState();\n\tconst post = getCurrentPost( state );\n\tconst isAutosave = !! action.options.autosave;\n\n\t// Prevent save if not saveable.\n\tconst isSaveable = isAutosave ? isEditedPostAutosaveable : isEditedPostSaveable;\n\n\tif ( ! isSaveable( state ) ) {\n\t\treturn;\n\t}\n\n\tlet edits = getPostEdits( state );\n\tif ( isAutosave ) {\n\t\tedits = pick( edits, [ 'title', 'content', 'excerpt' ] );\n\t}\n\n\t// New posts (with auto-draft status) must be explicitly assigned draft\n\t// status if there is not already a status assigned in edits (publish).\n\t// Otherwise, they are wrongly left as auto-draft. Status is not always\n\t// respected for autosaves, so it cannot simply be included in the pick\n\t// above. This behavior relies on an assumption that an auto-draft post\n\t// would never be saved by anyone other than the owner of the post, per\n\t// logic within autosaves REST controller to save status field only for\n\t// draft/auto-draft by current user.\n\t//\n\t// See: https://core.trac.wordpress.org/ticket/43316#comment:88\n\t// See: https://core.trac.wordpress.org/ticket/43316#comment:89\n\tif ( isEditedPostNew( state ) ) {\n\t\tedits = { status: 'draft', ...edits };\n\t}\n\n\tlet toSend = {\n\t\t...edits,\n\t\tcontent: getEditedPostContent( state ),\n\t\tid: post.id,\n\t};\n\n\tconst postType = await resolveSelector( 'core', 'getPostType', getCurrentPostType( state ) );\n\n\tdispatch( {\n\t\ttype: 'REQUEST_POST_UPDATE_START',\n\t\toptimist: { type: BEGIN, id: POST_UPDATE_TRANSACTION_ID },\n\t\tisAutosave,\n\t} );\n\n\t// Optimistically apply updates under the assumption that the post\n\t// will be updated. See below logic in success resolution for revert\n\t// if the autosave is applied as a revision.\n\tdispatch( {\n\t\t...updatePost( toSend ),\n\t\toptimist: { id: POST_UPDATE_TRANSACTION_ID },\n\t} );\n\n\tlet request;\n\tif ( isAutosave ) {\n\t\t// Ensure autosaves contain all expected fields, using autosave or\n\t\t// post values as fallback if not otherwise included in edits.\n\t\ttoSend = {\n\t\t\t...pick( post, [ 'title', 'content', 'excerpt' ] ),\n\t\t\t...getAutosave( state ),\n\t\t\t...toSend,\n\t\t\tparent: post.id,\n\t\t};\n\n\t\trequest = apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }/autosaves`,\n\t\t\tmethod: 'POST',\n\t\t\tdata: toSend,\n\t\t} );\n\t} else {\n\t\tdataDispatch( 'core/notices' ).removeNotice( SAVE_POST_NOTICE_ID );\n\t\tdataDispatch( 'core/notices' ).removeNotice( 'autosave-exists' );\n\n\t\trequest = apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }`,\n\t\t\tmethod: 'PUT',\n\t\t\tdata: toSend,\n\t\t} );\n\t}\n\n\ttry {\n\t\tconst newPost = await request;\n\t\tconst reset = isAutosave ? resetAutosave : resetPost;\n\t\tdispatch( reset( newPost ) );\n\n\t\t// An autosave may be processed by the server as a regular save\n\t\t// when its update is requested by the author and the post was\n\t\t// draft or auto-draft.\n\t\tconst isRevision = newPost.id !== post.id;\n\n\t\tdispatch( {\n\t\t\ttype: 'REQUEST_POST_UPDATE_SUCCESS',\n\t\t\tpreviousPost: post,\n\t\t\tpost: newPost,\n\t\t\toptimist: {\n\t\t\t\t// Note: REVERT is not a failure case here. Rather, it\n\t\t\t\t// is simply reversing the assumption that the updates\n\t\t\t\t// were applied to the post proper, such that the post\n\t\t\t\t// treated as having unsaved changes.\n\t\t\t\ttype: isRevision ? REVERT : COMMIT,\n\t\t\t\tid: POST_UPDATE_TRANSACTION_ID,\n\t\t\t},\n\t\t\tisAutosave,\n\t\t\tpostType,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'REQUEST_POST_UPDATE_FAILURE',\n\t\t\toptimist: { type: REVERT, id: POST_UPDATE_TRANSACTION_ID },\n\t\t\tpost,\n\t\t\tedits,\n\t\t\terror,\n\t\t} );\n\t}\n};\n\n/**\n * Request Post Update Success Effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const requestPostUpdateSuccess = ( action, store ) => {\n\tconst { previousPost, post, isAutosave, postType } = action;\n\tconst { dispatch, getState } = store;\n\n\t// TEMPORARY: If edits remain after a save completes, the user must be\n\t// prompted about unsaved changes. This should be refactored as part of\n\t// the `isEditedPostDirty` selector instead.\n\t//\n\t// See: https://github.com/WordPress/gutenberg/issues/7409\n\tif ( Object.keys( getPostEdits( getState() ) ).length ) {\n\t\tdispatch( { type: 'DIRTY_ARTIFICIALLY' } );\n\t}\n\n\t// Autosaves are neither shown a notice nor redirected.\n\tif ( isAutosave ) {\n\t\treturn;\n\t}\n\n\tconst publishStatus = [ 'publish', 'private', 'future' ];\n\tconst isPublished = includes( publishStatus, previousPost.status );\n\tconst willPublish = includes( publishStatus, post.status );\n\n\tlet noticeMessage;\n\tlet shouldShowLink = true;\n\n\tif ( ! isPublished && ! willPublish ) {\n\t\t// If saving a non-published post, don't show notice.\n\t\tnoticeMessage = null;\n\t} else if ( isPublished && ! willPublish ) {\n\t\t// If undoing publish status, show specific notice\n\t\tnoticeMessage = postType.labels.item_reverted_to_draft;\n\t\tshouldShowLink = false;\n\t} else if ( ! isPublished && willPublish ) {\n\t\t// If publishing or scheduling a post, show the corresponding\n\t\t// publish message\n\t\tnoticeMessage = {\n\t\t\tpublish: postType.labels.item_published,\n\t\t\tprivate: postType.labels.item_published_privately,\n\t\t\tfuture: postType.labels.item_scheduled,\n\t\t}[ post.status ];\n\t} else {\n\t\t// Generic fallback notice\n\t\tnoticeMessage = postType.labels.item_updated;\n\t}\n\n\tif ( noticeMessage ) {\n\t\tconst actions = [];\n\t\tif ( shouldShowLink ) {\n\t\t\tactions.push( {\n\t\t\t\tlabel: postType.labels.view_item,\n\t\t\t\turl: post.link,\n\t\t\t} );\n\t\t}\n\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice(\n\t\t\tnoticeMessage,\n\t\t\t{\n\t\t\t\tid: SAVE_POST_NOTICE_ID,\n\t\t\t\tactions,\n\t\t\t}\n\t\t);\n\t}\n};\n\n/**\n * Request Post Update Failure Effect handler\n *\n * @param {Object} action  action object.\n */\nexport const requestPostUpdateFailure = ( action ) => {\n\tconst { post, edits, error } = action;\n\n\tif ( error && 'rest_autosave_no_changes' === error.code ) {\n\t\t// Autosave requested a new autosave, but there were no changes. This shouldn't\n\t\t// result in an error notice for the user.\n\t\treturn;\n\t}\n\n\tconst publishStatus = [ 'publish', 'private', 'future' ];\n\tconst isPublished = publishStatus.indexOf( post.status ) !== -1;\n\t// If the post was being published, we show the corresponding publish error message\n\t// Unless we publish an \"updating failed\" message\n\tconst messages = {\n\t\tpublish: __( 'Publishing failed' ),\n\t\tprivate: __( 'Publishing failed' ),\n\t\tfuture: __( 'Scheduling failed' ),\n\t};\n\tconst noticeMessage = ! isPublished && publishStatus.indexOf( edits.status ) !== -1 ?\n\t\tmessages[ edits.status ] :\n\t\t__( 'Updating failed' );\n\n\tdataDispatch( 'core/notices' ).createErrorNotice( noticeMessage, {\n\t\tid: SAVE_POST_NOTICE_ID,\n\t} );\n};\n\n/**\n * Trash Post Effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const trashPost = async ( action, store ) => {\n\tconst { dispatch, getState } = store;\n\tconst { postId } = action;\n\tconst postTypeSlug = getCurrentPostType( getState() );\n\tconst postType = await resolveSelector( 'core', 'getPostType', postTypeSlug );\n\n\tdataDispatch( 'core/notices' ).removeNotice( TRASH_POST_NOTICE_ID );\n\ttry {\n\t\tawait apiFetch( { path: `/wp/v2/${ postType.rest_base }/${ postId }`, method: 'DELETE' } );\n\t\tconst post = getCurrentPost( getState() );\n\n\t\t// TODO: This should be an updatePost action (updating subsets of post properties),\n\t\t// But right now editPost is tied with change detection.\n\t\tdispatch( resetPost( { ...post, status: 'trash' } ) );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\t...action,\n\t\t\ttype: 'TRASH_POST_FAILURE',\n\t\t\terror,\n\t\t} );\n\t}\n};\n\n/**\n * Trash Post Failure Effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const trashPostFailure = ( action ) => {\n\tconst message = action.error.message && action.error.code !== 'unknown_error' ? action.error.message : __( 'Trashing failed' );\n\tdataDispatch( 'core/notices' ).createErrorNotice( message, {\n\t\tid: TRASH_POST_NOTICE_ID,\n\t} );\n};\n\n/**\n * Refresh Post Effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const refreshPost = async ( action, store ) => {\n\tconst { dispatch, getState } = store;\n\n\tconst state = getState();\n\tconst post = getCurrentPost( state );\n\tconst postTypeSlug = getCurrentPostType( getState() );\n\tconst postType = await resolveSelector( 'core', 'getPostType', postTypeSlug );\n\tconst newPost = await apiFetch( {\n\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }`,\n\t\tdata: { context: 'edit' },\n\t} );\n\tdispatch( resetPost( newPost ) );\n};\n"]}