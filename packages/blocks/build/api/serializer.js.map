{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/blocks/src/api/serializer.js"],"names":["getBlockDefaultClassName","blockName","className","replace","getBlockMenuDefaultClassName","getSaveElement","blockType","attributes","innerBlocks","save","prototype","Component","instance","render","bind","element","props","getSaveContent","getCommentAttributes","result","attributeSchema","key","value","undefined","source","default","serializeAttributes","JSON","stringify","getBlockContent","block","name","saveContent","originalContent","isValid","length","error","getCommentDelimitedContent","rawBlockName","content","serializedAttributes","slice","serializeBlock","saveAttributes","serialize","blocks","map","join"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isEmpty, reduce, isObject, castArray, startsWith } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component, cloneElement, renderToString } from '@wordpress/element';\nimport { hasFilter, applyFilters } from '@wordpress/hooks';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockType,\n\tgetFreeformContentHandlerName,\n\tgetUnregisteredTypeHandlerName,\n} from './registration';\nimport BlockContentProvider from '../block-content-provider';\n\n/**\n * Returns the block's default classname from its name.\n *\n * @param {string} blockName The block name.\n *\n * @return {string} The block's default class.\n */\nexport function getBlockDefaultClassName( blockName ) {\n\t// Generated HTML classes for blocks follow the `wp-block-{name}` nomenclature.\n\t// Blocks provided by WordPress drop the prefixes 'core/' or 'core-' (used in 'core-embed/').\n\tconst className = 'wp-block-' + blockName.replace( /\\//, '-' ).replace( /^core-/, '' );\n\n\treturn applyFilters( 'blocks.getBlockDefaultClassName', className, blockName );\n}\n\n/**\n * Returns the block's default menu item classname from its name.\n *\n * @param {string} blockName The block name.\n *\n * @return {string} The block's default menu item class.\n */\nexport function getBlockMenuDefaultClassName( blockName ) {\n\t// Generated HTML classes for blocks follow the `editor-block-list-item-{name}` nomenclature.\n\t// Blocks provided by WordPress drop the prefixes 'core/' or 'core-' (used in 'core-embed/').\n\tconst className = 'editor-block-list-item-' + blockName.replace( /\\//, '-' ).replace( /^core-/, '' );\n\n\treturn applyFilters( 'blocks.getBlockMenuDefaultClassName', className, blockName );\n}\n\n/**\n * Given a block type containing a save render implementation and attributes, returns the\n * enhanced element to be saved or string when raw HTML expected.\n *\n * @param {Object} blockType   Block type.\n * @param {Object} attributes  Block attributes.\n * @param {?Array} innerBlocks Nested blocks.\n *\n * @return {Object|string} Save element or raw HTML string.\n */\nexport function getSaveElement( blockType, attributes, innerBlocks = [] ) {\n\tlet { save } = blockType;\n\n\t// Component classes are unsupported for save since serialization must\n\t// occur synchronously. For improved interoperability with higher-order\n\t// components which often return component class, emulate basic support.\n\tif ( save.prototype instanceof Component ) {\n\t\tconst instance = new save( { attributes } );\n\t\tsave = instance.render.bind( instance );\n\t}\n\n\tlet element = save( { attributes, innerBlocks } );\n\n\tif ( isObject( element ) && hasFilter( 'blocks.getSaveContent.extraProps' ) ) {\n\t\t/**\n\t\t * Filters the props applied to the block save result element.\n\t\t *\n\t\t * @param {Object}      props      Props applied to save element.\n\t\t * @param {WPBlockType} blockType  Block type definition.\n\t\t * @param {Object}      attributes Block attributes.\n\t\t */\n\t\tconst props = applyFilters(\n\t\t\t'blocks.getSaveContent.extraProps',\n\t\t\t{ ...element.props },\n\t\t\tblockType,\n\t\t\tattributes\n\t\t);\n\n\t\tif ( ! isShallowEqual( props, element.props ) ) {\n\t\t\telement = cloneElement( element, props );\n\t\t}\n\t}\n\n\t/**\n\t * Filters the save result of a block during serialization.\n\t *\n\t * @param {WPElement}   element    Block save result.\n\t * @param {WPBlockType} blockType  Block type definition.\n\t * @param {Object}      attributes Block attributes.\n\t */\n\telement = applyFilters( 'blocks.getSaveElement', element, blockType, attributes );\n\n\treturn (\n\t\t<BlockContentProvider innerBlocks={ innerBlocks }>\n\t\t\t{ element }\n\t\t</BlockContentProvider>\n\t);\n}\n\n/**\n * Given a block type containing a save render implementation and attributes, returns the\n * static markup to be saved.\n *\n * @param {Object} blockType   Block type.\n * @param {Object} attributes  Block attributes.\n * @param {?Array} innerBlocks Nested blocks.\n *\n * @return {string} Save content.\n */\nexport function getSaveContent( blockType, attributes, innerBlocks ) {\n\treturn renderToString( getSaveElement( blockType, attributes, innerBlocks ) );\n}\n\n/**\n * Returns attributes which are to be saved and serialized into the block\n * comment delimiter.\n *\n * When a block exists in memory it contains as its attributes both those\n * parsed the block comment delimiter _and_ those which matched from the\n * contents of the block.\n *\n * This function returns only those attributes which are needed to persist and\n * which cannot be matched from the block content.\n *\n * @param {Object<string,*>} blockType     Block type.\n * @param {Object<string,*>} attributes Attributes from in-memory block data.\n *\n * @return {Object<string,*>} Subset of attributes for comment serialization.\n */\nexport function getCommentAttributes( blockType, attributes ) {\n\treturn reduce( blockType.attributes, ( result, attributeSchema, key ) => {\n\t\tconst value = attributes[ key ];\n\n\t\t// Ignore undefined values.\n\t\tif ( undefined === value ) {\n\t\t\treturn result;\n\t\t}\n\n\t\t// Ignore all attributes but the ones with an \"undefined\" source\n\t\t// \"undefined\" source refers to attributes saved in the block comment.\n\t\tif ( attributeSchema.source !== undefined ) {\n\t\t\treturn result;\n\t\t}\n\n\t\t// Ignore default value.\n\t\tif ( 'default' in attributeSchema && attributeSchema.default === value ) {\n\t\t\treturn result;\n\t\t}\n\n\t\t// Otherwise, include in comment set.\n\t\tresult[ key ] = value;\n\t\treturn result;\n\t}, {} );\n}\n\n/**\n * Given an attributes object, returns a string in the serialized attributes\n * format prepared for post content.\n *\n * @param {Object} attributes Attributes object.\n *\n * @return {string} Serialized attributes.\n */\nexport function serializeAttributes( attributes ) {\n\treturn JSON.stringify( attributes )\n\t\t// Don't break HTML comments.\n\t\t.replace( /--/g, '\\\\u002d\\\\u002d' )\n\n\t\t// Don't break non-standard-compliant tools.\n\t\t.replace( /</g, '\\\\u003c' )\n\t\t.replace( />/g, '\\\\u003e' )\n\t\t.replace( /&/g, '\\\\u0026' )\n\n\t\t// Bypass server stripslashes behavior which would unescape stringify's\n\t\t// escaping of quotation mark.\n\t\t//\n\t\t// See: https://developer.wordpress.org/reference/functions/wp_kses_stripslashes/\n\t\t.replace( /\\\\\"/g, '\\\\u0022' );\n}\n\n/**\n * Given a block object, returns the Block's Inner HTML markup.\n *\n * @param {Object} block Block instance.\n *\n * @return {string} HTML.\n */\nexport function getBlockContent( block ) {\n\t// @todo why not getBlockInnerHtml?\n\tconst blockType = getBlockType( block.name );\n\n\t// If block was parsed as invalid or encounters an error while generating\n\t// save content, use original content instead to avoid content loss. If a\n\t// block contains nested content, exempt it from this condition because we\n\t// otherwise have no access to its original content and content loss would\n\t// still occur.\n\tlet saveContent = block.originalContent;\n\tif ( block.isValid || block.innerBlocks.length ) {\n\t\ttry {\n\t\t\tsaveContent = getSaveContent( blockType, block.attributes, block.innerBlocks );\n\t\t} catch ( error ) {}\n\t}\n\n\treturn saveContent;\n}\n\n/**\n * Returns the content of a block, including comment delimiters.\n *\n * @param {string} rawBlockName Block name.\n * @param {Object} attributes   Block attributes.\n * @param {string} content      Block save content.\n *\n * @return {string} Comment-delimited block content.\n */\nexport function getCommentDelimitedContent( rawBlockName, attributes, content ) {\n\tconst serializedAttributes = ! isEmpty( attributes ) ?\n\t\tserializeAttributes( attributes ) + ' ' :\n\t\t'';\n\n\t// Strip core blocks of their namespace prefix.\n\tconst blockName = startsWith( rawBlockName, 'core/' ) ?\n\t\trawBlockName.slice( 5 ) :\n\t\trawBlockName;\n\n\t// @todo make the `wp:` prefix potentially configurable.\n\n\tif ( ! content ) {\n\t\treturn `<!-- wp:${ blockName } ${ serializedAttributes }/-->`;\n\t}\n\n\treturn (\n\t\t`<!-- wp:${ blockName } ${ serializedAttributes }-->\\n` +\n\t\tcontent +\n\t\t`\\n<!-- /wp:${ blockName } -->`\n\t);\n}\n\n/**\n * Returns the content of a block, including comment delimiters, determining\n * serialized attributes and content form from the current state of the block.\n *\n * @param {Object} block Block instance.\n *\n * @return {string} Serialized block.\n */\nexport function serializeBlock( block ) {\n\tconst blockName = block.name;\n\tconst blockType = getBlockType( blockName );\n\tconst saveContent = getBlockContent( block );\n\tconst saveAttributes = getCommentAttributes( blockType, block.attributes );\n\n\tswitch ( blockName ) {\n\t\tcase getFreeformContentHandlerName():\n\t\tcase getUnregisteredTypeHandlerName():\n\t\t\treturn saveContent;\n\n\t\tdefault:\n\t\t\treturn getCommentDelimitedContent( blockName, saveAttributes, saveContent );\n\t}\n}\n\n/**\n * Takes a block or set of blocks and returns the serialized post content.\n *\n * @param {Array} blocks Block(s) to serialize.\n *\n * @return {string} The post content.\n */\nexport default function serialize( blocks ) {\n\treturn castArray( blocks ).map( serializeBlock ).join( '\\n\\n' );\n}\n"]}