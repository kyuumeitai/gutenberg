{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/hooks/align.js"],"names":["addAttribute","settings","attributes","align","type","getBlockValidAlignments","blockName","blockAlign","Array","isArray","validAlignments","push","withToolbarControls","BlockEdit","props","name","updateAlignment","nextAlign","blockType","blockDefaultAlign","setAttributes","length","isSelected","withDataAlign","BlockListBlock","block","wrapperProps","addAssignedAlign","className"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { assign, get, has, includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { addFilter } from '@wordpress/hooks';\nimport { hasBlockSupport, getBlockSupport, getBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { BlockControls, BlockAlignmentToolbar } from '../components';\n\n/**\n * Filters registered block settings, extending attributes to include `align`.\n *\n * @param  {Object} settings Original block settings\n * @return {Object}          Filtered block settings\n */\nexport function addAttribute( settings ) {\n\t// allow blocks to specify their own attribute definition with default values if needed.\n\tif ( has( settings.attributes, [ 'align', 'type' ] ) ) {\n\t\treturn settings;\n\t}\n\tif ( hasBlockSupport( settings, 'align' ) ) {\n\t\t// Use Lodash's assign to gracefully handle if attributes are undefined\n\t\tsettings.attributes = assign( settings.attributes, {\n\t\t\talign: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t} );\n\t}\n\n\treturn settings;\n}\n\n/**\n * Returns an array of valid alignments for a block type depending on its\n * defined supports. Returns an empty array if block does not support align.\n *\n * @param  {string}   blockName Block name to check\n * @return {string[]}           Valid alignments for block\n */\nexport function getBlockValidAlignments( blockName ) {\n\t// Explicitly defined array set of valid alignments\n\tconst blockAlign = getBlockSupport( blockName, 'align' );\n\tif ( Array.isArray( blockAlign ) ) {\n\t\treturn blockAlign;\n\t}\n\n\tconst validAlignments = [];\n\tif ( true === blockAlign ) {\n\t\t// `true` includes all alignments...\n\t\tvalidAlignments.push( 'left', 'center', 'right' );\n\n\t\tif ( hasBlockSupport( blockName, 'alignWide', true ) ) {\n\t\t\tvalidAlignments.push( 'wide', 'full' );\n\t\t}\n\t}\n\n\treturn validAlignments;\n}\n\n/**\n * Override the default edit UI to include new toolbar controls for block\n * alignment, if block defines support.\n *\n * @param  {Function} BlockEdit Original component\n * @return {Function}           Wrapped component\n */\nexport const withToolbarControls = createHigherOrderComponent( ( BlockEdit ) => {\n\treturn ( props ) => {\n\t\tconst validAlignments = getBlockValidAlignments( props.name );\n\n\t\tconst updateAlignment = ( nextAlign ) => {\n\t\t\tif ( ! nextAlign ) {\n\t\t\t\tconst blockType = getBlockType( props.name );\n\t\t\t\tconst blockDefaultAlign = get( blockType, [ 'attributes', 'align', 'default' ] );\n\t\t\t\tif ( blockDefaultAlign ) {\n\t\t\t\t\tnextAlign = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tprops.setAttributes( { align: nextAlign } );\n\t\t};\n\n\t\treturn [\n\t\t\tvalidAlignments.length > 0 && props.isSelected && (\n\t\t\t\t<BlockControls key=\"align-controls\">\n\t\t\t\t\t<BlockAlignmentToolbar\n\t\t\t\t\t\tvalue={ props.attributes.align }\n\t\t\t\t\t\tonChange={ updateAlignment }\n\t\t\t\t\t\tcontrols={ validAlignments }\n\t\t\t\t\t/>\n\t\t\t\t</BlockControls>\n\t\t\t),\n\t\t\t<BlockEdit key=\"edit\" { ...props } />,\n\t\t];\n\t};\n}, 'withToolbarControls' );\n\n/**\n * Override the default block element to add alignment wrapper props.\n *\n * @param  {Function} BlockListBlock Original component\n * @return {Function}                Wrapped component\n */\nexport const withDataAlign = createHigherOrderComponent( ( BlockListBlock ) => {\n\treturn ( props ) => {\n\t\tconst { align } = props.block.attributes;\n\t\tconst validAlignments = getBlockValidAlignments( props.block.name );\n\n\t\tlet wrapperProps = props.wrapperProps;\n\t\tif ( includes( validAlignments, align ) ) {\n\t\t\twrapperProps = { ...wrapperProps, 'data-align': align };\n\t\t}\n\n\t\treturn <BlockListBlock { ...props } wrapperProps={ wrapperProps } />;\n\t};\n}, 'withDataAlign' );\n\n/**\n * Override props assigned to save component to inject alignment class name if\n * block supports it.\n *\n * @param  {Object} props      Additional props applied to save element\n * @param  {Object} blockType  Block type\n * @param  {Object} attributes Block attributes\n * @return {Object}            Filtered props applied to save element\n */\nexport function addAssignedAlign( props, blockType, attributes ) {\n\tconst { align } = attributes;\n\n\tif ( includes( getBlockValidAlignments( blockType ), align ) ) {\n\t\tprops.className = classnames( `align${ align }`, props.className );\n\t}\n\n\treturn props;\n}\n\naddFilter( 'blocks.registerBlockType', 'core/align/addAttribute', addAttribute );\naddFilter( 'editor.BlockListBlock', 'core/editor/align/with-data-align', withDataAlign );\naddFilter( 'editor.BlockEdit', 'core/editor/align/with-toolbar-controls', withToolbarControls );\naddFilter( 'blocks.getSaveContent.extraProps', 'core/align/addAssignedAlign', addAssignedAlign );\n\n"]}