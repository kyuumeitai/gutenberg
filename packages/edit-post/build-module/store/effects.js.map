{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/edit-post/src/store/effects.js"],"names":["reduce","select","subscribe","dispatch","speak","__","apiFetch","metaBoxUpdatesSuccess","requestMetaBoxUpdates","openGeneralSidebar","closeGeneralSidebar","getActiveMetaBoxLocations","getActiveGeneralSidebarName","getMetaBoxContainer","onChangeListener","effects","SET_META_BOXES_PER_LOCATIONS","action","store","setTimeout","postType","getCurrentPostType","window","postboxes","page","add_postbox_toggles","wasSavingPost","isSavingPost","wasAutosavingPost","isAutosavingPost","hasActiveMetaBoxes","hasMetaBoxes","shouldTriggerMetaboxesSave","REQUEST_META_BOX_UPDATES","state","getState","post","getCurrentPost","additionalData","comment_status","ping_status","sticky","author","filter","Boolean","baseFormData","FormData","document","querySelector","formDataToMerge","map","location","formData","memo","currentFormData","key","value","append","forEach","url","_wpMetaBoxUrl","method","body","parse","then","SWITCH_MODE","mode","clearSelectedBlock","message","INIT","_","getBlockSelectionStart","hasBlockSelection","isEditorSidebarOpened","isMobileViewPort","isViewportMatch","adjustSidebar","sidebarToReOpenOnExpand","isSmall"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { reduce } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { select, subscribe, dispatch } from '@wordpress/data';\nimport { speak } from '@wordpress/a11y';\nimport { __ } from '@wordpress/i18n';\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport {\n\tmetaBoxUpdatesSuccess,\n\trequestMetaBoxUpdates,\n\topenGeneralSidebar,\n\tcloseGeneralSidebar,\n} from './actions';\nimport {\n\tgetActiveMetaBoxLocations,\n\tgetActiveGeneralSidebarName,\n} from './selectors';\nimport { getMetaBoxContainer } from '../utils/meta-boxes';\nimport { onChangeListener } from './utils';\n\nconst effects = {\n\tSET_META_BOXES_PER_LOCATIONS( action, store ) {\n\t\t// Allow toggling metaboxes panels\n\t\t// We need to wait for all scripts to load\n\t\t// If the meta box loads the post script, it will already trigger this.\n\t\t// After merge in Core, make sure to drop the timeout and update the postboxes script\n\t\t// to avoid the double binding.\n\t\tsetTimeout( () => {\n\t\t\tconst postType = select( 'core/editor' ).getCurrentPostType();\n\t\t\tif ( window.postboxes.page !== postType ) {\n\t\t\t\twindow.postboxes.add_postbox_toggles( postType );\n\t\t\t}\n\t\t} );\n\n\t\tlet wasSavingPost = select( 'core/editor' ).isSavingPost();\n\t\tlet wasAutosavingPost = select( 'core/editor' ).isAutosavingPost();\n\t\t// Save metaboxes when performing a full save on the post.\n\t\tsubscribe( () => {\n\t\t\tconst isSavingPost = select( 'core/editor' ).isSavingPost();\n\t\t\tconst isAutosavingPost = select( 'core/editor' ).isAutosavingPost();\n\t\t\tconst hasActiveMetaBoxes = select( 'core/edit-post' ).hasMetaBoxes();\n\n\t\t\t// Save metaboxes on save completion when past save wasn't an autosave.\n\t\t\tconst shouldTriggerMetaboxesSave = (\n\t\t\t\thasActiveMetaBoxes &&\n\t\t\t\twasSavingPost &&\n\t\t\t\t! wasAutosavingPost &&\n\t\t\t\t! isSavingPost &&\n\t\t\t\t! isAutosavingPost\n\t\t\t);\n\n\t\t\t// Save current state for next inspection.\n\t\t\twasSavingPost = isSavingPost;\n\t\t\twasAutosavingPost = isAutosavingPost;\n\n\t\t\tif ( shouldTriggerMetaboxesSave ) {\n\t\t\t\tstore.dispatch( requestMetaBoxUpdates() );\n\t\t\t}\n\t\t} );\n\t},\n\tREQUEST_META_BOX_UPDATES( action, store ) {\n\t\tconst state = store.getState();\n\n\t\t// Additional data needed for backwards compatibility.\n\t\t// If we do not provide this data, the post will be overridden with the default values.\n\t\tconst post = select( 'core/editor' ).getCurrentPost( state );\n\t\tconst additionalData = [\n\t\t\tpost.comment_status ? [ 'comment_status', post.comment_status ] : false,\n\t\t\tpost.ping_status ? [ 'ping_status', post.ping_status ] : false,\n\t\t\tpost.sticky ? [ 'sticky', post.sticky ] : false,\n\t\t\t[ 'post_author', post.author ],\n\t\t].filter( Boolean );\n\n\t\t// We gather all the metaboxes locations data and the base form data\n\t\tconst baseFormData = new window.FormData( document.querySelector( '.metabox-base-form' ) );\n\t\tconst formDataToMerge = [\n\t\t\tbaseFormData,\n\t\t\t...getActiveMetaBoxLocations( state ).map( ( location ) => (\n\t\t\t\tnew window.FormData( getMetaBoxContainer( location ) )\n\t\t\t) ),\n\t\t];\n\n\t\t// Merge all form data objects into a single one.\n\t\tconst formData = reduce( formDataToMerge, ( memo, currentFormData ) => {\n\t\t\tfor ( const [ key, value ] of currentFormData ) {\n\t\t\t\tmemo.append( key, value );\n\t\t\t}\n\t\t\treturn memo;\n\t\t}, new window.FormData() );\n\t\tadditionalData.forEach( ( [ key, value ] ) => formData.append( key, value ) );\n\n\t\t// Save the metaboxes\n\t\tapiFetch( {\n\t\t\turl: window._wpMetaBoxUrl,\n\t\t\tmethod: 'POST',\n\t\t\tbody: formData,\n\t\t\tparse: false,\n\t\t} )\n\t\t\t.then( () => store.dispatch( metaBoxUpdatesSuccess() ) );\n\t},\n\tSWITCH_MODE( action ) {\n\t\t// Unselect blocks when we switch to the code editor.\n\t\tif ( action.mode !== 'visual' ) {\n\t\t\tdispatch( 'core/editor' ).clearSelectedBlock();\n\t\t}\n\n\t\tconst message = action.mode === 'visual' ? __( 'Visual editor selected' ) : __( 'Code editor selected' );\n\t\tspeak( message, 'assertive' );\n\t},\n\tINIT( _, store ) {\n\t\t// Select the block settings tab when the selected block changes\n\t\tsubscribe( onChangeListener(\n\t\t\t() => !! select( 'core/editor' ).getBlockSelectionStart(),\n\t\t\t( hasBlockSelection ) => {\n\t\t\t\tif ( ! select( 'core/edit-post' ).isEditorSidebarOpened() ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( hasBlockSelection ) {\n\t\t\t\t\tstore.dispatch( openGeneralSidebar( 'edit-post/block' ) );\n\t\t\t\t} else {\n\t\t\t\t\tstore.dispatch( openGeneralSidebar( 'edit-post/document' ) );\n\t\t\t\t}\n\t\t\t} )\n\t\t);\n\n\t\tconst isMobileViewPort = () => select( 'core/viewport' ).isViewportMatch( '< medium' );\n\t\tconst adjustSidebar = ( () => {\n\t\t\t// contains the sidebar we close when going to viewport sizes lower than medium.\n\t\t\t// This allows to reopen it when going again to viewport sizes greater than medium.\n\t\t\tlet sidebarToReOpenOnExpand = null;\n\t\t\treturn ( isSmall ) => {\n\t\t\t\tif ( isSmall ) {\n\t\t\t\t\tsidebarToReOpenOnExpand = getActiveGeneralSidebarName( store.getState() );\n\t\t\t\t\tif ( sidebarToReOpenOnExpand ) {\n\t\t\t\t\t\tstore.dispatch( closeGeneralSidebar() );\n\t\t\t\t\t}\n\t\t\t\t} else if ( sidebarToReOpenOnExpand && ! getActiveGeneralSidebarName( store.getState() ) ) {\n\t\t\t\t\tstore.dispatch( openGeneralSidebar( sidebarToReOpenOnExpand ) );\n\t\t\t\t}\n\t\t\t};\n\t\t} )();\n\n\t\tadjustSidebar( isMobileViewPort() );\n\n\t\t// Collapse sidebar when viewport shrinks.\n\t\t// Reopen sidebar it if viewport expands and it was closed because of a previous shrink.\n\t\tsubscribe( onChangeListener( isMobileViewPort, adjustSidebar ) );\n\t},\n\n};\n\nexport default effects;\n"]}