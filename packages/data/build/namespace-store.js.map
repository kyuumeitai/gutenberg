{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/data/src/namespace-store.js"],"names":["createNamespace","key","options","registry","namespaces","reducer","store","actions","selectors","resolvers","createReduxStore","TypeError","mapActions","mapSelectors","fulfillment","getCoreDataFulfillment","result","mapResolvers","getSelectors","getActions","subscribe","listener","lastState","getState","state","hasChanged","enhancers","promise","window","__REDUX_DEVTOOLS_EXTENSION__","push","name","instanceId","createStateSelector","selector","args","createBoundAction","action","dispatch","mapSelector","selectorName","resolver","fulfillSelector","isFulfilled","hasStarted","start","fulfill","finish","mappedResolvers","resolverFulfill","select","hasStartedResolution","startResolution","finishResolution","fulfillWithRegistry","namespace","stores"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { createStore, applyMiddleware } from 'redux';\nimport {\n\tflowRight,\n\tget,\n\tmapValues,\n} from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport promise from './promise-middleware';\nimport createResolversCacheMiddleware from './resolvers-cache-middleware';\n\n/**\n * Creates a namespace object with a store derived from the reducer given.\n *\n * @param {string} key              Identifying string used for namespace and redex dev tools.\n * @param {Object} options          Contains reducer, actions, selectors, and resolvers.\n * @param {Object} registry         Temporary registry reference, required for namespace updates.\n *\n * @return {Object} Store Object.\n */\nexport default function createNamespace( key, options, registry ) {\n\t// TODO: After register[Reducer|Actions|Selectors|Resolvers] are deprecated and removed,\n\t//       this function can be greatly simplified because it should no longer be called to modify\n\t//       a namespace, but only to create one, and only once for each namespace.\n\n\t// TODO: After removing `registry.namespaces`and making stores immutable after create,\n\t//       reducer, store, actinos, selectors, and resolvers can all be removed from here.\n\tlet {\n\t\treducer,\n\t\tstore,\n\t\tactions,\n\t\tselectors,\n\t\tresolvers,\n\t} = registry.namespaces[ key ] || {};\n\n\tif ( options.reducer ) {\n\t\treducer = options.reducer;\n\t\tstore = createReduxStore( reducer, key, registry );\n\t}\n\tif ( options.actions ) {\n\t\tif ( ! store ) {\n\t\t\tthrow new TypeError( 'Cannot specify actions when no reducer is present' );\n\t\t}\n\t\tactions = mapActions( options.actions, store );\n\t}\n\tif ( options.selectors ) {\n\t\tif ( ! store ) {\n\t\t\tthrow new TypeError( 'Cannot specify selectors when no reducer is present' );\n\t\t}\n\t\tselectors = mapSelectors( options.selectors, store );\n\t}\n\tif ( options.resolvers ) {\n\t\tconst fulfillment = getCoreDataFulfillment( registry, key );\n\t\tconst result = mapResolvers( options.resolvers, selectors, fulfillment, store );\n\t\tresolvers = result.resolvers;\n\t\tselectors = result.selectors;\n\t}\n\n\tconst getSelectors = () => selectors;\n\tconst getActions = () => actions;\n\n\t// Customize subscribe behavior to call listeners only on effective change,\n\t// not on every dispatch.\n\tconst subscribe = store && function( listener ) {\n\t\tlet lastState = store.getState();\n\t\tstore.subscribe( () => {\n\t\t\tconst state = store.getState();\n\t\t\tconst hasChanged = state !== lastState;\n\t\t\tlastState = state;\n\n\t\t\tif ( hasChanged ) {\n\t\t\t\tlistener();\n\t\t\t}\n\t\t} );\n\t};\n\n\treturn {\n\t\treducer,\n\t\tstore,\n\t\tactions,\n\t\tselectors,\n\t\tresolvers,\n\t\tgetSelectors,\n\t\tgetActions,\n\t\tsubscribe,\n\t};\n}\n\n/**\n * Creates a redux store for a namespace.\n *\n * @param {Function} reducer    Root reducer for redux store.\n * @param {string} key          Part of the state shape to register the\n *                              selectors for.\n * @param {Object} registry     Registry reference, for resolver enhancer support.\n * @return {Object}             Newly created redux store.\n */\nfunction createReduxStore( reducer, key, registry ) {\n\tconst enhancers = [\n\t\tapplyMiddleware( createResolversCacheMiddleware( registry, key ), promise ),\n\t];\n\tif ( typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ ) {\n\t\tenhancers.push( window.__REDUX_DEVTOOLS_EXTENSION__( { name: key, instanceId: key } ) );\n\t}\n\n\treturn createStore( reducer, flowRight( enhancers ) );\n}\n\n/**\n * Maps selectors to a redux store.\n *\n * @param {Object} selectors  Selectors to register. Keys will be used as the\n *                            public facing API. Selectors will get passed the\n *                            state as first argument.\n * @param {Object} store      The redux store to which the selectors should be mapped.\n * @return {Object}           Selectors mapped to the redux store provided.\n */\nfunction mapSelectors( selectors, store ) {\n\tconst createStateSelector = ( selector ) => ( ...args ) => selector( store.getState(), ...args );\n\treturn mapValues( selectors, createStateSelector );\n}\n\n/**\n * Maps actions to dispatch from a given store.\n *\n * @param {Object} actions    Actions to register.\n * @param {Object} store      The redux store to which the actions should be mapped.\n * @return {Object}           Actions mapped to the redux store provided.\n */\nfunction mapActions( actions, store ) {\n\tconst createBoundAction = ( action ) => ( ...args ) => store.dispatch( action( ...args ) );\n\treturn mapValues( actions, createBoundAction );\n}\n\n/**\n * Returns resolvers with matched selectors for a given namespace.\n * Resolvers are side effects invoked once per argument set of a given selector call,\n * used in ensuring that the data needs for the selector are satisfied.\n *\n * @param {Object} resolvers   Resolvers to register.\n * @param {Object} selectors   The current selectors to be modified.\n * @param {Object} fulfillment Fulfillment implementation functions.\n * @param {Object} store       The redux store to which the resolvers should be mapped.\n * @return {Object}            An object containing updated selectors and resolvers.\n */\nfunction mapResolvers( resolvers, selectors, fulfillment, store ) {\n\tconst mapSelector = ( selector, selectorName ) => {\n\t\tconst resolver = resolvers[ selectorName ];\n\t\tif ( ! resolver ) {\n\t\t\treturn selector;\n\t\t}\n\n\t\treturn ( ...args ) => {\n\t\t\tasync function fulfillSelector() {\n\t\t\t\tconst state = store.getState();\n\t\t\t\tif ( typeof resolver.isFulfilled === 'function' && resolver.isFulfilled( state, ...args ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( fulfillment.hasStarted( selectorName, args ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfulfillment.start( selectorName, args );\n\t\t\t\tawait fulfillment.fulfill( selectorName, ...args );\n\t\t\t\tfulfillment.finish( selectorName, args );\n\t\t\t}\n\n\t\t\tfulfillSelector( ...args );\n\t\t\treturn selector( ...args );\n\t\t};\n\t};\n\n\tconst mappedResolvers = mapValues( resolvers, ( resolver ) => {\n\t\tconst { fulfill: resolverFulfill = resolver } = resolver;\n\t\treturn { ...resolver, fulfill: resolverFulfill };\n\t} );\n\n\treturn {\n\t\tresolvers: mappedResolvers,\n\t\tselectors: mapValues( selectors, mapSelector ),\n\t};\n}\n\n/**\n * Bundles up fulfillment functions for resolvers.\n * @param {Object} registry     Registry reference, for fulfilling via resolvers\n * @param {string} key          Part of the state shape to register the\n *                              selectors for.\n * @return {Object}             An object providing fulfillment functions.\n */\nfunction getCoreDataFulfillment( registry, key ) {\n\tconst { hasStartedResolution } = registry.select( 'core/data' );\n\tconst { startResolution, finishResolution } = registry.dispatch( 'core/data' );\n\n\treturn {\n\t\thasStarted: ( ...args ) => hasStartedResolution( key, ...args ),\n\t\tstart: ( ...args ) => startResolution( key, ...args ),\n\t\tfinish: ( ...args ) => finishResolution( key, ...args ),\n\t\tfulfill: ( ...args ) => fulfillWithRegistry( registry, key, ...args ),\n\t};\n}\n\n/**\n * Calls a resolver given arguments\n *\n * @param {Object} registry     Registry reference, for fulfilling via resolvers\n * @param {string} key          Part of the state shape to register the\n *                              selectors for.\n * @param {string} selectorName Selector name to fulfill.\n * @param {Array} args         Selector Arguments.\n */\nasync function fulfillWithRegistry( registry, key, selectorName, ...args ) {\n\tconst namespace = registry.stores[ key ];\n\tconst resolver = get( namespace, [ 'resolvers', selectorName ] );\n\tif ( ! resolver ) {\n\t\treturn;\n\t}\n\n\tconst action = resolver.fulfill( ...args );\n\tif ( action ) {\n\t\tawait namespace.store.dispatch( action );\n\t}\n}\n"]}