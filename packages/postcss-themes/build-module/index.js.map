{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/postcss-themes/src/index.js"],"names":["postcss","require","module","exports","plugin","options","root","walkRules","rule","themeDecls","hasThemeDecls","walkDecls","decl","themeMatch","value","matched","match","parsed","themeValues","whole","color","colorKey","trim","defaultColor","defaults","replace","Object","entries","themes","forEach","key","colors","previousValue","exec","keys","themeDecl","clone","push","newRule","selector","split","map","subselector","join","append","parent","insertAfter"],"mappings":"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","sourcesContent":["const postcss = require( 'postcss' );\n\nmodule.exports = postcss.plugin( 'postcss-themes', function( options ) {\n\treturn function( root ) {\n\t\troot.walkRules( ( rule ) => {\n\t\t\tconst themeDecls = {};\n\t\t\tlet hasThemeDecls = false;\n\t\t\trule.walkDecls( ( decl ) => {\n\t\t\t\tconst themeMatch = /(theme\\(([^\\)]*)\\))/g;\n\t\t\t\tif ( ! decl.value ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst matched = decl.value.match( themeMatch );\n\t\t\t\tif ( ! matched ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet value = decl.value;\n\t\t\t\tlet parsed;\n\t\t\t\tconst themeValues = {};\n\t\t\t\twhile ( ( parsed = themeMatch.exec( decl.value ) ) !== null ) {\n\t\t\t\t\tconst [ , whole, color ] = parsed;\n\t\t\t\t\tconst colorKey = color.trim();\n\t\t\t\t\tconst defaultColor = options.defaults[ colorKey ];\n\t\t\t\t\tvalue = value.replace( whole, defaultColor );\n\n\t\t\t\t\tObject.entries( options.themes ).forEach( ( [ key, colors ] ) => {\n\t\t\t\t\t\tconst previousValue = themeValues[ key ] ? themeValues[ key ] : decl.value;\n\t\t\t\t\t\tthemeValues[ key ] = previousValue.replace( whole, colors[ colorKey ] );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\thasThemeDecls = true;\n\t\t\t\tdecl.value = value;\n\t\t\t\tObject.keys( options.themes ).forEach( ( key ) => {\n\t\t\t\t\tconst themeDecl = decl.clone();\n\t\t\t\t\tthemeDecl.value = themeValues[ key ];\n\t\t\t\t\tif ( ! themeDecls[ key ] ) {\n\t\t\t\t\t\tthemeDecls[ key ] = [];\n\t\t\t\t\t}\n\t\t\t\t\tthemeDecls[ key ].push( themeDecl );\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tif ( hasThemeDecls ) {\n\t\t\t\tObject.keys( options.themes ).forEach( ( key ) => {\n\t\t\t\t\tconst newRule = postcss.rule( {\n\t\t\t\t\t\tselector: rule.selector.split( ',' ).map(\n\t\t\t\t\t\t\t( subselector ) => 'body.' + key + ' ' + subselector.trim()\n\t\t\t\t\t\t).join( ', ' ),\n\t\t\t\t\t} );\n\t\t\t\t\tthemeDecls[ key ].forEach( ( decl ) => newRule.append( decl ) );\n\t\t\t\t\trule.parent.insertAfter( rule, newRule );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t};\n} );\n"]}