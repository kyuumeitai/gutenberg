{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/core-data/src/resolvers.js"],"names":["getAuthors","getEntityRecord","getEntityRecords","getThemeSupports","getEmbedPreview","find","addQueryArgs","receiveUserQuery","receiveEntityRecords","receiveThemeSupports","receiveEmbedPreview","getKindEntities","apiFetch","path","users","kind","name","key","entities","entity","baseURL","record","query","context","records","Object","values","shouldInvalidate","action","type","invalidateCache","activeThemes","theme_supports","url","embedProxyResponse"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { find } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport {\n\treceiveUserQuery,\n\treceiveEntityRecords,\n\treceiveThemeSupports,\n\treceiveEmbedPreview,\n} from './actions';\nimport { getKindEntities } from './entities';\nimport { apiFetch } from './controls';\n\n/**\n * Requests authors from the REST API.\n */\nexport function* getAuthors() {\n\tconst users = yield apiFetch( { path: '/wp/v2/users/?who=authors&per_page=-1' } );\n\tyield receiveUserQuery( 'authors', users );\n}\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key\n */\nexport function* getEntityRecord( kind, name, key ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\tconst record = yield apiFetch( { path: `${ entity.baseURL }/${ key }?context=edit` } );\n\tyield receiveEntityRecords( kind, name, record );\n}\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind   Entity kind.\n * @param {string}  name   Entity name.\n * @param {Object?} query  Query Object.\n */\nexport function* getEntityRecords( kind, name, query = {} ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\tconst path = addQueryArgs( entity.baseURL, {\n\t\t...query,\n\t\tcontext: 'edit',\n\t} );\n\tconst records = yield apiFetch( { path } );\n\tyield receiveEntityRecords( kind, name, Object.values( records ), query );\n}\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\taction.type === 'RECEIVE_ITEMS' &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests theme supports data from the index.\n */\nexport function* getThemeSupports() {\n\tconst activeThemes = yield apiFetch( { path: '/wp/v2/themes?status=active' } );\n\tyield receiveThemeSupports( activeThemes[ 0 ].theme_supports );\n}\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url   URL to get the preview for.\n */\nexport function* getEmbedPreview( url ) {\n\ttry {\n\t\tconst embedProxyResponse = yield apiFetch( { path: addQueryArgs( '/oembed/1.0/proxy', { url } ) } );\n\t\tyield receiveEmbedPreview( url, embedProxyResponse );\n\t} catch ( error ) {\n\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\tyield receiveEmbedPreview( url, false );\n\t}\n}\n"]}