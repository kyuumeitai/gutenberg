{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/components/post-locked-modal/index.js"],"names":["jQuery","__","sprintf","Modal","Button","withSelect","withDispatch","addQueryArgs","Component","compose","withGlobalEvents","getWPAdminURL","PostPreviewButton","PostLockedModal","arguments","sendPostLock","bind","receivePostLock","releasePostLock","document","on","off","event","data","props","isLocked","activePostLock","postId","lock","post_id","autosave","updatePostLock","received","lock_error","isTakeover","user","avatar","avatar_src","new_lock","postLockUtils","action","_wpnonce","unlockNonce","post_ID","active_post_lock","post","async","url","ajaxUrl","userDisplayName","name","userAvatar","unlockUrl","lockKey","nonce","allPosts","select","getEditorSettings","isPostLocked","isPostLockTakeover","getPostLockUser","getCurrentPostId","getActivePostLock","dispatch","beforeunload"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport jQuery from 'jquery';\n\n/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\nimport { Modal, Button } from '@wordpress/components';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { addQueryArgs } from '@wordpress/url';\nimport { Component } from '@wordpress/element';\nimport { compose, withGlobalEvents } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { getWPAdminURL } from '../../utils/url';\nimport PostPreviewButton from '../post-preview-button';\n\nclass PostLockedModal extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.sendPostLock = this.sendPostLock.bind( this );\n\t\tthis.receivePostLock = this.receivePostLock.bind( this );\n\t\tthis.releasePostLock = this.releasePostLock.bind( this );\n\t}\n\n\tcomponentDidMount() {\n\t\t// Details on these events on the Heartbeat API docs\n\t\t// https://developer.wordpress.org/plugins/javascript/heartbeat-api/\n\t\tjQuery( document )\n\t\t\t.on( 'heartbeat-send.refresh-lock', this.sendPostLock )\n\t\t\t.on( 'heartbeat-tick.refresh-lock', this.receivePostLock );\n\t}\n\n\tcomponentWillUnmount() {\n\t\tjQuery( document )\n\t\t\t.off( 'heartbeat-send.refresh-lock', this.sendPostLock )\n\t\t\t.off( 'heartbeat-tick.refresh-lock', this.receivePostLock );\n\t}\n\n\t/**\n\t * Keep the lock refreshed.\n\t *\n\t * When the user does not send a heartbeat in a heartbeat-tick\n\t * the user is no longer editing and another user can start editing.\n\t *\n\t * @param {Object} event Event.\n\t * @param {Object} data  Data to send in the heartbeat request.\n\t */\n\tsendPostLock( event, data ) {\n\t\tconst { isLocked, activePostLock, postId } = this.props;\n\t\tif ( isLocked ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdata[ 'wp-refresh-post-lock' ] = {\n\t\t\tlock: activePostLock,\n\t\t\tpost_id: postId,\n\t\t};\n\t}\n\n\t/**\n\t * Refresh post locks: update the lock string or show the dialog if somebody has taken over editing.\n\t *\n\t * @param {Object} event Event.\n\t * @param {Object} data  Data received in the heartbeat request\n\t */\n\treceivePostLock( event, data ) {\n\t\tif ( ! data[ 'wp-refresh-post-lock' ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { autosave, updatePostLock } = this.props;\n\t\tconst received = data[ 'wp-refresh-post-lock' ];\n\t\tif ( received.lock_error ) {\n\t\t\t// Auto save and display the takeover modal.\n\t\t\tautosave();\n\t\t\tupdatePostLock( {\n\t\t\t\tisLocked: true,\n\t\t\t\tisTakeover: true,\n\t\t\t\tuser: {\n\t\t\t\t\tavatar: received.lock_error.avatar_src,\n\t\t\t\t},\n\t\t\t} );\n\t\t} else if ( received.new_lock ) {\n\t\t\tupdatePostLock( {\n\t\t\t\tisLocked: false,\n\t\t\t\tactivePostLock: received.new_lock,\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Unlock the post before the window is exited.\n\t */\n\treleasePostLock() {\n\t\tconst { isLocked, activePostLock, postLockUtils, postId } = this.props;\n\t\tif ( isLocked || ! activePostLock ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = {\n\t\t\taction: 'wp-remove-post-lock',\n\t\t\t_wpnonce: postLockUtils.unlockNonce,\n\t\t\tpost_ID: postId,\n\t\t\tactive_post_lock: activePostLock,\n\t\t};\n\n\t\tjQuery.post( {\n\t\t\tasync: false,\n\t\t\turl: postLockUtils.ajaxUrl,\n\t\t\tdata,\n\t\t} );\n\t}\n\n\trender() {\n\t\tconst { user, postId, isLocked, isTakeover, postLockUtils } = this.props;\n\t\tif ( ! isLocked ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst userDisplayName = user.name;\n\t\tconst userAvatar = user.avatar;\n\n\t\tconst unlockUrl = addQueryArgs( 'post.php', {\n\t\t\t'get-post-lock': '1',\n\t\t\tlockKey: true,\n\t\t\tpost: postId,\n\t\t\taction: 'edit',\n\t\t\t_wpnonce: postLockUtils.nonce,\n\t\t} );\n\t\tconst allPosts = getWPAdminURL( 'edit.php' );\n\t\treturn (\n\t\t\t<Modal\n\t\t\t\ttitle={ isTakeover ? __( 'Someone else has taken over this post.' ) : __( 'This post is already being edited.' ) }\n\t\t\t\tfocusOnMount={ true }\n\t\t\t\tshouldCloseOnClickOutside={ false }\n\t\t\t\tshouldCloseOnEsc={ false }\n\t\t\t\tisDismissable={ false }\n\t\t\t\tclassName=\"editor-post-locked-modal\"\n\t\t\t>\n\t\t\t\t{ !! userAvatar && (\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={ userAvatar }\n\t\t\t\t\t\talt={ __( 'Avatar' ) }\n\t\t\t\t\t\tclassName=\"editor-post-locked-modal__avatar\"\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t\t{ !! isTakeover && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{ userDisplayName ?\n\t\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\t\t/* translators: 'post' is generic and may be of any type (post, page, etc.). */\n\t\t\t\t\t\t\t\t\t__( '%s now has editing control of this post. Don\\'t worry, your changes up to this moment have been saved' ),\n\t\t\t\t\t\t\t\t\tuserDisplayName\n\t\t\t\t\t\t\t\t) :\n\t\t\t\t\t\t\t\t/* translators: 'post' is generic and may be of any type (post, page, etc.). */\n\t\t\t\t\t\t\t\t__( 'Another user now has editing control of this post. Don\\'t worry, your changes up to this moment have been saved' )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<a href={ allPosts }>\n\t\t\t\t\t\t\t\t{ __( 'View all posts' ) }\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t) }\n\t\t\t\t{ ! isTakeover && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{ userDisplayName ?\n\t\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\t\t/* translators: 'post' is generic and may be of any type (post, page, etc.). */\n\t\t\t\t\t\t\t\t\t__( '%s is currently working on this post, which means you cannot make changes, unless you take over.' ),\n\t\t\t\t\t\t\t\t\tuserDisplayName\n\t\t\t\t\t\t\t\t) :\n\t\t\t\t\t\t\t\t/* translators: 'post' is generic and may be of any type (post, page, etc.). */\n\t\t\t\t\t\t\t\t__( 'Another user is currently working on this post, which means you cannot make changes, unless you take over.' )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"editor-post-locked-modal__buttons\">\n\t\t\t\t\t\t\t<Button isDefault isLarge href={ allPosts }>\n\t\t\t\t\t\t\t\t{ __( 'All Posts' ) }\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<PostPreviewButton />\n\t\t\t\t\t\t\t<Button isPrimary isLarge href={ unlockUrl }>\n\t\t\t\t\t\t\t\t{ __( 'Take Over' ) }\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t) }\n\t\t\t</Modal>\n\t\t);\n\t}\n}\n\nexport default compose(\n\twithSelect( ( select ) => {\n\t\tconst {\n\t\t\tgetEditorSettings,\n\t\t\tisPostLocked,\n\t\t\tisPostLockTakeover,\n\t\t\tgetPostLockUser,\n\t\t\tgetCurrentPostId,\n\t\t\tgetActivePostLock,\n\t\t} = select( 'core/editor' );\n\t\treturn {\n\t\t\tisLocked: isPostLocked(),\n\t\t\tisTakeover: isPostLockTakeover(),\n\t\t\tuser: getPostLockUser(),\n\t\t\tpostId: getCurrentPostId(),\n\t\t\tpostLockUtils: getEditorSettings().postLockUtils,\n\t\t\tactivePostLock: getActivePostLock(),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\tconst { autosave, updatePostLock } = dispatch( 'core/editor' );\n\t\treturn {\n\t\t\tautosave,\n\t\t\tupdatePostLock,\n\t\t};\n\t} ),\n\twithGlobalEvents( {\n\t\tbeforeunload: 'releasePostLock',\n\t} )\n)( PostLockedModal );\n"]}