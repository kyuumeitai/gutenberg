{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/store/effects/posts.js"],"names":["SAVE_POST_NOTICE_ID","TRASH_POST_NOTICE_ID","requestPostUpdate","action","store","dispatch","getState","state","post","isAutosave","options","autosave","isSaveable","isEditedPostAutosaveable","isEditedPostSaveable","edits","status","toSend","content","id","postType","type","optimist","BEGIN","POST_UPDATE_TRANSACTION_ID","parent","request","path","rest_base","method","data","removeNotice","newPost","reset","resetAutosave","resetPost","isRevision","previousPost","REVERT","COMMIT","error","requestPostUpdateSuccess","Object","keys","length","publishStatus","isPublished","willPublish","noticeMessage","shouldShowLink","labels","item_reverted_to_draft","publish","item_published","private","item_published_privately","future","item_scheduled","item_updated","actions","push","label","view_item","url","link","createSuccessNotice","requestPostUpdateFailure","code","indexOf","messages","createErrorNotice","trashPost","postId","postTypeSlug","trashPostFailure","message","refreshPost","context"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { BEGIN, COMMIT, REVERT } from 'redux-optimist';\nimport { pick, includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { __ } from '@wordpress/i18n';\n// TODO: Ideally this would be the only dispatch in scope. This requires either\n// refactoring editor actions to yielded controls, or replacing direct dispatch\n// on the editor store with action creators (e.g. `REQUEST_POST_UPDATE_START`).\nimport { dispatch as dataDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\tresetAutosave,\n\tresetPost,\n\tupdatePost,\n} from '../actions';\nimport {\n\tgetCurrentPost,\n\tgetPostEdits,\n\tgetEditedPostContent,\n\tgetAutosave,\n\tgetCurrentPostType,\n\tisEditedPostAutosaveable,\n\tisEditedPostSaveable,\n\tisEditedPostNew,\n\tPOST_UPDATE_TRANSACTION_ID,\n} from '../selectors';\nimport { resolveSelector } from './utils';\n\n/**\n * Module Constants\n */\nexport const SAVE_POST_NOTICE_ID = 'SAVE_POST_NOTICE_ID';\nconst TRASH_POST_NOTICE_ID = 'TRASH_POST_NOTICE_ID';\n\n/**\n * Request Post Update Effect handler\n *\n * @param {Object} action  the fetchReusableBlocks action object.\n * @param {Object} store   Redux Store.\n */\nexport const requestPostUpdate = async ( action, store ) => {\n\tconst { dispatch, getState } = store;\n\tconst state = getState();\n\tconst post = getCurrentPost( state );\n\tconst isAutosave = !! action.options.autosave;\n\n\t// Prevent save if not saveable.\n\tconst isSaveable = isAutosave ? isEditedPostAutosaveable : isEditedPostSaveable;\n\n\tif ( ! isSaveable( state ) ) {\n\t\treturn;\n\t}\n\n\tlet edits = getPostEdits( state );\n\tif ( isAutosave ) {\n\t\tedits = pick( edits, [ 'title', 'content', 'excerpt' ] );\n\t}\n\n\t// New posts (with auto-draft status) must be explicitly assigned draft\n\t// status if there is not already a status assigned in edits (publish).\n\t// Otherwise, they are wrongly left as auto-draft. Status is not always\n\t// respected for autosaves, so it cannot simply be included in the pick\n\t// above. This behavior relies on an assumption that an auto-draft post\n\t// would never be saved by anyone other than the owner of the post, per\n\t// logic within autosaves REST controller to save status field only for\n\t// draft/auto-draft by current user.\n\t//\n\t// See: https://core.trac.wordpress.org/ticket/43316#comment:88\n\t// See: https://core.trac.wordpress.org/ticket/43316#comment:89\n\tif ( isEditedPostNew( state ) ) {\n\t\tedits = { status: 'draft', ...edits };\n\t}\n\n\tlet toSend = {\n\t\t...edits,\n\t\tcontent: getEditedPostContent( state ),\n\t\tid: post.id,\n\t};\n\n\tconst postType = await resolveSelector( 'core', 'getPostType', getCurrentPostType( state ) );\n\n\tdispatch( {\n\t\ttype: 'REQUEST_POST_UPDATE_START',\n\t\toptimist: { type: BEGIN, id: POST_UPDATE_TRANSACTION_ID },\n\t\tisAutosave,\n\t} );\n\n\t// Optimistically apply updates under the assumption that the post\n\t// will be updated. See below logic in success resolution for revert\n\t// if the autosave is applied as a revision.\n\tdispatch( {\n\t\t...updatePost( toSend ),\n\t\toptimist: { id: POST_UPDATE_TRANSACTION_ID },\n\t} );\n\n\tlet request;\n\tif ( isAutosave ) {\n\t\t// Ensure autosaves contain all expected fields, using autosave or\n\t\t// post values as fallback if not otherwise included in edits.\n\t\ttoSend = {\n\t\t\t...pick( post, [ 'title', 'content', 'excerpt' ] ),\n\t\t\t...getAutosave( state ),\n\t\t\t...toSend,\n\t\t\tparent: post.id,\n\t\t};\n\n\t\trequest = apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }/autosaves`,\n\t\t\tmethod: 'POST',\n\t\t\tdata: toSend,\n\t\t} );\n\t} else {\n\t\tdataDispatch( 'core/notices' ).removeNotice( SAVE_POST_NOTICE_ID );\n\t\tdataDispatch( 'core/notices' ).removeNotice( 'autosave-exists' );\n\n\t\trequest = apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }`,\n\t\t\tmethod: 'PUT',\n\t\t\tdata: toSend,\n\t\t} );\n\t}\n\n\ttry {\n\t\tconst newPost = await request;\n\t\tconst reset = isAutosave ? resetAutosave : resetPost;\n\t\tdispatch( reset( newPost ) );\n\n\t\t// An autosave may be processed by the server as a regular save\n\t\t// when its update is requested by the author and the post was\n\t\t// draft or auto-draft.\n\t\tconst isRevision = newPost.id !== post.id;\n\n\t\tdispatch( {\n\t\t\ttype: 'REQUEST_POST_UPDATE_SUCCESS',\n\t\t\tpreviousPost: post,\n\t\t\tpost: newPost,\n\t\t\toptimist: {\n\t\t\t\t// Note: REVERT is not a failure case here. Rather, it\n\t\t\t\t// is simply reversing the assumption that the updates\n\t\t\t\t// were applied to the post proper, such that the post\n\t\t\t\t// treated as having unsaved changes.\n\t\t\t\ttype: isRevision ? REVERT : COMMIT,\n\t\t\t\tid: POST_UPDATE_TRANSACTION_ID,\n\t\t\t},\n\t\t\tisAutosave,\n\t\t\tpostType,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'REQUEST_POST_UPDATE_FAILURE',\n\t\t\toptimist: { type: REVERT, id: POST_UPDATE_TRANSACTION_ID },\n\t\t\tpost,\n\t\t\tedits,\n\t\t\terror,\n\t\t} );\n\t}\n};\n\n/**\n * Request Post Update Success Effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const requestPostUpdateSuccess = ( action, store ) => {\n\tconst { previousPost, post, isAutosave, postType } = action;\n\tconst { dispatch, getState } = store;\n\n\t// TEMPORARY: If edits remain after a save completes, the user must be\n\t// prompted about unsaved changes. This should be refactored as part of\n\t// the `isEditedPostDirty` selector instead.\n\t//\n\t// See: https://github.com/WordPress/gutenberg/issues/7409\n\tif ( Object.keys( getPostEdits( getState() ) ).length ) {\n\t\tdispatch( { type: 'DIRTY_ARTIFICIALLY' } );\n\t}\n\n\t// Autosaves are neither shown a notice nor redirected.\n\tif ( isAutosave ) {\n\t\treturn;\n\t}\n\n\tconst publishStatus = [ 'publish', 'private', 'future' ];\n\tconst isPublished = includes( publishStatus, previousPost.status );\n\tconst willPublish = includes( publishStatus, post.status );\n\n\tlet noticeMessage;\n\tlet shouldShowLink = true;\n\n\tif ( ! isPublished && ! willPublish ) {\n\t\t// If saving a non-published post, don't show notice.\n\t\tnoticeMessage = null;\n\t} else if ( isPublished && ! willPublish ) {\n\t\t// If undoing publish status, show specific notice\n\t\tnoticeMessage = postType.labels.item_reverted_to_draft;\n\t\tshouldShowLink = false;\n\t} else if ( ! isPublished && willPublish ) {\n\t\t// If publishing or scheduling a post, show the corresponding\n\t\t// publish message\n\t\tnoticeMessage = {\n\t\t\tpublish: postType.labels.item_published,\n\t\t\tprivate: postType.labels.item_published_privately,\n\t\t\tfuture: postType.labels.item_scheduled,\n\t\t}[ post.status ];\n\t} else {\n\t\t// Generic fallback notice\n\t\tnoticeMessage = postType.labels.item_updated;\n\t}\n\n\tif ( noticeMessage ) {\n\t\tconst actions = [];\n\t\tif ( shouldShowLink ) {\n\t\t\tactions.push( {\n\t\t\t\tlabel: postType.labels.view_item,\n\t\t\t\turl: post.link,\n\t\t\t} );\n\t\t}\n\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice(\n\t\t\tnoticeMessage,\n\t\t\t{\n\t\t\t\tid: SAVE_POST_NOTICE_ID,\n\t\t\t\tactions,\n\t\t\t}\n\t\t);\n\t}\n};\n\n/**\n * Request Post Update Failure Effect handler\n *\n * @param {Object} action  action object.\n */\nexport const requestPostUpdateFailure = ( action ) => {\n\tconst { post, edits, error } = action;\n\n\tif ( error && 'rest_autosave_no_changes' === error.code ) {\n\t\t// Autosave requested a new autosave, but there were no changes. This shouldn't\n\t\t// result in an error notice for the user.\n\t\treturn;\n\t}\n\n\tconst publishStatus = [ 'publish', 'private', 'future' ];\n\tconst isPublished = publishStatus.indexOf( post.status ) !== -1;\n\t// If the post was being published, we show the corresponding publish error message\n\t// Unless we publish an \"updating failed\" message\n\tconst messages = {\n\t\tpublish: __( 'Publishing failed' ),\n\t\tprivate: __( 'Publishing failed' ),\n\t\tfuture: __( 'Scheduling failed' ),\n\t};\n\tconst noticeMessage = ! isPublished && publishStatus.indexOf( edits.status ) !== -1 ?\n\t\tmessages[ edits.status ] :\n\t\t__( 'Updating failed' );\n\n\tdataDispatch( 'core/notices' ).createErrorNotice( noticeMessage, {\n\t\tid: SAVE_POST_NOTICE_ID,\n\t} );\n};\n\n/**\n * Trash Post Effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const trashPost = async ( action, store ) => {\n\tconst { dispatch, getState } = store;\n\tconst { postId } = action;\n\tconst postTypeSlug = getCurrentPostType( getState() );\n\tconst postType = await resolveSelector( 'core', 'getPostType', postTypeSlug );\n\n\tdataDispatch( 'core/notices' ).removeNotice( TRASH_POST_NOTICE_ID );\n\ttry {\n\t\tawait apiFetch( { path: `/wp/v2/${ postType.rest_base }/${ postId }`, method: 'DELETE' } );\n\t\tconst post = getCurrentPost( getState() );\n\n\t\t// TODO: This should be an updatePost action (updating subsets of post properties),\n\t\t// But right now editPost is tied with change detection.\n\t\tdispatch( resetPost( { ...post, status: 'trash' } ) );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\t...action,\n\t\t\ttype: 'TRASH_POST_FAILURE',\n\t\t\terror,\n\t\t} );\n\t}\n};\n\n/**\n * Trash Post Failure Effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const trashPostFailure = ( action ) => {\n\tconst message = action.error.message && action.error.code !== 'unknown_error' ? action.error.message : __( 'Trashing failed' );\n\tdataDispatch( 'core/notices' ).createErrorNotice( message, {\n\t\tid: TRASH_POST_NOTICE_ID,\n\t} );\n};\n\n/**\n * Refresh Post Effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const refreshPost = async ( action, store ) => {\n\tconst { dispatch, getState } = store;\n\n\tconst state = getState();\n\tconst post = getCurrentPost( state );\n\tconst postTypeSlug = getCurrentPostType( getState() );\n\tconst postType = await resolveSelector( 'core', 'getPostType', postTypeSlug );\n\tconst newPost = await apiFetch( {\n\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }`,\n\t\tdata: { context: 'edit' },\n\t} );\n\tdispatch( resetPost( newPost ) );\n};\n"]}