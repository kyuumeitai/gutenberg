{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/store/effects/reusable-blocks.js"],"names":["castArray","map","uniqueId","BEGIN","COMMIT","REVERT","apiFetch","parse","serialize","createBlock","isReusableBlock","cloneBlock","__","dispatch","dataDispatch","resolveSelector","__experimentalReceiveReusableBlocks","receiveReusableBlocksAction","removeBlocks","replaceBlocks","receiveBlocks","__experimentalSaveReusableBlock","saveReusableBlock","__experimentalGetReusableBlock","getReusableBlock","getBlock","getBlocks","getBlocksByClientId","getPostRawValue","REUSABLE_BLOCK_NOTICE_ID","fetchReusableBlocks","action","store","id","postType","result","path","rest_base","reusableBlockOrBlocks","post","parsedBlocks","content","raw","reusableBlock","title","parsedBlock","length","type","error","saveReusableBlocks","state","getState","clientId","isTemporary","name","innerBlocks","data","status","method","updatedReusableBlock","updatedId","message","createSuccessNotice","createErrorNotice","deleteReusableBlocks","allBlocks","associatedBlocks","filter","block","attributes","ref","associatedBlockClientIds","transactionId","optimist","receiveReusableBlocks","results","convertBlockToStatic","oldBlock","referencedBlock","newBlocks","innerBlock","convertBlockToReusable","clientIds"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray, map, uniqueId } from 'lodash';\nimport { BEGIN, COMMIT, REVERT } from 'redux-optimist';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport {\n\tparse,\n\tserialize,\n\tcreateBlock,\n\tisReusableBlock,\n\tcloneBlock,\n} from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n// TODO: Ideally this would be the only dispatch in scope. This requires either\n// refactoring editor actions to yielded controls, or replacing direct dispatch\n// on the editor store with action creators (e.g. `REMOVE_REUSABLE_BLOCK`).\nimport { dispatch as dataDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { resolveSelector } from './utils';\nimport {\n\t__experimentalReceiveReusableBlocks as receiveReusableBlocksAction,\n\tremoveBlocks,\n\treplaceBlocks,\n\treceiveBlocks,\n\t__experimentalSaveReusableBlock as saveReusableBlock,\n} from '../actions';\nimport {\n\t__experimentalGetReusableBlock as getReusableBlock,\n\tgetBlock,\n\tgetBlocks,\n\tgetBlocksByClientId,\n} from '../selectors';\nimport { getPostRawValue } from '../reducer';\n\n/**\n * Module Constants\n */\nconst REUSABLE_BLOCK_NOTICE_ID = 'REUSABLE_BLOCK_NOTICE_ID';\n\n/**\n * Fetch Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const fetchReusableBlocks = async ( action, store ) => {\n\tconst { id } = action;\n\tconst { dispatch } = store;\n\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await resolveSelector( 'core', 'getPostType', 'wp_block' );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tlet result;\n\tif ( id ) {\n\t\tresult = apiFetch( { path: `/wp/v2/${ postType.rest_base }/${ id }?context=edit` } );\n\t} else {\n\t\tresult = apiFetch( { path: `/wp/v2/${ postType.rest_base }?per_page=-1&context=edit` } );\n\t}\n\n\ttry {\n\t\tconst reusableBlockOrBlocks = await result;\n\t\tdispatch( receiveReusableBlocksAction( map(\n\t\t\tcastArray( reusableBlockOrBlocks ),\n\t\t\t( post ) => {\n\t\t\t\tconst parsedBlocks = parse( post.content.raw );\n\t\t\t\treturn {\n\t\t\t\t\treusableBlock: {\n\t\t\t\t\t\tid: post.id,\n\t\t\t\t\t\ttitle: getPostRawValue( post.title ),\n\t\t\t\t\t},\n\t\t\t\t\tparsedBlock: parsedBlocks.length === 1 ?\n\t\t\t\t\t\tparsedBlocks[ 0 ] :\n\t\t\t\t\t\tcreateBlock( 'core/template', {}, parsedBlocks ),\n\t\t\t\t};\n\t\t\t}\n\t\t) ) );\n\n\t\tdispatch( {\n\t\t\ttype: 'FETCH_REUSABLE_BLOCKS_SUCCESS',\n\t\t\tid,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'FETCH_REUSABLE_BLOCKS_FAILURE',\n\t\t\tid,\n\t\t\terror,\n\t\t} );\n\t}\n};\n\n/**\n * Save Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const saveReusableBlocks = async ( action, store ) => {\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await resolveSelector( 'core', 'getPostType', 'wp_block' );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tconst { id } = action;\n\tconst { dispatch } = store;\n\tconst state = store.getState();\n\tconst { clientId, title, isTemporary } = getReusableBlock( state, id );\n\tconst reusableBlock = getBlock( state, clientId );\n\tconst content = serialize( reusableBlock.name === 'core/template' ? reusableBlock.innerBlocks : reusableBlock );\n\n\tconst data = isTemporary ? { title, content, status: 'publish' } : { id, title, content, status: 'publish' };\n\tconst path = isTemporary ? `/wp/v2/${ postType.rest_base }` : `/wp/v2/${ postType.rest_base }/${ id }`;\n\tconst method = isTemporary ? 'POST' : 'PUT';\n\n\ttry {\n\t\tconst updatedReusableBlock = await apiFetch( { path, data, method } );\n\t\tdispatch( {\n\t\t\ttype: 'SAVE_REUSABLE_BLOCK_SUCCESS',\n\t\t\tupdatedId: updatedReusableBlock.id,\n\t\t\tid,\n\t\t} );\n\t\tconst message = isTemporary ? __( 'Block created.' ) : __( 'Block updated.' );\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice( message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( { type: 'SAVE_REUSABLE_BLOCK_FAILURE', id } );\n\t\tdataDispatch( 'core/notices' ).createErrorNotice( error.message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t}\n};\n\n/**\n * Delete Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const deleteReusableBlocks = async ( action, store ) => {\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await resolveSelector( 'core', 'getPostType', 'wp_block' );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tconst { id } = action;\n\tconst { getState, dispatch } = store;\n\n\t// Don't allow a reusable block with a temporary ID to be deleted\n\tconst reusableBlock = getReusableBlock( getState(), id );\n\tif ( ! reusableBlock || reusableBlock.isTemporary ) {\n\t\treturn;\n\t}\n\n\t// Remove any other blocks that reference this reusable block\n\tconst allBlocks = getBlocks( getState() );\n\tconst associatedBlocks = allBlocks.filter( ( block ) => isReusableBlock( block ) && block.attributes.ref === id );\n\tconst associatedBlockClientIds = associatedBlocks.map( ( block ) => block.clientId );\n\n\tconst transactionId = uniqueId();\n\n\tdispatch( {\n\t\ttype: 'REMOVE_REUSABLE_BLOCK',\n\t\tid,\n\t\toptimist: { type: BEGIN, id: transactionId },\n\t} );\n\n\t// Remove the parsed block.\n\tdispatch( removeBlocks( [\n\t\t...associatedBlockClientIds,\n\t\treusableBlock.clientId,\n\t] ) );\n\n\ttry {\n\t\tawait apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ id }`,\n\t\t\tmethod: 'DELETE',\n\t\t} );\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_REUSABLE_BLOCK_SUCCESS',\n\t\t\tid,\n\t\t\toptimist: { type: COMMIT, id: transactionId },\n\t\t} );\n\t\tconst message = __( 'Block deleted.' );\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice( message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_REUSABLE_BLOCK_FAILURE',\n\t\t\tid,\n\t\t\toptimist: { type: REVERT, id: transactionId },\n\t\t} );\n\t\tdataDispatch( 'core/notices' ).createErrorNotice( error.message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t}\n};\n\n/**\n * Receive Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @return {Object} receive blocks action\n */\nexport const receiveReusableBlocks = ( action ) => {\n\treturn receiveBlocks( map( action.results, 'parsedBlock' ) );\n};\n\n/**\n * Convert a reusable block to a static block effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const convertBlockToStatic = ( action, store ) => {\n\tconst state = store.getState();\n\tconst oldBlock = getBlock( state, action.clientId );\n\tconst reusableBlock = getReusableBlock( state, oldBlock.attributes.ref );\n\tconst referencedBlock = getBlock( state, reusableBlock.clientId );\n\tlet newBlocks;\n\tif ( referencedBlock.name === 'core/template' ) {\n\t\tnewBlocks = referencedBlock.innerBlocks.map( ( innerBlock ) => cloneBlock( innerBlock ) );\n\t} else {\n\t\tnewBlocks = [ cloneBlock( referencedBlock ) ];\n\t}\n\tstore.dispatch( replaceBlocks( oldBlock.clientId, newBlocks ) );\n};\n\n/**\n * Convert a static block to a reusable block effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const convertBlockToReusable = ( action, store ) => {\n\tconst { getState, dispatch } = store;\n\tlet parsedBlock;\n\tif ( action.clientIds.length === 1 ) {\n\t\tparsedBlock = getBlock( getState(), action.clientIds[ 0 ] );\n\t} else {\n\t\tparsedBlock = createBlock(\n\t\t\t'core/template',\n\t\t\t{},\n\t\t\tgetBlocksByClientId( getState(), action.clientIds )\n\t\t);\n\n\t\t// This shouldn't be necessary but at the moment\n\t\t// we expect the content of the shared blocks to live in the blocks state.\n\t\tdispatch( receiveBlocks( [ parsedBlock ] ) );\n\t}\n\n\tconst reusableBlock = {\n\t\tid: uniqueId( 'reusable' ),\n\t\tclientId: parsedBlock.clientId,\n\t\ttitle: __( 'Untitled Reusable Block' ),\n\t};\n\n\tdispatch( receiveReusableBlocksAction( [ {\n\t\treusableBlock,\n\t\tparsedBlock,\n\t} ] ) );\n\n\tdispatch( saveReusableBlock( reusableBlock.id ) );\n\n\tdispatch( replaceBlocks(\n\t\taction.clientIds,\n\t\tcreateBlock( 'core/block', {\n\t\t\tref: reusableBlock.id,\n\t\t} )\n\t) );\n\n\t// Re-add the original block to the store, since replaceBlock() will have removed it\n\tdispatch( receiveBlocks( [ parsedBlock ] ) );\n};\n"]}