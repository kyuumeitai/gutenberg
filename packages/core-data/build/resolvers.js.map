{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/core-data/src/resolvers.js"],"names":["getAuthors","getEntityRecord","getEntityRecords","getThemeSupports","getEmbedPreview","path","users","kind","name","key","entities","entity","baseURL","record","query","context","records","Object","values","shouldInvalidate","action","type","invalidateCache","activeThemes","theme_supports","url","embedProxyResponse"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { find } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport {\n\treceiveUserQuery,\n\treceiveEntityRecords,\n\treceiveThemeSupports,\n\treceiveEmbedPreview,\n} from './actions';\nimport { getKindEntities } from './entities';\nimport { apiFetch } from './controls';\n\n/**\n * Requests authors from the REST API.\n */\nexport function* getAuthors() {\n\tconst users = yield apiFetch( { path: '/wp/v2/users/?who=authors&per_page=-1' } );\n\tyield receiveUserQuery( 'authors', users );\n}\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key\n */\nexport function* getEntityRecord( kind, name, key ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\tconst record = yield apiFetch( { path: `${ entity.baseURL }/${ key }?context=edit` } );\n\tyield receiveEntityRecords( kind, name, record );\n}\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind   Entity kind.\n * @param {string}  name   Entity name.\n * @param {Object?} query  Query Object.\n */\nexport function* getEntityRecords( kind, name, query = {} ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\tconst path = addQueryArgs( entity.baseURL, {\n\t\t...query,\n\t\tcontext: 'edit',\n\t} );\n\tconst records = yield apiFetch( { path } );\n\tyield receiveEntityRecords( kind, name, Object.values( records ), query );\n}\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\taction.type === 'RECEIVE_ITEMS' &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests theme supports data from the index.\n */\nexport function* getThemeSupports() {\n\tconst activeThemes = yield apiFetch( { path: '/wp/v2/themes?status=active' } );\n\tyield receiveThemeSupports( activeThemes[ 0 ].theme_supports );\n}\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url   URL to get the preview for.\n */\nexport function* getEmbedPreview( url ) {\n\ttry {\n\t\tconst embedProxyResponse = yield apiFetch( { path: addQueryArgs( '/oembed/1.0/proxy', { url } ) } );\n\t\tyield receiveEmbedPreview( url, embedProxyResponse );\n\t} catch ( error ) {\n\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\tyield receiveEmbedPreview( url, false );\n\t}\n}\n"]}