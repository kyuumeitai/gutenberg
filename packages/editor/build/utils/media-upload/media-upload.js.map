{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/editor/src/utils/media-upload/media-upload.js"],"names":["getMimeTypesArray","wpMimeTypesObject","mime","extensionsString","split","type","extensions","extension","mediaUpload","allowedTypes","additionalData","filesList","maxUploadFileSize","onError","noop","onFileChange","wpAllowedMimeTypes","files","filesSet","setAndUpdateFiles","idx","value","isAllowedType","fileType","allowedType","allowedMimeTypesForUser","isAllowedMimeTypeForUser","triggerError","error","message","file","name","forEach","mediaFile","code","size","push","url","createMediaFromFile","then","savedMedia","mediaObject","alt","alt_text","caption","title","raw","source_url","catch","data","window","FormData","append","replace","key","path","body","method"],"mappings":"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","sourcesContent":["/**\n * External Dependencies\n */\nimport {\n\tcompact,\n\tflatMap,\n\tforEach,\n\tget,\n\thas,\n\tincludes,\n\tmap,\n\tnoop,\n\tomit,\n\tsome,\n\tstartsWith,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { createBlobURL, revokeBlobURL } from '@wordpress/blob';\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Browsers may use unexpected mime types, and they differ from browser to browser.\n * This function computes a flexible array of mime types from the mime type structured provided by the server.\n * Converts { jpg|jpeg|jpe: \"image/jpeg\" } into [ \"image/jpeg\", \"image/jpg\", \"image/jpeg\", \"image/jpe\" ]\n * The computation of this array instead of directly using the object,\n * solves the problem in chrome where mp3 files have audio/mp3 as mime type instead of audio/mpeg.\n * https://bugs.chromium.org/p/chromium/issues/detail?id=227004\n *\n * @param {?Object} wpMimeTypesObject Mime type object received from the server.\n *                                    Extensions are keys separated by '|' and values are mime types associated with an extension.\n *\n * @return {?Array} An array of mime types or the parameter passed if it was \"falsy\".\n */\nexport function getMimeTypesArray( wpMimeTypesObject ) {\n\tif ( ! wpMimeTypesObject ) {\n\t\treturn wpMimeTypesObject;\n\t}\n\treturn flatMap( wpMimeTypesObject, ( mime, extensionsString ) => {\n\t\tconst [ type ] = mime.split( '/' );\n\t\tconst extensions = extensionsString.split( '|' );\n\t\treturn [ mime, ...map( extensions, ( extension ) => `${ type }/${ extension }` ) ];\n\t} );\n}\n\n/**\n *\tMedia Upload is used by audio, image, gallery, video, and file blocks to\n *\thandle uploading a media file when a file upload button is activated.\n *\n *\tTODO: future enhancement to add an upload indicator.\n *\n * @param   {Object}   $0                    Parameters object passed to the function.\n * @param   {?Array}   $0.allowedTypes       Array with the types of media that can be uploaded, if unset all types are allowed.\n * @param   {?Object}  $0.additionalData     Additional data to include in the request.\n * @param   {Array}    $0.filesList          List of files.\n * @param   {?number}  $0.maxUploadFileSize  Maximum upload size in bytes allowed for the site.\n * @param   {Function} $0.onError            Function called when an error happens.\n * @param   {Function} $0.onFileChange       Function called each time a file or a temporary representation of the file is available.\n * @param   {?Object}  $0.wpAllowedMimeTypes List of allowed mime types and file extensions.\n */\nexport function mediaUpload( {\n\tallowedTypes,\n\tadditionalData = {},\n\tfilesList,\n\tmaxUploadFileSize,\n\tonError = noop,\n\tonFileChange,\n\twpAllowedMimeTypes = null,\n} ) {\n\t// Cast filesList to array\n\tconst files = [ ...filesList ];\n\n\tconst filesSet = [];\n\tconst setAndUpdateFiles = ( idx, value ) => {\n\t\trevokeBlobURL( get( filesSet, [ idx, 'url' ] ) );\n\t\tfilesSet[ idx ] = value;\n\t\tonFileChange( compact( filesSet ) );\n\t};\n\n\t// Allowed type specified by consumer\n\tconst isAllowedType = ( fileType ) => {\n\t\tif ( ! allowedTypes ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn some(\n\t\t\tallowedTypes,\n\t\t\t( allowedType ) => {\n\t\t\t\t// If a complete mimetype is specified verify if it matches exactly the mime type of the file.\n\t\t\t\tif ( includes( allowedType, '/' ) ) {\n\t\t\t\t\treturn allowedType === fileType;\n\t\t\t\t}\n\t\t\t\t// Otherwise a general mime type is used and we should verify if the file mimetype starts with it.\n\t\t\t\treturn startsWith( fileType, `${ allowedType }/` );\n\t\t\t}\n\t\t);\n\t};\n\n\t// Allowed types for the current WP_User\n\tconst allowedMimeTypesForUser = getMimeTypesArray( wpAllowedMimeTypes );\n\tconst isAllowedMimeTypeForUser = ( fileType ) => {\n\t\treturn includes( allowedMimeTypesForUser, fileType );\n\t};\n\n\t// Build the error message including the filename\n\tconst triggerError = ( error ) => {\n\t\terror.message = [\n\t\t\t<strong key=\"filename\">{ error.file.name }</strong>,\n\t\t\t': ',\n\t\t\terror.message,\n\t\t];\n\n\t\tonError( error );\n\t};\n\n\tfiles.forEach( ( mediaFile, idx ) => {\n\t\t// verify if user is allowed to upload this mime type\n\t\tif ( allowedMimeTypesForUser && ! isAllowedMimeTypeForUser( mediaFile.type ) ) {\n\t\t\ttriggerError( {\n\t\t\t\tcode: 'MIME_TYPE_NOT_ALLOWED_FOR_USER',\n\t\t\t\tmessage: __( 'Sorry, this file type is not permitted for security reasons.' ),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if the block supports this mime type\n\t\tif ( ! isAllowedType( mediaFile.type ) ) {\n\t\t\ttriggerError( {\n\t\t\t\tcode: 'MIME_TYPE_NOT_SUPPORTED',\n\t\t\t\tmessage: __( 'Sorry, this file type is not supported here.' ),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\treturn;\n\t\t}\n\n\t\t// verify if file is greater than the maximum file upload size allowed for the site.\n\t\tif ( maxUploadFileSize && mediaFile.size > maxUploadFileSize ) {\n\t\t\ttriggerError( {\n\t\t\t\tcode: 'SIZE_ABOVE_LIMIT',\n\t\t\t\tmessage: __( 'This file exceeds the maximum upload size for this site.' ),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\treturn;\n\t\t}\n\n\t\t// Don't allow empty files to be uploaded.\n\t\tif ( mediaFile.size <= 0 ) {\n\t\t\ttriggerError( {\n\t\t\t\tcode: 'EMPTY_FILE',\n\t\t\t\tmessage: __( 'This file is empty.' ),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\treturn;\n\t\t}\n\n\t\t// Set temporary URL to create placeholder media file, this is replaced\n\t\t// with final file from media gallery when upload is `done` below\n\t\tfilesSet.push( { url: createBlobURL( mediaFile ) } );\n\t\tonFileChange( filesSet );\n\n\t\treturn createMediaFromFile( mediaFile, additionalData )\n\t\t\t.then( ( savedMedia ) => {\n\t\t\t\tconst mediaObject = {\n\t\t\t\t\t...omit( savedMedia, [ 'alt_text', 'source_url' ] ),\n\t\t\t\t\talt: savedMedia.alt_text,\n\t\t\t\t\tcaption: get( savedMedia, [ 'caption', 'raw' ], '' ),\n\t\t\t\t\ttitle: savedMedia.title.raw,\n\t\t\t\t\turl: savedMedia.source_url,\n\t\t\t\t};\n\t\t\t\tsetAndUpdateFiles( idx, mediaObject );\n\t\t\t} )\n\t\t\t.catch( ( error ) => {\n\t\t\t\t// Reset to empty on failure.\n\t\t\t\tsetAndUpdateFiles( idx, null );\n\t\t\t\tlet message;\n\t\t\t\tif ( has( error, [ 'message' ] ) ) {\n\t\t\t\t\tmessage = get( error, [ 'message' ] );\n\t\t\t\t} else {\n\t\t\t\t\tmessage = sprintf(\n\t\t\t\t\t\t// translators: %s: file name\n\t\t\t\t\t\t__( 'Error while uploading file %s to the media library.' ),\n\t\t\t\t\t\tmediaFile.name\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tonError( {\n\t\t\t\t\tcode: 'GENERAL',\n\t\t\t\t\tmessage,\n\t\t\t\t\tfile: mediaFile,\n\t\t\t\t} );\n\t\t\t} );\n\t} );\n}\n\n/**\n * @param {File}    file           Media File to Save.\n * @param {?Object} additionalData Additional data to include in the request.\n *\n * @return {Promise} Media Object Promise.\n */\nfunction createMediaFromFile( file, additionalData ) {\n\t// Create upload payload\n\tconst data = new window.FormData();\n\tdata.append( 'file', file, file.name || file.type.replace( '/', '.' ) );\n\tdata.append( 'title', file.name ? file.name.replace( /\\.[^.]+$/, '' ) : file.type.replace( '/', '.' ) );\n\tforEach( additionalData, ( ( value, key ) => data.append( key, value ) ) );\n\treturn apiFetch( {\n\t\tpath: '/wp/v2/media',\n\t\tbody: data,\n\t\tmethod: 'POST',\n\t} );\n}\n"]}