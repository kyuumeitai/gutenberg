{"version":3,"sources":["/Users/ky/Sites/valet/copesacontent/web/app/plugins/gutenberg/packages/components/src/primitives/svg/index.native.js"],"names":["SVG","props","styleKeys","Array","styleValues","style","String","split","forEach","element","oneStyle","styles","undefined","push","safeProps","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AACA;;AAKA;;AATA;;;;AAMA;;;AAaO,IAAMA,GAAG,GAAG,SAANA,GAAM,CAAEC,KAAF,EAAa;AAC/B;AACA;AACA;AACA,MAAIC,SAAS,GAAG,IAAIC,KAAJ,EAAhB;AACA,MAAMC,WAAW,GAAG,IAAID,KAAJ,EAApB;;AACA,MAAK,OAAOF,KAAK,CAACI,KAAb,KAAuB,QAAvB,IAAmCJ,KAAK,CAACI,KAAN,YAAuBC,MAA/D,EAAwE;AACvEJ,IAAAA,SAAS,GAAGD,KAAK,CAACI,KAAN,CAAYE,KAAZ,CAAmB,GAAnB,CAAZ;AACAL,IAAAA,SAAS,CAACM,OAAV,CAAmB,UAAEC,OAAF,EAAe;AACjC,UAAMC,QAAQ,GAAGC,eAAQF,OAAR,CAAjB;;AACA,UAAKC,QAAQ,KAAKE,SAAlB,EAA8B;AAC7BR,QAAAA,WAAW,CAACS,IAAZ,CAAkBH,QAAlB;AACA;AACD,KALD;AAMA;;AAED,MAAMI,SAAS,GAAGV,WAAW,CAACW,MAAZ,KAAuB,CAAvB,mCAAgC,kBAAMd,KAAN,EAAa,CAAE,OAAF,CAAb,CAAhC,oCAAoEA,KAApE;AAA2EI,IAAAA,KAAK,EAAED;AAAlF,IAAlB;AACA,SACC,4BAAC,mBAAD;AACC,IAAA,MAAM,EAAC,MADR;AAEC,IAAA,KAAK,EAAC;AAFP,KAGMU,SAHN,EADD;AAOA,CAxBM","sourcesContent":["/**\n * External dependencies\n */\nimport { omit } from 'lodash';\nimport { Svg } from 'react-native-svg';\n\n/**\n * Internal dependencies\n */\nimport styles from '../../dashicon/style.scss';\n\nexport {\n\tCircle,\n\tG,\n\tPath,\n\tPolygon,\n\tRect,\n} from 'react-native-svg';\n\nexport const SVG = ( props ) => {\n\t// We're using the react-native-classname-to-style plugin, so when a `className` prop is passed it gets converted to `style` here.\n\t// Given it carries a string (as it was originally className) but an object is expected for `style`,\n\t// we need to check whether `style` exists and is a string, and convert it to an object\n\tlet styleKeys = new Array();\n\tconst styleValues = new Array();\n\tif ( typeof props.style === 'string' || props.style instanceof String ) {\n\t\tstyleKeys = props.style.split( ' ' );\n\t\tstyleKeys.forEach( ( element ) => {\n\t\t\tconst oneStyle = styles[ element ];\n\t\t\tif ( oneStyle !== undefined ) {\n\t\t\t\tstyleValues.push( oneStyle );\n\t\t\t}\n\t\t} );\n\t}\n\n\tconst safeProps = styleValues.length === 0 ? { ...omit( props, [ 'style' ] ) } : { ...props, style: styleValues };\n\treturn (\n\t\t<Svg\n\t\t\theight=\"100%\"\n\t\t\twidth=\"100%\"\n\t\t\t{ ...safeProps }\n\t\t/>\n\t);\n};\n"]}